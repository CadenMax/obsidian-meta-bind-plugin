"use strict";
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target, mod2));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@opd-libs/opd-metadata-lib/lib/Utils.js
var require_Utils = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/Utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OPDTraversalError = exports.validatePath = exports.parsePath = exports.traverseObjectByPath = exports.traverseObjectToParent = exports.traverseObject = void 0;
    function traverseObject(path, o) {
      let pathParts = parsePath(path);
      return traverseObjectByPath(pathParts, o);
    }
    exports.traverseObject = traverseObject;
    function traverseObjectToParent(path, o) {
      var _a;
      let pathParts = parsePath(path);
      if (pathParts[0] === "") {
        throw new OPDTraversalError("can not traverse to parent on self reference");
      }
      let parentPath = pathParts.slice(0, -1);
      let childKey = (_a = pathParts.at(-1)) !== null && _a !== void 0 ? _a : "";
      let parentObject = traverseObjectByPath(parentPath, o);
      return {
        parent: { key: parentPath, value: parentObject },
        child: { key: childKey, value: parentObject[childKey] }
      };
    }
    exports.traverseObjectToParent = traverseObjectToParent;
    function traverseObjectByPath(pathParts, o) {
      for (const pathPart of pathParts) {
        if (pathPart === "") {
          return o;
        }
        if (o === void 0) {
          return void 0;
        }
        o = o[pathPart];
      }
      return o;
    }
    exports.traverseObjectByPath = traverseObjectByPath;
    function parsePath(path) {
      path = path.replace(/'/g, '"');
      validatePath(path);
      return path.split(".").map((x) => x.split("[").map((y) => {
        if (y.endsWith("]")) {
          y = y.slice(0, -1);
        }
        if (y.startsWith('"') && y.endsWith('"')) {
          y = y.slice(1, -1);
        }
        return y;
      })).flat();
    }
    exports.parsePath = parsePath;
    function validatePath(path) {
      const allowedCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_.[]"';
      const numbers = "0123456789";
      const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      let insideStringBrackets = false;
      let insideNumberBrackets = false;
      for (let i = 0; i < path.length; i++) {
        const char = path[i];
        const nextChar = path[i + 1];
        if (!allowedCharacters.includes(char)) {
          throw new OPDTraversalError(`Invalid character "${char}" at position ${i} in "${path}", character ${char} is not a valid character`);
        }
        if (char === ".") {
          if (i === 0) {
            throw new OPDTraversalError(`Invalid character "${char}" at position ${i} in "${path}", path may not start with a dot`);
          }
          if (!(letters.includes(nextChar) || nextChar === "_")) {
            throw new OPDTraversalError(`Invalid character "${nextChar}" at position ${i + 1} in "${path}", expected a letter or underscore to follow a dot`);
          }
        }
        if (char === "[") {
          if (numbers.includes(nextChar)) {
            insideNumberBrackets = true;
            continue;
          } else if (nextChar === '"') {
            if (!(letters.includes(path[i + 2]) || path[i + 2] === "_")) {
              throw new OPDTraversalError(`Invalid character "${path[i + 2]}" at position ${i + 2} in "${path}", expected a letter or underscore to follow a "`);
            }
            insideStringBrackets = true;
            i += 1;
            continue;
          } else {
            throw new OPDTraversalError(`Invalid character "${nextChar}" at position ${i + 1} in "${path}", expected number or " to follow a [`);
          }
        }
        if (insideStringBrackets && char === '"') {
          if (nextChar === "]") {
            insideStringBrackets = false;
            i += 1;
            continue;
          } else {
            throw new OPDTraversalError(`Invalid character "${nextChar}" at position ${i + 1} in "${path}", expected ] to follow "`);
          }
        }
        if (insideNumberBrackets && char === "]") {
          insideNumberBrackets = false;
          continue;
        }
        if (insideStringBrackets && (char === "." || char === "]" || char === "[")) {
          throw new OPDTraversalError(`Invalid character "${char}" at position ${i} in "${path}", expected letter, number or underscore expected inside of string`);
        }
        if (insideNumberBrackets && !numbers.includes(char)) {
          throw new OPDTraversalError(`Invalid character "${char}" at position ${i} in "${path}", number expected inside of brackets`);
        }
        if (!(insideNumberBrackets || insideStringBrackets)) {
          if (char === "]") {
            throw new OPDTraversalError(`Invalid character "${char}" at position ${i} in "${path}", expected [ to proceed`);
          }
        }
      }
    }
    exports.validatePath = validatePath;
    var OPDTraversalError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    exports.OPDTraversalError = OPDTraversalError;
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/ObsUtils.js
var require_ObsUtils = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/ObsUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyFrontmatter = void 0;
    var obsidian_1 = require("obsidian");
    function stringifyFrontmatter(frontmatter) {
      return `---
${(0, obsidian_1.stringifyYaml)(frontmatter)}---`;
    }
    exports.stringifyFrontmatter = stringifyFrontmatter;
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/Internal.js
var require_Internal = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/Internal.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Internal = void 0;
    var obsidian_1 = require("obsidian");
    var Utils_1 = require_Utils();
    var ObsUtils_1 = require_ObsUtils();
    var Internal3;
    (function(Internal4) {
      Internal4.frontMatterRexExpPattern = "^(---)\\n[\\s\\S]*?\\n---";
      function getMetaDataFromFileContent(fileContent) {
        const regExp = new RegExp(Internal4.frontMatterRexExpPattern);
        const frontMatterRegExpResult = regExp.exec(fileContent);
        if (!frontMatterRegExpResult) {
          return [];
        }
        let frontMatter = frontMatterRegExpResult[0];
        if (!frontMatter) {
          return [];
        }
        frontMatter = frontMatter.substring(4);
        frontMatter = frontMatter.substring(0, frontMatter.length - 3);
        return getMetaDataFromYAML(frontMatter);
      }
      Internal4.getMetaDataFromFileContent = getMetaDataFromFileContent;
      function getMetaDataFromYAML(yaml) {
        if (!yaml) {
          return {};
        }
        const obj = (0, obsidian_1.parseYaml)(yaml);
        if (!obj) {
          return {};
        }
        return obj;
      }
      Internal4.getMetaDataFromYAML = getMetaDataFromYAML;
      function getMetadataFromFileCache3(file, plugin) {
        var _a;
        let metadata = (_a = plugin.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
        if (metadata) {
          metadata = Object.assign({}, metadata);
          delete metadata.position;
        } else {
          return {};
        }
        return metadata;
      }
      Internal4.getMetadataFromFileCache = getMetadataFromFileCache3;
      function removeFrontmatter(fileContent) {
        return fileContent.replace(new RegExp(Internal4.frontMatterRexExpPattern), "");
      }
      Internal4.removeFrontmatter = removeFrontmatter;
      function updateFrontmatter(metadata, file, plugin) {
        return __awaiter(this, void 0, void 0, function* () {
          let fileContent = yield plugin.app.vault.cachedRead(file);
          fileContent = removeFrontmatter(fileContent);
          fileContent = `${(0, ObsUtils_1.stringifyFrontmatter)(metadata)}${fileContent}`;
          yield plugin.app.vault.modify(file, fileContent);
        });
      }
      Internal4.updateFrontmatter = updateFrontmatter;
      function hasField(path, metadata) {
        return getField(path, metadata) !== void 0;
      }
      Internal4.hasField = hasField;
      function getField(path, metadata) {
        return (0, Utils_1.traverseObject)(path, metadata);
      }
      Internal4.getField = getField;
      function deleteField(path, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, can not delete child from non existing parent`);
        }
        if (Array.isArray(parent.value)) {
          const index = Number.parseInt(child.key);
          if (Number.isNaN(index)) {
            return metadata;
          }
          parent.value.splice(index, 1);
        } else {
          delete parent.value[child.key];
        }
        return metadata;
      }
      Internal4.deleteField = deleteField;
      function updateField(path, value, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, please create the parent first`);
        }
        if (child.value === void 0) {
          throw Error(`Field with key "${path}" does not exist in Object`);
        }
        parent.value[child.key] = value;
        return metadata;
      }
      Internal4.updateField = updateField;
      function insertField(path, value, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, please create the parent first`);
        }
        if (child.value !== void 0) {
          throw Error(`Field with key "${path}" does already exist in Object`);
        }
        parent.value[child.key] = value;
        return metadata;
      }
      Internal4.insertField = insertField;
      function updateOrInsertField(path, value, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, please create the parent first`);
        }
        parent.value[child.key] = value;
        return metadata;
      }
      Internal4.updateOrInsertField = updateOrInsertField;
    })(Internal3 = exports.Internal || (exports.Internal = {}));
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/API.js
var require_API = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/API.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFieldInTFile = exports.deleteFieldInTFile = exports.updateOrInsertFieldInTFile = exports.updateFieldInTFile = exports.insertFieldInTFile = exports.getFieldFromTFile = exports.doesFieldExistInTFile = void 0;
    var Internal_1 = require_Internal();
    var ObsUtils_1 = require_ObsUtils();
    function doesFieldExistInTFile(field, file, plugin, isInline = false) {
      const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
      return Internal_1.Internal.hasField(field, metadata);
    }
    exports.doesFieldExistInTFile = doesFieldExistInTFile;
    function getFieldFromTFile(field, file, plugin, isInline = false) {
      const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
      return Internal_1.Internal.getField(field, metadata);
    }
    exports.getFieldFromTFile = getFieldFromTFile;
    function insertFieldInTFile(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.insertField(field, value, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.insertFieldInTFile = insertFieldInTFile;
    function updateFieldInTFile(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.updateField(field, value, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.updateFieldInTFile = updateFieldInTFile;
    function updateOrInsertFieldInTFile2(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        let metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.updateOrInsertField(field, value, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.updateOrInsertFieldInTFile = updateOrInsertFieldInTFile2;
    function deleteFieldInTFile(field, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.deleteField(field, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.deleteFieldInTFile = deleteFieldInTFile;
    function generateFileContents(plugin, file, frontmatterAsYaml) {
      return __awaiter(this, void 0, void 0, function* () {
        const fileContents = yield plugin.app.vault.cachedRead(file);
        return fileContents.replace(/^---\n(.*\n)*---/, frontmatterAsYaml);
      });
    }
    function updateParsedFrontmatter(plugin, file, field, value) {
      var _a;
      let frontmatter = (_a = plugin.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
      if (frontmatter) {
        frontmatter[field] = value;
      } else {
        frontmatter = { [field]: value };
      }
      return frontmatter;
    }
    function createFieldInTFile(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        let frontmatter = updateParsedFrontmatter(plugin, file, field, value);
        const updatedYaml = (0, ObsUtils_1.stringifyFrontmatter)(frontmatter);
        let fileContents = yield generateFileContents(plugin, file, updatedYaml);
        yield plugin.app.vault.modify(file, fileContents);
      });
    }
    exports.createFieldInTFile = createFieldInTFile;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetaBindPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian14 = require("obsidian");

// src/settings/Settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  devMode: false,
  preferredDateFormat: "YYYY-MM-DD",
  useUsDateInputOrder: false,
  syncInterval: 200,
  minSyncInterval: 50,
  maxSyncInterval: 1e3,
  inputTemplates: ""
};
var MetaBindSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Meta Bind Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Sync interval").setDesc(`The interval in milli-seconds between disk writes. Changing this number is not recommended except if your hard drive is exceptionally slow. Standard: ${DEFAULT_SETTINGS.syncInterval}; Minimum: ${DEFAULT_SETTINGS.minSyncInterval}; Maximum: ${DEFAULT_SETTINGS.maxSyncInterval}`).addText((cb) => {
      cb.setValue(this.plugin.settings.syncInterval.toString());
      cb.onChange((data) => {
        this.plugin.settings.syncInterval = Number.parseInt(data);
        if (Number.isNaN(this.plugin.settings.syncInterval)) {
          this.plugin.settings.syncInterval = DEFAULT_SETTINGS.syncInterval;
        }
        if (this.plugin.settings.syncInterval < DEFAULT_SETTINGS.minSyncInterval) {
          this.plugin.settings.syncInterval = DEFAULT_SETTINGS.minSyncInterval;
        }
        if (this.plugin.settings.syncInterval > DEFAULT_SETTINGS.maxSyncInterval) {
          this.plugin.settings.syncInterval = DEFAULT_SETTINGS.maxSyncInterval;
        }
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc(`The date format to be used by this plugin. Changing this setting will break the parsing of existing date inputs. Here is a list of all available date tokes https://momentjs.com/docs/#/displaying/.`).addText((cb) => {
      cb.setValue(this.plugin.settings.preferredDateFormat);
      cb.onChange((data) => {
        this.plugin.settings.preferredDateFormat = data;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Use US date input field order").setDesc(`When enabled the month input is before the day input.`).addToggle((cb) => {
      cb.setValue(this.plugin.settings.useUsDateInputOrder);
      cb.onChange((data) => {
        this.plugin.settings.useUsDateInputOrder = data;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Templates").setDesc(`You can specify templates here, and access them using \`TEMPLATE_INPUT[...]\` in your notes.`);
    const ta = new import_obsidian.TextAreaComponent(containerEl);
    ta.setValue(this.plugin.settings.inputTemplates);
    ta.setPlaceholder("template_name -> INPUT[input_type(argument(value)):bind_target]");
    ta.inputEl.style.width = "100%";
    ta.inputEl.style.height = "200px";
    ta.onChange((data) => {
      this.plugin.settings.inputTemplates = data;
      this.plugin.saveSettings();
    });
    new import_obsidian.Setting(containerEl).setName("Dev Mode").setDesc("Enable dev mode. Not recommended unless you want to debug this plugin.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.devMode);
      cb.onChange((data) => {
        this.plugin.settings.devMode = data;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/InputFieldMarkdownRenderChild.ts
var import_obsidian13 = require("obsidian");

// src/utils/Logger.ts
var _Logger = class {
  static log(...data) {
    console.log(this.prefix, ...data);
  }
  static logDebug(...data) {
    if (this.devMode) {
      _Logger.log(...data);
    }
  }
  static logWarning(...data) {
    console.warn(this.prefix, data);
  }
  static warn(...data) {
    console.warn(data);
  }
  static logError(...data) {
    console.error(this.prefix, data);
  }
};
var Logger = _Logger;
Logger.prefix = "meta-bind |";

// src/inputFields/AbstractInputField.ts
var AbstractInputField = class {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    this.inputFieldMarkdownRenderChild = inputFieldMarkdownRenderChild;
    this.onValueChange = onValueChange;
  }
};
AbstractInputField.allowCodeBlock = true;
AbstractInputField.allowInlineCodeBlock = true;

// src/inputFields/ToggleInputField.ts
var import_obsidian2 = require("obsidian");

// src/utils/Utils.ts
var MetaBindInternalError = class extends Error {
  constructor(message) {
    super(`[MB_INTERNAL_ERROR - please report this error here https://github.com/mProjectsCode/obsidian-meta-bind-plugin/issues] ${message}`);
  }
};
var MetaBindParsingError = class extends Error {
  constructor(message) {
    super(`[MB_PARSING_ERROR] ${message}`);
  }
};
var MetaBindBindTargetError = class extends Error {
  constructor(message) {
    super(`[MB_BIND_TARGET_ERROR] ${message}`);
  }
};
function getFileName(path) {
  var _a;
  return (_a = path.split("/").at(-1)) != null ? _a : path;
}
function isPath(path) {
  return path.split("/").length > 1;
}
function removeFileEnding(fileName) {
  const fileNameParts = fileName.split(".");
  if (fileNameParts.length === 1) {
    return fileName;
  } else {
    let newFileName = fileNameParts[0];
    for (let i = 1; i < fileNameParts.length - 1; i++) {
      newFileName += "." + fileNameParts[i];
    }
    return newFileName;
  }
}
function mod(n, m) {
  return (n % m + m) % m;
}
function arrayEquals(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  for (const arr1Element of arr1) {
    if (!arr2.contains(arr1Element)) {
      return false;
    }
  }
  return true;
}
function isTruthy(value) {
  return !!value;
}
function isFalsy(value) {
  return !value;
}
function equalOrIncludes(str1, str2) {
  return str1 === str2 || str1.includes(str2) || str2.includes(str1);
}

// src/inputFields/ToggleInputField.ts
var ToggleInputField = class extends AbstractInputField {
  getValue() {
    if (!this.toggleComponent) {
      throw new MetaBindInternalError("toggle input component is undefined");
    }
    return this.toggleComponent.getValue();
  }
  setValue(value) {
    if (!this.toggleComponent) {
      throw new MetaBindInternalError("toggle input component is undefined");
    }
    if (value != null && typeof value == "boolean") {
      this.toggleComponent.setValue(value);
    } else {
      Logger.logWarning(`can not set value of toggle to '${value}'`);
      this.toggleComponent.setValue(false);
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return false;
  }
  getHtmlElement() {
    if (!this.toggleComponent) {
      throw new MetaBindInternalError("toggle input component is undefined");
    }
    return this.toggleComponent.toggleEl;
  }
  render(container) {
    const component = new import_obsidian2.ToggleComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    this.toggleComponent = component;
  }
};

// src/inputFields/TextInputField.ts
var import_obsidian3 = require("obsidian");
var TextInputField = class extends AbstractInputField {
  getValue() {
    if (!this.textComponent) {
      throw new MetaBindInternalError("text input component is undefined");
    }
    return this.textComponent.getValue();
  }
  setValue(value) {
    if (!this.textComponent) {
      throw new MetaBindInternalError("text input component is undefined");
    }
    if (value != null && typeof value == "string") {
      this.textComponent.setValue(value);
    } else {
      Logger.logWarning(`can not set value of text input to '${value}'`);
      this.textComponent.setValue("");
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return "";
  }
  getHtmlElement() {
    if (!this.textComponent) {
      throw new MetaBindInternalError("text input component is undefined");
    }
    return this.textComponent.inputEl;
  }
  render(container) {
    const component = new import_obsidian3.TextComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    this.textComponent = component;
  }
};

// src/inputFields/SliderInputField.ts
var import_obsidian4 = require("obsidian");

// src/utils/ParserUtils.ts
var EnclosingPair = class {
  constructor(openingString, closingString) {
    if (isFalsy(openingString)) {
      throw new MetaBindInternalError("opening string must not be empty");
    }
    this.openingEqualsClosing = isFalsy(closingString) || openingString === closingString;
    if (this.openingEqualsClosing) {
      this._openingString = openingString;
      this._closingString = openingString;
    } else {
      this._openingString = openingString;
      this._closingString = closingString;
    }
  }
  get openingString() {
    return this._openingString;
  }
  get closingString() {
    return this.openingEqualsClosing ? this._openingString : this._closingString;
  }
  overlaps(other) {
    return equalOrIncludes(this.openingString, other.openingString) || equalOrIncludes(this.openingString, other.closingString) || equalOrIncludes(this.closingString, other.openingString) || equalOrIncludes(this.closingString, other.closingString);
  }
  equals(other) {
    if (isFalsy(other)) {
      return false;
    }
    return this.openingString === other.openingString && this.closingString === other.closingString;
  }
  toString() {
    return JSON.stringify(this);
  }
};
var ParserUtils = class {
  static split(str, separator, ignore) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    if (!separator) {
      throw new MetaBindInternalError("separator must not be empty");
    }
    let subStr = "";
    const subStrings = [];
    if (ignore) {
      let remainingOpeningStringCount = ParserUtils.numberOfOccurrences(str, ignore.openingString);
      let remainingClosingStringCount = ParserUtils.numberOfOccurrences(str, ignore.closingString);
      let enclosingLevel = 0;
      strLoop:
        for (let i = 0; i < str.length; i++) {
          if (enclosingLevel === 0 && ParserUtils.isStringAt(str, separator, i)) {
            subStrings.push(subStr);
            subStr = "";
            i += separator.length - 1;
          } else {
            subStr += str[i];
          }
          if (ignore.openingEqualsClosing) {
            if (ParserUtils.isStringAt(str, ignore.openingString, i)) {
              if (enclosingLevel % 2 === 0 && remainingOpeningStringCount === 1) {
              } else if (enclosingLevel % 2 === 0) {
                enclosingLevel += 1;
                for (let j = 1; j < ignore.openingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              } else {
                enclosingLevel -= 1;
                for (let j = 1; j < ignore.closingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              }
              remainingOpeningStringCount -= 1;
            }
          } else {
            if (ParserUtils.isStringAt(str, ignore.openingString, i)) {
              if (remainingOpeningStringCount <= remainingClosingStringCount) {
                enclosingLevel += 1;
                for (let j = 1; j < ignore.openingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              }
              remainingOpeningStringCount -= 1;
            } else if (ParserUtils.isStringAt(str, ignore.closingString, i)) {
              if (enclosingLevel > 0) {
                enclosingLevel -= 1;
                for (let j = 1; j < ignore.closingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              }
              remainingClosingStringCount -= 1;
            }
          }
        }
    } else {
      for (let i = 0; i < str.length; i++) {
        if (ParserUtils.isStringAt(str, separator, i)) {
          subStrings.push(subStr);
          subStr = "";
          i += separator.length - 1;
        } else {
          subStr += str[i];
        }
      }
    }
    subStrings.push(subStr);
    return subStrings;
  }
  static removeInBetween(str, enclosingPair) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    let remainingOpeningStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.openingString);
    let remainingClosingStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.closingString);
    let enclosingLevel = 0;
    let subStr = "";
    for (let i = 0; i < str.length; i++) {
      if (enclosingPair.openingEqualsClosing) {
        if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
          if (enclosingLevel % 2 === 0 && remainingOpeningStringCount === 1) {
          } else if (enclosingLevel % 2 === 0) {
            enclosingLevel += 1;
            i += enclosingPair.openingString.length;
            if (i >= str.length) {
              break;
            }
          } else {
            enclosingLevel -= 1;
            i += enclosingPair.closingString.length;
            if (i >= str.length) {
              break;
            }
          }
          remainingOpeningStringCount -= 1;
        }
      } else {
        if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
          if (remainingOpeningStringCount <= remainingClosingStringCount) {
            enclosingLevel += 1;
            i += enclosingPair.openingString.length;
            if (i >= str.length) {
              break;
            }
          }
          remainingOpeningStringCount -= 1;
        } else if (ParserUtils.isStringAt(str, enclosingPair.closingString, i)) {
          if (enclosingLevel > 0) {
            enclosingLevel -= 1;
            i += enclosingPair.closingString.length;
            if (i >= str.length) {
              break;
            }
          }
          remainingClosingStringCount -= 1;
        }
      }
      if (enclosingLevel === 0) {
        subStr += str[i];
      }
    }
    return subStr;
  }
  static getInBetween(str, enclosingPair) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    let remainingOpeningStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.openingString);
    let remainingClosingStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.closingString);
    let enclosingLevel = 0;
    let subStr = "";
    const subStrings = [];
    strLoop:
      for (let i = 0; i < str.length; i++) {
        if (enclosingPair.openingEqualsClosing) {
          if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
            if (enclosingLevel % 2 === 0 && remainingOpeningStringCount === 1) {
            } else if (enclosingLevel % 2 === 0) {
              enclosingLevel += 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.openingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i >= str.length) {
                  break strLoop;
                }
              }
            } else {
              enclosingLevel -= 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.closingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i > str.length) {
                  break strLoop;
                }
              }
              subStrings.push(subStr);
              subStr = "";
            }
            remainingOpeningStringCount -= 1;
          } else {
            if (enclosingLevel >= 1) {
              subStr += str[i];
            }
          }
        } else {
          if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
            if (remainingOpeningStringCount <= remainingClosingStringCount) {
              enclosingLevel += 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.openingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i >= str.length) {
                  break strLoop;
                }
              }
            }
            remainingOpeningStringCount -= 1;
          } else if (ParserUtils.isStringAt(str, enclosingPair.closingString, i)) {
            if (enclosingLevel > 0) {
              enclosingLevel -= 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.closingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i > str.length) {
                  break strLoop;
                }
              }
              if (enclosingLevel === 0) {
                subStrings.push(subStr);
                subStr = "";
              }
            }
            remainingClosingStringCount -= 1;
          } else {
            if (enclosingLevel >= 1) {
              subStr += str[i];
            }
          }
        }
      }
    if (subStrings.length === 0) {
      return "";
    } else if (subStrings.length === 1) {
      return subStrings[0].substring(enclosingPair.openingString.length, subStrings[0].length - enclosingPair.closingString.length);
    } else {
      return subStrings.map((x) => x.substring(enclosingPair.openingString.length, x.length - enclosingPair.closingString.length));
    }
  }
  static isStringAt(str, subStr, index) {
    if (index < 0) {
      throw new MetaBindInternalError("index must be greater than 0");
    }
    if (index >= str.length) {
      throw new MetaBindInternalError("index out of bounds of string");
    }
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    if (!subStr) {
      throw new MetaBindInternalError("sub string must not be empty");
    }
    for (let i = 0; i < subStr.length; i++) {
      if (str[i + index] !== subStr[i]) {
        return false;
      }
    }
    return true;
  }
  static contains(str, subStr) {
    return ParserUtils.numberOfOccurrences(str, subStr) > 0;
  }
  static numberOfOccurrences(str, subStr) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    if (!subStr) {
      throw new MetaBindInternalError("sub string must not be empty");
    }
    let occurrences = 0;
    for (let i = 0; i < str.length; i++) {
      if (ParserUtils.isStringAt(str, subStr, i)) {
        occurrences += 1;
      }
    }
    return occurrences;
  }
};

// src/inputFieldArguments/AbstractInputFieldArgument.ts
var AbstractInputFieldArgument = class {
  constructor() {
    this.identifier = "invalid" /* INVALID */;
    this.allowedInputFields = [];
    this.requiresValue = false;
    this.allowMultiple = false;
  }
  isAllowed(inputFieldType) {
    if (this.allowedInputFields.length === 0) {
      return true;
    }
    return this.allowedInputFields.contains(inputFieldType);
  }
  getAllowedInputFieldsAsString() {
    return this.allowedInputFields.length === 0 ? "all" : this.allowedInputFields.join(", ");
  }
};

// src/inputFieldArguments/ClassInputFieldArgument.ts
var ClassInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "class" /* CLASS */;
    this.allowedInputFields = [];
    this.value = [];
    this.requiresValue = true;
    this.allowMultiple = true;
  }
  parseValue(valueStr) {
    this.value = valueStr.split(" ");
  }
};

// src/inputFieldArguments/AddLabelsInputFieldArgument.ts
var AddLabelsInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "addLabels" /* ADD_LABELS */;
    this.allowedInputFields = ["slider" /* SLIDER */];
    this.value = true;
    this.requiresValue = false;
    this.allowMultiple = false;
  }
  parseValue(valueStr) {
    this.value = valueStr.toLowerCase() === "true";
  }
};

// src/inputFieldArguments/MinValueInputFieldArgument.ts
var MinValueInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "minValue" /* MIN_VALUE */;
    this.allowedInputFields = ["slider" /* SLIDER */];
    this.value = 0;
    this.requiresValue = true;
    this.allowMultiple = false;
  }
  parseValue(valueStr) {
    this.value = Number.parseInt(valueStr);
    if (Number.isNaN(this.value)) {
      throw new MetaBindParsingError("value of argument 'minValue' must be of type number");
    }
  }
};

// src/inputFieldArguments/MaxValueInputFieldArgument.ts
var MaxValueInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "maxValue" /* MAX_VALUE */;
    this.allowedInputFields = ["slider" /* SLIDER */];
    this.value = 100;
    this.requiresValue = true;
    this.allowMultiple = false;
  }
  parseValue(valueStr) {
    this.value = Number.parseInt(valueStr);
    if (Number.isNaN(this.value)) {
      throw new MetaBindParsingError("value of argument 'maxValue' must be of type number");
    }
  }
};

// src/inputFieldArguments/OptionInputFieldArgument.ts
var OptionInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "option" /* OPTION */;
    this.allowedInputFields = ["select" /* SELECT */, "multi_select" /* MULTI_SELECT */];
    this.value = "";
    this.requiresValue = true;
    this.allowMultiple = true;
  }
  parseValue(valueStr) {
    this.value = valueStr;
  }
};

// src/inputFieldArguments/TitleInputFieldArgument.ts
var TitleInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "title" /* TITLE */;
    this.allowedInputFields = ["select" /* SELECT */, "multi_select" /* MULTI_SELECT */];
    this.value = "";
    this.requiresValue = true;
    this.allowMultiple = false;
  }
  parseValue(valueStr) {
    this.value = valueStr;
  }
};

// src/inputFieldArguments/AlignRightInputFieldArgument.ts
var AlignRightInputFieldArgument = class extends AbstractInputFieldArgument {
  constructor() {
    super(...arguments);
    this.identifier = "alignRight" /* ALIGN_RIGHT */;
    this.allowedInputFields = ["date_picker" /* DATE_PICKER */];
    this.value = true;
    this.requiresValue = false;
    this.allowMultiple = false;
  }
  parseValue(valueStr) {
    this.value = valueStr.toLowerCase() === "true";
  }
};

// src/inputFieldArguments/InputFieldArgumentFactory.ts
var InputFieldArgumentFactory = class {
  static createInputFieldArgument(argumentIdentifier) {
    if (argumentIdentifier === "class" /* CLASS */) {
      return new ClassInputFieldArgument();
    } else if (argumentIdentifier === "addLabels" /* ADD_LABELS */) {
      return new AddLabelsInputFieldArgument();
    } else if (argumentIdentifier === "minValue" /* MIN_VALUE */) {
      return new MinValueInputFieldArgument();
    } else if (argumentIdentifier === "maxValue" /* MAX_VALUE */) {
      return new MaxValueInputFieldArgument();
    } else if (argumentIdentifier === "option" /* OPTION */) {
      return new OptionInputFieldArgument();
    } else if (argumentIdentifier === "title" /* TITLE */) {
      return new TitleInputFieldArgument();
    } else if (argumentIdentifier === "alignRight" /* ALIGN_RIGHT */) {
      return new AlignRightInputFieldArgument();
    } else {
      throw new MetaBindParsingError(`unknown argument '${argumentIdentifier}'`);
    }
  }
};

// src/inputFieldArguments/InputFieldArgumentContainer.ts
var InputFieldArgumentContainer = class {
  constructor() {
    this.arguments = [];
  }
  add(argument) {
    this.arguments.push(argument);
  }
  validate() {
    let map = {};
    for (const inputFieldArgumentType of Object.values(InputFieldArgumentType)) {
      map[inputFieldArgumentType] = 0;
    }
    for (const argument of this.arguments) {
      map[argument.identifier] += 1;
      if (map[argument.identifier] > 1 && !argument.allowMultiple) {
        throw new MetaBindParsingError(`argument '${argument.identifier}' does not allow duplicates`);
      }
    }
  }
  mergeByOverride(other) {
    for (const argument of other.arguments) {
      if (!argument.allowMultiple) {
        this.arguments = this.arguments.filter((x) => x.identifier !== argument.identifier);
      }
      this.arguments.push(argument);
    }
    this.validate();
    return this;
  }
  mergeByThrow(other) {
    for (const argument of other.arguments) {
      if (!argument.allowMultiple) {
        if (this.arguments.filter((x) => x.identifier === argument.identifier).length > 0) {
          throw new MetaBindParsingError("can not merge InputFieldArgumentContainers, since arguments overlap");
        }
      }
      this.arguments.push(argument);
    }
    this.validate();
    return this;
  }
};

// src/parsers/InputFieldDeclarationParser.ts
var InputFieldType3 = /* @__PURE__ */ ((InputFieldType4) => {
  InputFieldType4["TOGGLE"] = "toggle";
  InputFieldType4["SLIDER"] = "slider";
  InputFieldType4["TEXT"] = "text";
  InputFieldType4["TEXT_AREA"] = "text_area";
  InputFieldType4["SELECT"] = "select";
  InputFieldType4["MULTI_SELECT"] = "multi_select";
  InputFieldType4["DATE"] = "date";
  InputFieldType4["TIME"] = "time";
  InputFieldType4["DATE_PICKER"] = "date_picker";
  InputFieldType4["INVALID"] = "invalid";
  return InputFieldType4;
})(InputFieldType3 || {});
var InputFieldArgumentType = /* @__PURE__ */ ((InputFieldArgumentType2) => {
  InputFieldArgumentType2["CLASS"] = "class";
  InputFieldArgumentType2["ADD_LABELS"] = "addLabels";
  InputFieldArgumentType2["MIN_VALUE"] = "minValue";
  InputFieldArgumentType2["MAX_VALUE"] = "maxValue";
  InputFieldArgumentType2["OPTION"] = "option";
  InputFieldArgumentType2["TITLE"] = "title";
  InputFieldArgumentType2["ALIGN_RIGHT"] = "alignRight";
  InputFieldArgumentType2["INVALID"] = "invalid";
  return InputFieldArgumentType2;
})(InputFieldArgumentType || {});
var _InputFieldDeclarationParser = class {
  static parse(fullDeclaration) {
    var _a, _b;
    let inputFieldDeclaration = {};
    let useTemplate = false;
    let templateName = "";
    inputFieldDeclaration.fullDeclaration = fullDeclaration;
    const temp = ParserUtils.getInBetween(fullDeclaration, _InputFieldDeclarationParser.squareBracesPair);
    if (Array.isArray(temp)) {
      if (temp.length === 2) {
        useTemplate = true;
        templateName = temp[0];
        inputFieldDeclaration.declaration = temp[1];
      } else {
        throw new MetaBindParsingError("invalid input field declaration");
      }
    } else {
      inputFieldDeclaration.declaration = temp;
    }
    const declarationParts = ParserUtils.split(inputFieldDeclaration.declaration, ":", _InputFieldDeclarationParser.squareBracesPair);
    inputFieldDeclaration.bindTarget = (_a = declarationParts[1]) != null ? _a : "";
    inputFieldDeclaration.isBound = isTruthy(inputFieldDeclaration.bindTarget);
    const inputFieldTypeWithArguments = declarationParts[0];
    if (inputFieldTypeWithArguments) {
      const inputFieldTypeString = ParserUtils.removeInBetween(inputFieldTypeWithArguments, _InputFieldDeclarationParser.roundBracesPair);
      inputFieldDeclaration.inputFieldType = _InputFieldDeclarationParser.getInputFieldType(inputFieldTypeString);
      const inputFieldArgumentsString = ParserUtils.getInBetween(inputFieldTypeWithArguments, _InputFieldDeclarationParser.roundBracesPair);
      if (inputFieldArgumentsString) {
        inputFieldDeclaration.argumentContainer = _InputFieldDeclarationParser.parseArguments(inputFieldArgumentsString, inputFieldDeclaration.inputFieldType);
      } else {
        inputFieldDeclaration.argumentContainer = new InputFieldArgumentContainer();
      }
    } else {
      inputFieldDeclaration.inputFieldType = "invalid" /* INVALID */;
      inputFieldDeclaration.argumentContainer = new InputFieldArgumentContainer();
    }
    if (useTemplate) {
      const template = (_b = _InputFieldDeclarationParser.templates.filter((x) => x.identifier === templateName).first()) == null ? void 0 : _b.template;
      if (template) {
        inputFieldDeclaration.bindTarget = inputFieldDeclaration.bindTarget || template.bindTarget;
        inputFieldDeclaration.isBound = inputFieldDeclaration.isBound || template.isBound;
        inputFieldDeclaration.inputFieldType = inputFieldDeclaration.inputFieldType === "invalid" /* INVALID */ ? template.inputFieldType : inputFieldDeclaration.inputFieldType || template.inputFieldType;
        inputFieldDeclaration.argumentContainer = template.argumentContainer.mergeByOverride(inputFieldDeclaration.argumentContainer);
      } else {
        throw new MetaBindParsingError(`unknown template name '${templateName}'`);
      }
    }
    if (inputFieldDeclaration.inputFieldType === "invalid" /* INVALID */) {
      throw new MetaBindParsingError(`unknown input field type`);
    }
    return inputFieldDeclaration;
  }
  static parseTemplates(templates) {
    let templateDeclarations = templates ? ParserUtils.split(templates, "\n", _InputFieldDeclarationParser.squareBracesPair) : [];
    templateDeclarations = templateDeclarations.map((x) => x.trim()).filter((x) => x.length > 0);
    for (const templateDeclaration of templateDeclarations) {
      let templateDeclarationParts = ParserUtils.split(templateDeclaration, "->", _InputFieldDeclarationParser.squareBracesPair);
      templateDeclarationParts = templateDeclarationParts.map((x) => x.trim());
      if (templateDeclarationParts.length === 1) {
        throw new MetaBindParsingError("Invalid template syntax");
      } else if (templateDeclarationParts.length === 2) {
        _InputFieldDeclarationParser.templates.push({
          identifier: templateDeclarationParts[0],
          template: _InputFieldDeclarationParser.parse(templateDeclarationParts[1])
        });
      }
    }
    console.log(_InputFieldDeclarationParser.templates);
  }
  static parseArguments(inputFieldArgumentsString, inputFieldType) {
    let inputFieldArgumentStrings = ParserUtils.split(inputFieldArgumentsString, ",", _InputFieldDeclarationParser.roundBracesPair);
    inputFieldArgumentStrings = inputFieldArgumentStrings.map((x) => x.trim());
    const inputFieldArgumentContainer = new InputFieldArgumentContainer();
    for (const inputFieldArgumentString of inputFieldArgumentStrings) {
      const inputFieldArgumentIdentifier = _InputFieldDeclarationParser.extractInputFieldArgumentIdentifier(inputFieldArgumentString);
      const inputFieldArgument = InputFieldArgumentFactory.createInputFieldArgument(inputFieldArgumentIdentifier);
      if (!inputFieldArgument.isAllowed(inputFieldType)) {
        throw new MetaBindParsingError(`argument '${inputFieldArgumentIdentifier}' is only applicable to ${inputFieldArgument.getAllowedInputFieldsAsString()} input fields`);
      }
      if (inputFieldArgument.requiresValue) {
        inputFieldArgument.parseValue(_InputFieldDeclarationParser.extractInputFieldArgumentValue(inputFieldArgumentString));
      }
      inputFieldArgumentContainer.add(inputFieldArgument);
    }
    inputFieldArgumentContainer.validate();
    return inputFieldArgumentContainer;
  }
  static extractInputFieldArgumentIdentifier(argumentString) {
    return ParserUtils.removeInBetween(argumentString, _InputFieldDeclarationParser.roundBracesPair);
  }
  static extractInputFieldArgumentValue(argumentString) {
    const argumentName = this.extractInputFieldArgumentIdentifier(argumentString);
    const argumentValue = ParserUtils.getInBetween(argumentString, _InputFieldDeclarationParser.roundBracesPair);
    if (!argumentValue) {
      throw new MetaBindParsingError(`argument '${argumentName}' requires a non empty value`);
    }
    return argumentValue;
  }
  static getInputFieldType(str) {
    for (const entry of Object.entries(InputFieldType3)) {
      if (entry[1] === str) {
        return entry[1];
      }
    }
    return "invalid" /* INVALID */;
  }
};
var InputFieldDeclarationParser = _InputFieldDeclarationParser;
InputFieldDeclarationParser.roundBracesPair = new EnclosingPair("(", ")");
InputFieldDeclarationParser.squareBracesPair = new EnclosingPair("[", "]");
InputFieldDeclarationParser.curlyBracesPair = new EnclosingPair("{", "}");
InputFieldDeclarationParser.allBracesPairs = [
  _InputFieldDeclarationParser.roundBracesPair,
  _InputFieldDeclarationParser.squareBracesPair,
  _InputFieldDeclarationParser.curlyBracesPair
];
InputFieldDeclarationParser.templates = [];

// src/inputFields/SliderInputField.ts
var SliderInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    var _a, _b, _c, _d;
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.minValue = (_b = (_a = inputFieldMarkdownRenderChild.getArgument("minValue" /* MIN_VALUE */)) == null ? void 0 : _a.value) != null ? _b : 0;
    this.maxValue = (_d = (_c = inputFieldMarkdownRenderChild.getArgument("maxValue" /* MAX_VALUE */)) == null ? void 0 : _c.value) != null ? _d : 100;
  }
  getValue() {
    if (!this.sliderComponent) {
      throw new MetaBindInternalError("slider input component is undefined");
    }
    return this.sliderComponent.getValue();
  }
  setValue(value) {
    if (!this.sliderComponent) {
      throw new MetaBindInternalError("slider input component is undefined");
    }
    if (value != null && typeof value == "number") {
      if (value >= this.minValue && value <= this.maxValue) {
        this.sliderComponent.setValue(value);
      }
    } else {
      Logger.logWarning(`can not set value of slider to '${value}'`);
      this.sliderComponent.setValue(this.getDefaultValue());
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return this.minValue;
  }
  getHtmlElement() {
    if (!this.sliderComponent) {
      throw new MetaBindInternalError("slider input component is undefined");
    }
    return this.sliderComponent.sliderEl;
  }
  render(container) {
    container.removeClass("meta-bind-plugin-input-wrapper");
    container.addClass("meta-bind-plugin-flex-input-wrapper");
    const labelArgument = this.inputFieldMarkdownRenderChild.getArgument("addLabels" /* ADD_LABELS */);
    if (labelArgument && labelArgument.value === true) {
      container.createSpan({ text: this.minValue.toString(), cls: "meta-bind-plugin-slider-input-label" });
    }
    const component = new import_obsidian4.SliderComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    component.setDynamicTooltip();
    component.setLimits(this.minValue, this.maxValue, 1);
    component.sliderEl.addClass("meta-bind-plugin-slider-input");
    if (labelArgument && labelArgument.value === true) {
      container.createSpan({ text: this.maxValue.toString(), cls: "meta-bind-plugin-slider-input-label" });
    }
    this.sliderComponent = component;
  }
};

// src/inputFields/TextAreaInputField.ts
var import_obsidian5 = require("obsidian");
var TextAreaInputField = class extends AbstractInputField {
  getValue() {
    if (!this.textAreaComponent) {
      throw new MetaBindInternalError("text area input component is undefined");
    }
    return this.textAreaComponent.getValue();
  }
  setValue(value) {
    if (!this.textAreaComponent) {
      throw new MetaBindInternalError("text area input component is undefined");
    }
    if (value != null && typeof value == "string") {
      this.textAreaComponent.setValue(value);
    } else {
      Logger.logWarning(`can not set value of text area input to '${value}'`);
      this.textAreaComponent.setValue("");
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return "";
  }
  getHtmlElement() {
    if (!this.textAreaComponent) {
      throw new MetaBindInternalError("text area input component is undefined");
    }
    return this.textAreaComponent.inputEl;
  }
  render(container) {
    const component = new import_obsidian5.TextAreaComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    this.textAreaComponent = component;
  }
};

// src/inputFields/SelectInputFieldElement.ts
var SelectInputFieldElement = class {
  constructor(value, parentElement, id, multiSelectInputField, active = false) {
    this.value = value;
    this.id = id;
    this.active = active;
    this.highlighted = false;
    this.selectInputField = multiSelectInputField;
    this.cssClass = "meta-bind-plugin-select-input-element";
    this.activeClass = "meta-bind-plugin-select-input-element-selected";
    this.hoverClass = "meta-bind-plugin-select-input-element-hover";
    this.element = parentElement.createDiv({ cls: this.cssClass });
    this.element.id = this.getHTMLId();
    this.element.on("click", "#" + this.getHTMLId(), () => {
      this.setActive(!this.active);
      if (!this.selectInputField.allowMultiSelect) {
        this.selectInputField.disableAllOtherElements(this.id);
      }
    });
    this.element.on("mouseenter", "#" + this.getHTMLId(), () => {
      this.setHighlighted(true);
    });
    this.element.on("mouseleave", "#" + this.getHTMLId(), () => {
      this.setHighlighted(false);
    });
  }
  getHTMLId() {
    return `meta-bind-select-input-element-${this.selectInputField.inputFieldMarkdownRenderChild.uid}-${this.id}`;
  }
  isHighlighted() {
    return this.highlighted;
  }
  setHighlighted(value) {
    this.highlighted = value;
    if (this.highlighted) {
      this.addClass(this.hoverClass);
      this.selectInputField.deHighlightAllOtherElements(this.id);
    } else {
      this.removeClass(this.hoverClass);
    }
  }
  isActive() {
    return this.active;
  }
  setActive(active, updateParent = true) {
    this.active = active;
    this.update(updateParent);
  }
  update(updateParent) {
    if (this.active) {
      this.addClass(this.activeClass);
    } else {
      this.removeClass(this.activeClass);
    }
    if (updateParent) {
      this.selectInputField.onChange();
    }
  }
  addClass(cssClass) {
    if (!this.element.hasClass(cssClass)) {
      this.element.addClass(cssClass);
    }
  }
  removeClass(cssClass) {
    if (this.element.hasClass(cssClass)) {
      this.element.removeClass(cssClass);
    }
  }
  render() {
    this.element.createEl("div", { text: this.value });
  }
};

// src/inputFields/SelectInputField.ts
var SelectInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.elements = [];
    this.allowMultiSelect = false;
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("select input container is undefined");
    }
    return this.container;
  }
  getValue() {
    var _a, _b;
    return (_b = (_a = this.elements.filter((x) => x.isActive()).first()) == null ? void 0 : _a.value) != null ? _b : "";
  }
  setValue(value) {
    for (const element2 of this.elements) {
      if (value === element2.value) {
        element2.setActive(true, false);
      } else {
        element2.setActive(false, false);
      }
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return "";
  }
  onChange() {
    this.onValueChange(this.getValue());
  }
  render(container) {
    container.addClass("meta-bind-plugin-select-input-bg");
    this.container = container;
    const elementWrapper = container.createDiv({ cls: "meta-bind-plugin-select-input-wrapper" });
    const titleArgument = this.inputFieldMarkdownRenderChild.getArgument("title" /* TITLE */);
    if (titleArgument) {
      elementWrapper.createEl("div", { text: titleArgument.value, cls: "meta-bind-plugin-select-input-header" });
    }
    const elementArguments = this.inputFieldMarkdownRenderChild.getArguments("option" /* OPTION */);
    let i = 0;
    for (const elementArgument of elementArguments) {
      const selectInputFieldElement = new SelectInputFieldElement(elementArgument.value, elementWrapper, i, this, false);
      this.elements.push(selectInputFieldElement);
      selectInputFieldElement.render();
      i += 1;
    }
    this.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
  }
  disableAllOtherElements(elementId) {
    for (const selectModalElement of this.elements) {
      if (selectModalElement.id !== elementId) {
        selectModalElement.setActive(false);
      }
    }
  }
  deHighlightAllOtherElements(elementId) {
    for (const selectModalElement of this.elements) {
      if (selectModalElement.id !== elementId) {
        selectModalElement.setHighlighted(false);
      }
    }
  }
  activateHighlighted() {
    for (const selectModalElement of this.elements) {
      if (selectModalElement.isHighlighted()) {
        selectModalElement.setActive(!selectModalElement.isActive());
        if (!this.allowMultiSelect) {
          this.disableAllOtherElements(selectModalElement.id);
        }
      }
    }
  }
  highlightUp() {
    var _a, _b;
    for (const selectModalElement of this.elements) {
      if (selectModalElement.isHighlighted()) {
        (_a = this.getPreviousSelectModalElement(selectModalElement)) == null ? void 0 : _a.setHighlighted(true);
        return;
      }
    }
    (_b = this.elements.at(-1)) == null ? void 0 : _b.setHighlighted(true);
  }
  highlightDown() {
    var _a, _b;
    for (const selectModalElement of this.elements) {
      if (selectModalElement.isHighlighted()) {
        (_a = this.getNextSelectModalElement(selectModalElement)) == null ? void 0 : _a.setHighlighted(true);
        return;
      }
    }
    (_b = this.elements.at(0)) == null ? void 0 : _b.setHighlighted(true);
  }
  getNextSelectModalElement(element2) {
    let nextId = element2.id + 1;
    nextId = mod(nextId, this.elements.length);
    return this.elements.filter((x) => x.id === nextId).at(0);
  }
  getPreviousSelectModalElement(element2) {
    let nextId = element2.id - 1;
    nextId = mod(nextId, this.elements.length);
    return this.elements.filter((x) => x.id === nextId).at(0);
  }
};
SelectInputField.allowInlineCodeBlock = false;

// src/inputFields/MultiSelectInputField.ts
var MultiSelectInputField = class extends SelectInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.allowMultiSelect = true;
  }
  getValue() {
    return this.elements.filter((x) => x.isActive()).map((x) => x.value);
  }
  setValue(value) {
    if (value.length === 0) {
      for (const element2 of this.elements) {
        element2.setActive(false, false);
      }
      return;
    }
    elementLoop:
      for (const element2 of this.elements) {
        for (const valueElement of value) {
          if (valueElement === element2.value) {
            element2.setActive(true, false);
            continue elementLoop;
          }
        }
        element2.setActive(false, false);
      }
  }
  isEqualValue(value) {
    if (!Array.isArray(value)) {
      return false;
    }
    return arrayEquals(this.getValue(), value);
  }
  getDefaultValue() {
    return [];
  }
};

// src/inputFields/DateInputField.ts
var import_obsidian7 = require("obsidian");

// src/parsers/DateParser.ts
var import_obsidian6 = require("obsidian");
var DateParser = class {
  static stringify(date) {
    return date.format(this.dateFormat);
  }
  static parse(dateString) {
    return (0, import_obsidian6.moment)(dateString, DateParser.dateFormat);
  }
  static getDefaultDate() {
    return (0, import_obsidian6.moment)(new Date(DateParser.getDefaultYear(), DateParser.getDefaultMonth(), DateParser.getDefaultDay()));
  }
  static getDefaultDay() {
    return 1;
  }
  static getDefaultMonth() {
    return 1;
  }
  static getDefaultYear() {
    return 2022;
  }
};

// src/inputFields/DateInputField.ts
var DateInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.months = {
      "0": "January",
      "1": "February",
      "2": "March",
      "3": "April",
      "4": "May",
      "5": "June",
      "6": "July",
      "7": "August",
      "8": "September",
      "9": "October",
      "10": "November",
      "11": "December"
    };
    this.date = DateParser.getDefaultDate();
    this.days = {};
    for (let i = 1; i <= 31; i++) {
      this.days[i.toString()] = i.toString();
    }
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("toggle input container is undefined");
    }
    return this.container;
  }
  getValue() {
    return DateParser.stringify(this.date);
  }
  setValue(value) {
    var _a;
    if (!this.monthComponent) {
      throw new MetaBindInternalError("date input month component is undefined");
    }
    if (!this.dayComponent) {
      throw new MetaBindInternalError("date input day component is undefined");
    }
    if (!this.yearComponent) {
      throw new MetaBindInternalError("date input hour component is undefined");
    }
    this.date = (_a = DateParser.parse(value)) != null ? _a : DateParser.getDefaultDate();
    if (!this.date.isValid()) {
      this.date = DateParser.getDefaultDate();
      this.onValueChange(this.getValue());
    }
    this.monthComponent.setValue(this.date.month().toString());
    this.dayComponent.setValue(this.date.date().toString());
    this.yearComponent.setValue(this.date.year().toString());
  }
  isEqualValue(value) {
    return value == this.getValue();
  }
  getDefaultValue() {
    return DateParser.stringify(DateParser.getDefaultDate());
  }
  render(container) {
    var _a;
    this.date = (_a = DateParser.parse(this.inputFieldMarkdownRenderChild.getInitialValue())) != null ? _a : DateParser.getDefaultDate();
    if (!this.date.isValid()) {
      this.date = DateParser.getDefaultDate();
      this.onValueChange(this.getValue());
    }
    let useUsInputOrder = this.inputFieldMarkdownRenderChild.plugin.settings.useUsDateInputOrder;
    container.removeClass("meta-bind-plugin-input-wrapper");
    container.addClass("meta-bind-plugin-flex-input-wrapper", "meta-bind-plugin-input-element-group");
    if (!useUsInputOrder) {
      this.dayComponent = new import_obsidian7.DropdownComponent(container);
      this.dayComponent.addOptions(this.days);
      this.dayComponent.setValue(this.date.date().toString());
      this.dayComponent.onChange(this.onDayChange.bind(this));
      this.monthComponent = new import_obsidian7.DropdownComponent(container);
      this.monthComponent.addOptions(this.months);
      this.monthComponent.setValue(this.date.month().toString());
      this.monthComponent.onChange(this.onMonthChange.bind(this));
      this.dayComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
      this.monthComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    } else {
      this.monthComponent = new import_obsidian7.DropdownComponent(container);
      this.monthComponent.addOptions(this.months);
      this.monthComponent.setValue(this.date.month().toString());
      this.monthComponent.onChange(this.onMonthChange.bind(this));
      this.dayComponent = new import_obsidian7.DropdownComponent(container);
      this.dayComponent.addOptions(this.days);
      this.dayComponent.setValue(this.date.date().toString());
      this.dayComponent.onChange(this.onDayChange.bind(this));
      this.dayComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
      this.monthComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    }
    this.yearComponent = new import_obsidian7.TextComponent(container);
    this.yearComponent.setValue(this.date.year().toString());
    this.yearComponent.onChange(this.onYearChange.bind(this));
    this.yearComponent.inputEl.addClass("meta-bind-plugin-date-input-year-input");
    this.yearComponent.inputEl.addClass("meta-bind-plugin-input-element-group-element");
    this.yearComponent.inputEl.type = "number";
    this.yearComponent.inputEl.max = "9999";
    this.container = container;
  }
  onMonthChange(value) {
    var _a;
    this.date.month(value);
    const clampedDay = this.clampDay(this.date.date());
    (_a = this.dayComponent) == null ? void 0 : _a.setValue(clampedDay.toString());
    this.date.date(clampedDay);
    this.onValueChange(this.getValue());
  }
  onDayChange(value) {
    var _a;
    const day = Number.parseInt(value);
    const clampedDay = this.clampDay(day);
    if (clampedDay !== day) {
      (_a = this.dayComponent) == null ? void 0 : _a.setValue(clampedDay.toString());
    }
    this.date.date(clampedDay);
    this.onValueChange(this.getValue());
  }
  onYearChange(value) {
    const year = Number.parseInt(value);
    this.date.year(Number.isNaN(year) ? DateParser.getDefaultYear() : year);
    this.onValueChange(this.getValue());
  }
  clampDay(day) {
    if (Number.isNaN(day)) {
      return DateParser.getDefaultDay();
    } else if (day < 1) {
      return 1;
    } else if (day > this.date.daysInMonth()) {
      return this.date.daysInMonth();
    }
    return day;
  }
};

// src/inputFields/TimeInputField.ts
var import_obsidian8 = require("obsidian");

// src/parsers/TimeParser.ts
var Time = class {
  constructor() {
    this._hour = TimeParser.getDefaultHour();
    this._minute = TimeParser.getDefaultHour();
  }
  getHour() {
    return this._hour;
  }
  setHour(value) {
    if (value < 0 || value > 24) {
      this._hour = TimeParser.getDefaultHour();
      return;
    }
    this._hour = value;
  }
  getMinute() {
    return this._minute;
  }
  setMinute(value) {
    if (value < 0 || value > 59) {
      this._minute = TimeParser.getDefaultMinute();
      return;
    }
    this._minute = value;
  }
  getUniformHour() {
    return ("00" + this.getHour().toString()).slice(-2);
  }
  getUniformMinute() {
    return ("00" + this.getMinute().toString()).slice(-2);
  }
  setHourFromString(str) {
    const v = Number.parseInt(str);
    this.setHour(Number.isNaN(v) ? TimeParser.getDefaultHour() : v);
  }
  setMinuteFromString(str) {
    const v = Number.parseInt(str);
    this.setMinute(Number.isNaN(v) ? TimeParser.getDefaultMinute() : v);
  }
};
var TimeParser = class {
  static parse(timeString) {
    const time = TimeParser.getDefaultTime();
    const timeParts = timeString.split(":");
    if (timeParts.length !== 2) {
      return void 0;
    }
    time.setHourFromString(timeParts[0]);
    time.setMinuteFromString(timeParts[1]);
    return time;
  }
  static stringify(time) {
    return `${time.getUniformHour()}:${time.getUniformMinute()}`;
  }
  static getDefaultTime() {
    return new Time();
  }
  static getDefaultHour() {
    return 0;
  }
  static getDefaultMinute() {
    return 0;
  }
};

// src/inputFields/TimeInputField.ts
var TimeInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.time = TimeParser.getDefaultTime();
    this.hours = {};
    for (let i = 0; i <= 24; i++) {
      this.hours[i.toString()] = i.toString();
    }
    this.minutes = {};
    for (let i = 0; i <= 59; i++) {
      this.minutes[i.toString()] = i.toString();
    }
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("time input container is undefined");
    }
    return this.container;
  }
  getValue() {
    return TimeParser.stringify(this.time);
  }
  setValue(value) {
    var _a;
    if (!this.hourComponent) {
      throw new MetaBindInternalError("time input hour component is undefined");
    }
    if (!this.minuteComponent) {
      throw new MetaBindInternalError("time input minute component is undefined");
    }
    this.time = (_a = TimeParser.parse(value)) != null ? _a : TimeParser.getDefaultTime();
    this.hourComponent.setValue(this.time.getHour().toString());
    this.minuteComponent.setValue(this.time.getMinute().toString());
  }
  isEqualValue(value) {
    return value == this.getValue();
  }
  getDefaultValue() {
    return TimeParser.stringify(TimeParser.getDefaultTime());
  }
  render(container) {
    var _a;
    this.time = (_a = TimeParser.parse(this.inputFieldMarkdownRenderChild.getInitialValue())) != null ? _a : TimeParser.getDefaultTime();
    container.removeClass("meta-bind-plugin-input-wrapper");
    container.addClass("meta-bind-plugin-flex-input-wrapper", "meta-bind-plugin-input-element-group");
    this.hourComponent = new import_obsidian8.DropdownComponent(container);
    this.hourComponent.addOptions(this.hours);
    this.hourComponent.setValue(this.time.getHour().toString());
    this.hourComponent.onChange(this.onHourChange.bind(this));
    this.minuteComponent = new import_obsidian8.DropdownComponent(container);
    this.minuteComponent.addOptions(this.minutes);
    this.minuteComponent.setValue(this.time.getMinute().toString());
    this.minuteComponent.onChange(this.onMinuteChange.bind(this));
    this.hourComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    this.minuteComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    this.container = container;
  }
  onHourChange(value) {
    this.time.setHourFromString(value);
    this.onValueChange(this.getValue());
  }
  onMinuteChange(value) {
    this.time.setMinuteFromString(value);
    this.onValueChange(this.getValue());
  }
};

// node_modules/svelte/internal/index.mjs
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, cancelable, detail);
  return e;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail, { cancelable });
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance4, create_fragment4, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance4 ? instance4(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment4 ? create_fragment4($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/inputFields/DatePicker/DatePickerInputSvelteHelpers.ts
var import_obsidian9 = require("obsidian");
var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
function getMonthName(index) {
  return monthNames[index];
}
function getDateRows(monthIndex, year) {
  const days = (0, import_obsidian9.moment)(new Date(year, monthIndex)).daysInMonth();
  let rows = new Array(42).fill(void 0);
  const startIndex = getWeekDay(new Date(year, monthIndex, 1));
  for (let i = 0; i < days; i++) {
    rows[i + startIndex] = i + 1;
  }
  rows = rows[rows.length - 7] ? rows : rows.slice(0, -7);
  rows = rows[rows.length - 7] ? rows : rows.slice(0, -7);
  return rows;
}
function getWeekDay(date) {
  return date.getDay() === 0 ? 6 : date.getDay() - 1;
}
function getWeekDays() {
  return ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"];
}
function uuid() {
  let id = 0;
  return () => {
    return ++id;
  };
}

// src/inputFields/DatePicker/Calender.svelte
var import_obsidian10 = require("obsidian");
function add_css(target) {
  append_styles(target, "svelte-sdiiqi", ".calendar.svelte-sdiiqi{margin-top:10px}.calendar-header.svelte-sdiiqi{display:flex;justify-content:space-around;flex-wrap:wrap;gap:2px;background:var(--background-primary);border-radius:var(--meta-bind-plugin-border-radius);margin-bottom:2px}.calendar-content.svelte-sdiiqi{display:grid;flex-wrap:wrap;grid-template-columns:repeat(7, 1fr);gap:2px}.cell.svelte-sdiiqi{min-width:40px;height:30px;padding:5px;display:flex;justify-content:center;align-items:center;border-radius:var(--meta-bind-plugin-border-radius)}.content-cell.svelte-sdiiqi{cursor:pointer}.cell-text.svelte-sdiiqi{margin:auto;text-align:center}.selected.svelte-sdiiqi{background:var(--background-modifier-success)}.highlight.svelte-sdiiqi:hover{background:var(--interactive-hover)}.selected.highlight.svelte-sdiiqi:hover{background:green}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_each_block_1(ctx) {
  let div;
  let span;
  let t0_value = ctx[10] + "";
  let t0;
  let t1;
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      attr(span, "class", "cell-text svelte-sdiiqi");
      attr(div, "class", "cell header-cell svelte-sdiiqi");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(span, t0);
      append(div, t1);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block(key_1, ctx) {
  let div;
  let span;
  let t0_value = (ctx[7] || "") + "";
  let t0;
  let t1;
  let mounted;
  let dispose;
  function click_handler() {
    return ctx[5](ctx[7]);
  }
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      attr(span, "class", "cell-text svelte-sdiiqi");
      attr(div, "class", "cell svelte-sdiiqi");
      toggle_class(div, "highlight", ctx[7]);
      toggle_class(div, "content-cell", ctx[7]);
      toggle_class(div, "selected", ctx[0].year() === ctx[2] && ctx[0].month() === ctx[1] && ctx[0].date() === ctx[7]);
      this.first = div;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(span, t0);
      append(div, t1);
      if (!mounted) {
        dispose = listen(div, "click", function() {
          if (is_function(ctx[7] ? click_handler : click_handler_1))
            (ctx[7] ? click_handler : click_handler_1).apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 8 && t0_value !== (t0_value = (ctx[7] || "") + ""))
        set_data(t0, t0_value);
      if (dirty & 8) {
        toggle_class(div, "highlight", ctx[7]);
      }
      if (dirty & 8) {
        toggle_class(div, "content-cell", ctx[7]);
      }
      if (dirty & 15) {
        toggle_class(div, "selected", ctx[0].year() === ctx[2] && ctx[0].month() === ctx[1] && ctx[0].date() === ctx[7]);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment(ctx) {
  let div2;
  let div0;
  let t;
  let div1;
  let each_blocks = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let each_value_1 = getWeekDays();
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  let each_value = ctx[3];
  const get_key = (ctx2) => uuid();
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "calendar-header svelte-sdiiqi");
      attr(div1, "class", "calendar-content svelte-sdiiqi");
      attr(div2, "class", "calendar svelte-sdiiqi");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(div0, null);
      }
      append(div2, t);
      append(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div1, null);
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 0) {
        each_value_1 = getWeekDays();
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            each_blocks_1[i].m(div0, null);
          }
        }
        for (; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].d(1);
        }
        each_blocks_1.length = each_value_1.length;
      }
      if (dirty & 31) {
        each_value = ctx2[3];
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each1_lookup, div1, destroy_block, create_each_block, null, get_each_context);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_each(each_blocks_1, detaching);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
var click_handler_1 = () => {
};
function instance($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { selectedDate } = $$props;
  let { month } = $$props;
  let { year } = $$props;
  let cells;
  function onChange(date) {
    dispatch("dateChange", (0, import_obsidian10.moment)(new Date(year, month, date)));
  }
  const click_handler = (value) => onChange(value);
  $$self.$$set = ($$props2) => {
    if ("selectedDate" in $$props2)
      $$invalidate(0, selectedDate = $$props2.selectedDate);
    if ("month" in $$props2)
      $$invalidate(1, month = $$props2.month);
    if ("year" in $$props2)
      $$invalidate(2, year = $$props2.year);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 6) {
      $:
        $$invalidate(3, cells = getDateRows(month, year));
    }
  };
  return [selectedDate, month, year, cells, onChange, click_handler];
}
var Calender = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { selectedDate: 0, month: 1, year: 2 }, add_css);
  }
};
var Calender_default = Calender;

// src/inputFields/DatePicker/DatePicker.svelte
var import_obsidian12 = require("obsidian");

// src/inputFields/DatePicker/Icon.svelte
var import_obsidian11 = require("obsidian");
function add_css2(target) {
  append_styles(target, "svelte-9cikvm", ".icon-wrapper.svelte-9cikvm{display:inline-block;position:relative;width:20px}.icon.svelte-9cikvm{position:absolute;height:20px;width:20px;bottom:-5px}");
}
function create_if_block(ctx) {
  let div1;
  let div0;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      attr(div0, "class", "icon svelte-9cikvm");
      attr(div1, "class", "icon-wrapper svelte-9cikvm");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      ctx[3](div0);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      ctx[3](null);
    }
  };
}
function create_fragment2(ctx) {
  let if_block_anchor;
  let if_block = ctx[0].length > 0 && create_if_block(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (ctx2[0].length > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { iconName = "" } = $$props;
  let { iconSize = 20 } = $$props;
  let iconEl;
  onMount(() => {
    (0, import_obsidian11.setIcon)(iconEl, iconName, iconSize);
  });
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      iconEl = $$value;
      $$invalidate(1, iconEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("iconName" in $$props2)
      $$invalidate(0, iconName = $$props2.iconName);
    if ("iconSize" in $$props2)
      $$invalidate(2, iconSize = $$props2.iconSize);
  };
  return [iconName, iconEl, iconSize, div0_binding];
}
var Icon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, { iconName: 0, iconSize: 2 }, add_css2);
  }
};
var Icon_default = Icon;

// src/inputFields/DatePicker/DatePicker.svelte
function add_css3(target) {
  append_styles(target, "svelte-vzlvwz", ".date-picker-input.svelte-vzlvwz{position:relative;color:var(--text-normal);display:inline-block}.date-picker.svelte-vzlvwz{position:absolute;top:35px;display:inline-block;background:var(--background-secondary);border-radius:var(--meta-bind-plugin-border-radius);border:var(--meta-bind-plugin-border-width) solid var(--background-modifier-border);padding:10px;z-index:1000000}.date-picker-text.svelte-vzlvwz{background:var(--background-secondary);border-radius:var(--meta-bind-plugin-border-radius);border:var(--meta-bind-plugin-border-width) solid var(--background-modifier-border);padding:5px 5px 5px 7px;cursor:pointer;width:fit-content;display:inline-block}.date-picker-close-layer.svelte-vzlvwz{position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:900000}.date-picker-header.svelte-vzlvwz{display:flex;gap:5px;align-items:center;justify-content:space-around}.date-picker-header-text.svelte-vzlvwz{flex:1;text-align:center;display:flex;gap:5px;align-items:center;justify-content:center;width:min-content}.date-picker-header-text-year.svelte-vzlvwz{width:60px;padding:5px}.date-picker-header-text-month.svelte-vzlvwz{height:min-content}.month-switch-button.svelte-vzlvwz{margin:0}");
}
function create_if_block2(ctx) {
  let div0;
  let t0;
  let div3;
  let div2;
  let button0;
  let t2;
  let div1;
  let span;
  let t3_value = getMonthName(ctx[3]) + "";
  let t3;
  let t4;
  let input;
  let input_value_value;
  let t5;
  let button1;
  let t7;
  let calender;
  let div3_style_value;
  let current;
  let mounted;
  let dispose;
  calender = new Calender_default({
    props: {
      month: ctx[3],
      year: ctx[4],
      selectedDate: ctx[0]
    }
  });
  calender.$on("dateChange", ctx[9]);
  return {
    c() {
      div0 = element("div");
      t0 = space();
      div3 = element("div");
      div2 = element("div");
      button0 = element("button");
      button0.textContent = "Prev";
      t2 = space();
      div1 = element("div");
      span = element("span");
      t3 = text(t3_value);
      t4 = space();
      input = element("input");
      t5 = space();
      button1 = element("button");
      button1.textContent = "Next";
      t7 = space();
      create_component(calender.$$.fragment);
      attr(div0, "class", "date-picker-close-layer svelte-vzlvwz");
      attr(button0, "class", "month-switch-button svelte-vzlvwz");
      attr(span, "class", "date-picker-header-text-month svelte-vzlvwz");
      attr(input, "class", "date-picker-header-text-year svelte-vzlvwz");
      attr(input, "type", "number");
      input.value = input_value_value = ctx[4].toString();
      attr(div1, "class", "date-picker-header-text svelte-vzlvwz");
      attr(button1, "class", "month-switch-button svelte-vzlvwz");
      attr(div2, "class", "date-picker-header svelte-vzlvwz");
      attr(div3, "class", "date-picker svelte-vzlvwz");
      attr(div3, "style", div3_style_value = ctx[2] ? "left: auto; right: 0;" : "right: auto; left: 0;");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      insert(target, t0, anchor);
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, button0);
      append(div2, t2);
      append(div2, div1);
      append(div1, span);
      append(span, t3);
      append(div1, t4);
      append(div1, input);
      append(div2, t5);
      append(div2, button1);
      append(div3, t7);
      mount_component(calender, div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div0, "click", ctx[12]),
          listen(button0, "click", ctx[7]),
          listen(input, "input", ctx[8]),
          listen(button1, "click", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if ((!current || dirty & 8) && t3_value !== (t3_value = getMonthName(ctx2[3]) + ""))
        set_data(t3, t3_value);
      if (!current || dirty & 16 && input_value_value !== (input_value_value = ctx2[4].toString()) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      const calender_changes = {};
      if (dirty & 8)
        calender_changes.month = ctx2[3];
      if (dirty & 16)
        calender_changes.year = ctx2[4];
      if (dirty & 1)
        calender_changes.selectedDate = ctx2[0];
      calender.$set(calender_changes);
      if (!current || dirty & 4 && div3_style_value !== (div3_style_value = ctx2[2] ? "left: auto; right: 0;" : "right: auto; left: 0;")) {
        attr(div3, "style", div3_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(calender.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(calender.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div0);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div3);
      destroy_component(calender);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment3(ctx) {
  let div1;
  let div0;
  let t0_value = ctx[0].format(ctx[1]) + "";
  let t0;
  let t1;
  let icon;
  let t2;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({ props: { iconName: "calendar" } });
  let if_block = ctx[5] && create_if_block2(ctx);
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      create_component(icon.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      attr(div0, "class", "date-picker-text svelte-vzlvwz");
      attr(div1, "class", "date-picker-input svelte-vzlvwz");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t0);
      append(div0, t1);
      mount_component(icon, div0, null);
      append(div1, t2);
      if (if_block)
        if_block.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(div0, "click", ctx[11]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & 3) && t0_value !== (t0_value = ctx2[0].format(ctx2[1]) + ""))
        set_data(t0, t0_value);
      if (ctx2[5]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(icon);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { selectedDate = (0, import_obsidian12.moment)() } = $$props;
  let { dateFormat = "dddd, MMMM Do YYYY" } = $$props;
  let { dateChangeCallback } = $$props;
  let { alignRight } = $$props;
  let date;
  let month;
  let year;
  let showDatePicker;
  function nextMonth() {
    if (month === 11) {
      $$invalidate(3, month = 0);
      $$invalidate(4, year += 1);
      return;
    }
    $$invalidate(3, month = month + 1);
  }
  function prevMonth() {
    if (month === 0) {
      $$invalidate(3, month = 11);
      $$invalidate(4, year -= 1);
      return;
    }
    $$invalidate(3, month -= 1);
  }
  function changeYear(value) {
    const v = value.target.value;
    const vNum = Number.parseInt(v);
    if (!Number.isNaN(vNum)) {
      $$invalidate(4, year = vNum);
    }
  }
  function onDateChange(d) {
    $$invalidate(5, showDatePicker = false);
    $$invalidate(0, selectedDate = d.detail);
    dateChangeCallback(d.detail);
  }
  const click_handler = () => $$invalidate(5, showDatePicker = true);
  const click_handler_12 = () => $$invalidate(5, showDatePicker = false);
  $$self.$$set = ($$props2) => {
    if ("selectedDate" in $$props2)
      $$invalidate(0, selectedDate = $$props2.selectedDate);
    if ("dateFormat" in $$props2)
      $$invalidate(1, dateFormat = $$props2.dateFormat);
    if ("dateChangeCallback" in $$props2)
      $$invalidate(10, dateChangeCallback = $$props2.dateChangeCallback);
    if ("alignRight" in $$props2)
      $$invalidate(2, alignRight = $$props2.alignRight);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $: {
        console.log("update date picker", selectedDate);
        date = selectedDate.date();
        $$invalidate(3, month = selectedDate.month());
        $$invalidate(4, year = selectedDate.year());
      }
    }
  };
  return [
    selectedDate,
    dateFormat,
    alignRight,
    month,
    year,
    showDatePicker,
    nextMonth,
    prevMonth,
    changeYear,
    onDateChange,
    dateChangeCallback,
    click_handler,
    click_handler_12
  ];
}
var DatePicker = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, {
      selectedDate: 0,
      dateFormat: 1,
      dateChangeCallback: 10,
      alignRight: 2
    }, add_css3);
  }
};
var DatePicker_default = DatePicker;

// src/inputFields/DatePicker/DatePickerInputField.ts
var DatePickerInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.date = DateParser.getDefaultDate();
  }
  getValue() {
    return DateParser.stringify(this.date);
  }
  setValue(value) {
    var _a, _b;
    this.date = (_a = DateParser.parse(value)) != null ? _a : DateParser.getDefaultDate();
    if (!this.date.isValid()) {
      this.date = DateParser.getDefaultDate();
      this.onValueChange(this.getValue());
    }
    (_b = this.component) == null ? void 0 : _b.$set({ selectedDate: this.date });
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return DateParser.stringify(DateParser.getDefaultDate());
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("");
    }
    return this.container;
  }
  datePickerValueChanged(date) {
    this.date = date;
    if (this.date.isValid()) {
      this.onValueChange(this.getValue());
    }
  }
  render(container) {
    var _a, _b;
    this.container = container;
    this.date = (_a = DateParser.parse(this.inputFieldMarkdownRenderChild.getInitialValue())) != null ? _a : DateParser.getDefaultDate();
    if (!this.date.isValid()) {
      this.date = DateParser.getDefaultDate();
      this.onValueChange(this.getValue());
    }
    this.component = new DatePicker_default({
      target: container,
      props: {
        alignRight: (_b = this.inputFieldMarkdownRenderChild.getArgument("alignRight" /* ALIGN_RIGHT */)) == null ? void 0 : _b.value,
        selectedDate: this.date,
        dateFormat: this.inputFieldMarkdownRenderChild.plugin.settings.preferredDateFormat,
        dateChangeCallback: (date) => this.datePickerValueChanged(date)
      }
    });
  }
};

// src/inputFields/InputFieldFactory.ts
var _InputFieldFactory = class {
  static createInputField(inputFieldType, args) {
    if (inputFieldType === "toggle" /* TOGGLE */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new ToggleInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "slider" /* SLIDER */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new SliderInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "text" /* TEXT */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new TextInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "text_area" /* TEXT_AREA */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new TextAreaInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "select" /* SELECT */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new SelectInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "multi_select" /* MULTI_SELECT */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new MultiSelectInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "date" /* DATE */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new DateInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "time" /* TIME */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new TimeInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "date_picker" /* DATE_PICKER */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new DatePickerInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    }
    return void 0;
  }
  static checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, type) {
    const allowCodeBlock = _InputFieldFactory.allowCodeBlockMap[inputFieldType];
    if (type === 1 /* CODE_BLOCK */ && !allowCodeBlock.codeBlock) {
      throw new MetaBindParsingError(`'${inputFieldType}' is not allowed as code block`);
    }
    if (type === 0 /* INLINE_CODE_BLOCK */ && !allowCodeBlock.inlineCodeBlock) {
      throw new MetaBindParsingError(`'${inputFieldType}' is not allowed as inline code block`);
    }
  }
};
var InputFieldFactory = _InputFieldFactory;
InputFieldFactory.allowCodeBlockMap = {
  ["toggle" /* TOGGLE */]: {
    codeBlock: ToggleInputField.allowCodeBlock,
    inlineCodeBlock: ToggleInputField.allowInlineCodeBlock
  },
  ["slider" /* SLIDER */]: {
    codeBlock: SliderInputField.allowCodeBlock,
    inlineCodeBlock: SliderInputField.allowInlineCodeBlock
  },
  ["text" /* TEXT */]: {
    codeBlock: TextInputField.allowCodeBlock,
    inlineCodeBlock: TextInputField.allowInlineCodeBlock
  },
  ["text_area" /* TEXT_AREA */]: {
    codeBlock: TextAreaInputField.allowCodeBlock,
    inlineCodeBlock: TextAreaInputField.allowInlineCodeBlock
  },
  ["select" /* SELECT */]: {
    codeBlock: SelectInputField.allowCodeBlock,
    inlineCodeBlock: SelectInputField.allowInlineCodeBlock
  },
  ["multi_select" /* MULTI_SELECT */]: {
    codeBlock: MultiSelectInputField.allowCodeBlock,
    inlineCodeBlock: MultiSelectInputField.allowInlineCodeBlock
  },
  ["date" /* DATE */]: {
    codeBlock: DateInputField.allowCodeBlock,
    inlineCodeBlock: DateInputField.allowInlineCodeBlock
  },
  ["time" /* TIME */]: {
    codeBlock: TimeInputField.allowCodeBlock,
    inlineCodeBlock: TimeInputField.allowInlineCodeBlock
  },
  ["date_picker" /* DATE_PICKER */]: {
    codeBlock: DatePickerInputField.allowCodeBlock,
    inlineCodeBlock: DatePickerInputField.allowInlineCodeBlock
  }
};

// src/InputFieldMarkdownRenderChild.ts
var import_API = __toESM(require_API());
var import_Internal = __toESM(require_Internal());
var import_Utils18 = __toESM(require_Utils());
var getMetadataFromFileCache = import_Internal.Internal.getMetadataFromFileCache;
var InputFieldMarkdownRenderChild2 = class extends import_obsidian13.MarkdownRenderChild {
  constructor(containerEl, type, fullDeclaration, plugin, filePath, uid) {
    super(containerEl);
    this.error = "";
    this.filePath = filePath;
    this.uid = uid;
    this.plugin = plugin;
    this.type = type;
    this.fullDeclaration = fullDeclaration;
    this.metadataValueUpdateQueue = [];
    this.inputFieldValueUpdateQueue = [];
    this.intervalCounter = 0;
    try {
      this.inputFieldDeclaration = InputFieldDeclarationParser.parse(fullDeclaration);
      if (this.inputFieldDeclaration.isBound) {
        this.parseBindTarget();
        this.metaData = getMetadataFromFileCache(this.bindTargetFile, this.plugin);
      }
      this.inputField = InputFieldFactory.createInputField(this.inputFieldDeclaration.inputFieldType, {
        type,
        inputFieldMarkdownRenderChild: this,
        onValueChanged: this.pushToMetadataValueUpdateQueue.bind(this)
      });
      this.limitInterval = window.setInterval(() => this.applyValueUpdateQueues(), this.plugin.settings.syncInterval);
    } catch (e) {
      this.error = e.message;
      console.warn(e);
    }
  }
  parseBindTarget() {
    if (!this.inputFieldDeclaration) {
      throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not parse bind target");
    }
    const bindTargetParts = this.inputFieldDeclaration.bindTarget.split("#");
    let bindTargetFileName;
    let bindTargetMetadataFieldName;
    if (bindTargetParts.length === 1) {
      bindTargetFileName = this.filePath;
      bindTargetMetadataFieldName = this.inputFieldDeclaration.bindTarget;
    } else if (bindTargetParts.length === 2) {
      bindTargetFileName = bindTargetParts[0];
      bindTargetMetadataFieldName = bindTargetParts[1];
    } else {
      throw new MetaBindBindTargetError("bind target may only contain one '#' to specify the metadata field");
    }
    try {
      (0, import_Utils18.validatePath)(bindTargetMetadataFieldName);
    } catch (e) {
      if (e instanceof Error) {
        throw new MetaBindBindTargetError(`bind target parsing error: ${e == null ? void 0 : e.message}`);
      }
    }
    this.bindTargetMetadataField = bindTargetMetadataFieldName;
    const files = this.plugin.getFilesByName(bindTargetFileName);
    if (files.length === 0) {
      throw new MetaBindBindTargetError("bind target file not found");
    } else if (files.length === 1) {
      this.bindTargetFile = files[0];
    } else {
      throw new MetaBindBindTargetError("bind target resolves to multiple files, please also specify the file path");
    }
  }
  applyValueUpdateQueues() {
    return __async(this, null, function* () {
      if (this.metadataValueUpdateQueue.length !== 0) {
        yield this.applyMetadataValueUpdateQueue();
        this.cleanUpUpdateQueues();
        return;
      }
      if (this.inputFieldValueUpdateQueue.length !== 0) {
        yield this.applyInputFieldValueUpdateQueue();
        this.cleanUpUpdateQueues();
        return;
      }
    });
  }
  applyMetadataValueUpdateQueue() {
    return __async(this, null, function* () {
      if (!this.inputFieldDeclaration) {
        throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not update metadata");
      }
      if (!this.inputFieldDeclaration.isBound) {
        return;
      }
      if (!this.bindTargetMetadataField || !this.bindTargetFile) {
        throw new MetaBindInternalError("bindTargetMetadataField or bindTargetFile is undefined, can not update metadata");
      }
      if (this.metadataValueUpdateQueue.length > 0) {
        yield (0, import_API.updateOrInsertFieldInTFile)(this.bindTargetMetadataField, this.metadataValueUpdateQueue.at(-1), this.bindTargetFile, this.plugin);
      } else {
        throw new MetaBindInternalError(`cannot apply metadataValueUpdateQueue to inputField ${this.uid}, metadataValueUpdateQueue is empty`);
      }
    });
  }
  applyInputFieldValueUpdateQueue() {
    return __async(this, null, function* () {
      if (!this.inputFieldDeclaration) {
        throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not update inputField");
      }
      if (!this.inputField) {
        throw new MetaBindInternalError("inputField is undefined, can not update inputField");
      }
      if (this.inputFieldValueUpdateQueue.length > 0) {
        let value = this.inputFieldValueUpdateQueue.at(-1);
        if (value == null) {
          value = this.inputField.getDefaultValue();
        }
        Logger.logDebug(`updating input field ${this.uid} to`, value);
        this.inputField.setValue(value);
      } else {
        throw new MetaBindInternalError(`cannot apply inputFieldValueUpdateQueue to inputField ${this.uid}, inputFieldValueUpdateQueue is empty`);
      }
    });
  }
  cleanUpUpdateQueues() {
    this.metadataValueUpdateQueue = [];
    this.inputFieldValueUpdateQueue = [];
  }
  pushToMetadataValueUpdateQueue(value) {
    var _a;
    if ((_a = this.inputFieldDeclaration) == null ? void 0 : _a.isBound) {
      this.metadataValueUpdateQueue.push(value);
    }
  }
  pushToInputFieldValueUpdateQueue(value) {
    var _a;
    if (!((_a = this.inputField) == null ? void 0 : _a.isEqualValue(value))) {
      this.inputFieldValueUpdateQueue.push(value);
    }
  }
  getInitialValue() {
    var _a, _b, _c, _d;
    if ((_a = this.inputFieldDeclaration) == null ? void 0 : _a.isBound) {
      return (_d = this.metaData[(_b = this.bindTargetMetadataField) != null ? _b : ""]) != null ? _d : (_c = this.inputField) == null ? void 0 : _c.getDefaultValue();
    }
  }
  getArguments(name) {
    if (!this.inputFieldDeclaration) {
      throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not retrieve arguments");
    }
    return this.inputFieldDeclaration.argumentContainer.arguments.filter((x) => x.identifier === name);
  }
  getArgument(name) {
    return this.getArguments(name).at(0);
  }
  onload() {
    return __async(this, null, function* () {
      Logger.logDebug("load", this);
      this.metaData = yield this.metaData;
      const container = this.containerEl.createDiv();
      container.addClass("meta-bind-plugin-input-wrapper");
      this.containerEl.addClass("meta-bind-plugin-input");
      if (this.error) {
        this.containerEl.empty();
        const originalText = this.containerEl.createEl("span", { text: this.fullDeclaration, cls: "meta-bind-code" });
        container.innerText = ` -> ERROR: ${this.error}`;
        container.addClass("meta-bind-plugin-error");
        this.containerEl.appendChild(container);
        return;
      }
      if (!this.inputField) {
        this.containerEl.empty();
        const originalText = this.containerEl.createEl("span", { text: this.fullDeclaration, cls: "meta-bind-code" });
        container.innerText = ` -> ERROR: ${new MetaBindInternalError("input field is undefined and error is empty").message}`;
        container.addClass("meta-bind-plugin-error");
        this.containerEl.appendChild(container);
        return;
      }
      this.plugin.registerInputFieldMarkdownRenderChild(this);
      this.inputField.render(container);
      const classArguments = this.getArguments("class" /* CLASS */);
      if (classArguments) {
        this.inputField.getHtmlElement().addClasses(classArguments.map((x) => x.value).flat());
      }
      this.containerEl.empty();
      this.containerEl.appendChild(container);
    });
  }
  onunload() {
    Logger.logDebug("unload", this);
    this.plugin.unregisterInputFieldMarkdownRenderChild(this);
    super.onunload();
    window.clearInterval(this.limitInterval);
  }
};

// src/main.ts
var import_Internal2 = __toESM(require_Internal());
var getMetadataFromFileCache2 = import_Internal2.Internal.getMetadataFromFileCache;
var MetaBindPlugin = class extends import_obsidian14.Plugin {
  constructor() {
    super(...arguments);
    this.frontMatterRexExpPattern = "^(---)\\n[\\s\\S]*?\\n---";
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      Logger.devMode = this.settings.devMode;
      DateParser.dateFormat = this.settings.preferredDateFormat;
      InputFieldDeclarationParser.parseTemplates(this.settings.inputTemplates);
      this.activeMarkdownInputFields = [];
      this.markDownInputFieldIndex = 0;
      this.registerMarkdownPostProcessor((element2, context) => {
        const codeBlocks = element2.querySelectorAll("code");
        for (let index = 0; index < codeBlocks.length; index++) {
          const codeBlock = codeBlocks.item(index);
          const text2 = codeBlock.innerText;
          const isInputField = text2.startsWith("INPUT[") && text2.endsWith("]");
          if (isInputField) {
            context.addChild(new InputFieldMarkdownRenderChild2(codeBlock, 0 /* INLINE_CODE_BLOCK */, text2, this, context.sourcePath, this.markDownInputFieldIndex));
            this.markDownInputFieldIndex += 1;
          }
        }
      });
      this.registerMarkdownCodeBlockProcessor("meta-bind", (source, el, ctx) => {
        const codeBlock = el;
        const text2 = source.replace(/\n/g, "");
        const isInputField = text2.startsWith("INPUT[") && text2.endsWith("]");
        if (isInputField) {
          ctx.addChild(new InputFieldMarkdownRenderChild2(codeBlock, 1 /* CODE_BLOCK */, text2, this, ctx.sourcePath, this.markDownInputFieldIndex));
          this.markDownInputFieldIndex += 1;
        }
      });
      this.registerEvent(this.app.metadataCache.on("changed", (file, data, cache) => __async(this, null, function* () {
        yield this.updateMarkdownInputFieldsOnMetadataCacheChange(file, cache);
      })));
      this.addSettingTab(new MetaBindSettingTab(this.app, this));
    });
  }
  onunload() {
    for (const activeMarkdownInputField of this.activeMarkdownInputFields) {
      activeMarkdownInputField.unload();
    }
  }
  registerInputFieldMarkdownRenderChild(inputFieldMarkdownRenderChild) {
    this.activeMarkdownInputFields.push(inputFieldMarkdownRenderChild);
  }
  unregisterInputFieldMarkdownRenderChild(inputFieldMarkdownRenderChild) {
    this.activeMarkdownInputFields = this.activeMarkdownInputFields.filter((x) => x.uid !== inputFieldMarkdownRenderChild.uid);
  }
  updateMarkdownInputFieldsOnMetadataCacheChange(file, cache) {
    var _a;
    let metadata = void 0;
    for (const activeMarkdownInputField of this.activeMarkdownInputFields) {
      if (!((_a = activeMarkdownInputField.inputFieldDeclaration) == null ? void 0 : _a.isBound) || !activeMarkdownInputField.bindTargetFile || !activeMarkdownInputField.bindTargetMetadataField) {
        continue;
      }
      if (activeMarkdownInputField.bindTargetFile.path === file.path) {
        if (metadata === void 0) {
          metadata = getMetadataFromFileCache2(file, this);
        }
        activeMarkdownInputField.pushToInputFieldValueUpdateQueue(metadata[activeMarkdownInputField.bindTargetMetadataField]);
      }
    }
  }
  getFilesByName(name) {
    console.log(getFileName(removeFileEnding(name)));
    const fileNameIsPath = isPath(name);
    const processedFileName = fileNameIsPath ? removeFileEnding(name) : getFileName(removeFileEnding(name));
    const allFiles = this.app.vault.getMarkdownFiles();
    const files = [];
    for (const file of allFiles) {
      if (fileNameIsPath) {
        if (removeFileEnding(file.path) === processedFileName) {
          files.push(file);
        }
      } else {
        if (getFileName(removeFileEnding(file.name)) === processedFileName) {
          files.push(file);
        }
      }
    }
    return files;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      DateParser.dateFormat = this.settings.preferredDateFormat;
      Logger.devMode = this.settings.devMode;
      InputFieldDeclarationParser.parseTemplates(this.settings.inputTemplates);
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
