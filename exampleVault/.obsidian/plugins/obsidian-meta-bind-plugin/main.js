"use strict";
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetaBindPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// src/settings/Settings.ts
var import_obsidian = require("obsidian");

// src/utils/Utils.ts
var MetaBindInternalError = class extends Error {
  constructor(message) {
    super(`[MB_INTERNAL_ERROR - please report this error here https://github.com/mProjectsCode/obsidian-meta-bind-plugin/issues] ${message}`);
  }
};
var MetaBindParsingError = class extends Error {
  constructor(message) {
    super(`[MB_PARSING_ERROR] ${message}`);
  }
};
var MetaBindBindTargetError = class extends Error {
  constructor(message) {
    super(`[MB_BIND_TARGET_ERROR] ${message}`);
  }
};
function getFileName(path) {
  var _a;
  return (_a = path.split("/").at(-1)) != null ? _a : path;
}
function isPath(path) {
  return path.split("/").length > 1;
}
function removeFileEnding(fileName) {
  const fileNameParts = fileName.split(".");
  if (fileNameParts.length === 1) {
    return fileName;
  } else {
    let newFileName = fileNameParts[0];
    for (let i = 1; i < fileNameParts.length - 1; i++) {
      newFileName += "." + fileNameParts[i];
    }
    return newFileName;
  }
}
function mod(n, m) {
  return (n % m + m) % m;
}
function arrayEquals(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  for (const arr1Element of arr1) {
    if (!arr2.contains(arr1Element)) {
      return false;
    }
  }
  return true;
}
function isTruthy(value) {
  return !!value;
}
function isFalsy(value) {
  return !value;
}
function equalOrIncludes(str1, str2) {
  return str1 === str2 || str1.includes(str2) || str2.includes(str1);
}

// src/parsers/DateParser.ts
var Date = class {
  constructor() {
    this._monthMap = {
      1: "January",
      2: "February",
      3: "March",
      4: "April",
      5: "May",
      6: "June",
      7: "July",
      8: "August",
      9: "September",
      10: "October",
      11: "November",
      12: "December"
    };
    this._monthMapShort = {
      1: "Jan",
      2: "Feb",
      3: "Mar",
      4: "Apr",
      5: "May",
      6: "Jun",
      7: "Jul",
      8: "Aug",
      9: "Sep",
      10: "Oct",
      11: "Nov",
      12: "Dec"
    };
    this._day = DateParser.getDefaultDay();
    this._month = DateParser.getDefaultMonth();
    this._year = DateParser.getDefaultYear();
  }
  getDay() {
    return this._day;
  }
  setDay(value) {
    if (value < 1 || value > 31) {
      return;
    }
    this._day = value;
  }
  getMonth() {
    return this._month;
  }
  setMonth(value) {
    if (value < 1 || value > 12) {
      return;
    }
    this._month = value;
  }
  getYear() {
    return this._year;
  }
  setYear(value) {
    this._year = value;
  }
  getUniformDay() {
    return ("00" + this.getDay().toString()).slice(-2);
  }
  getUniformMonth() {
    return ("00" + this.getMonth().toString()).slice(-2);
  }
  getUniformYear() {
    return ("0000" + this.getYear().toString()).slice(-4);
  }
  setDayFromString(str) {
    const v = Number.parseInt(str);
    this.setDay(Number.isNaN(v) ? DateParser.getDefaultDay() : v);
  }
  setMonthFromString(str) {
    const v = Number.parseInt(str);
    this.setMonth(Number.isNaN(v) ? DateParser.getDefaultMonth() : v);
  }
  setYearFromString(str) {
    const v = Number.parseInt(str);
    this.setYear(Number.isNaN(v) ? DateParser.getDefaultYear() : v);
  }
  getMonthName() {
    return this._monthMap[this.getMonth()];
  }
  getMonthNameShort() {
    return this._monthMapShort[this.getMonth()];
  }
  setMonthFromName(name) {
    for (const [key, value] of Object.entries(this._monthMap)) {
      if (value === name) {
        this.setMonthFromString(key);
        return;
      }
    }
    for (const [key, value] of Object.entries(this._monthMapShort)) {
      if (value === name) {
        this.setMonthFromString(key);
        return;
      }
    }
  }
};
var DateParser = class {
  static stringify(date) {
    if (DateParser.dateFormat === "us" /* US */) {
      return DateParser.stringifyUsDate(date);
    } else if (DateParser.dateFormat === "eu" /* EU */) {
      return DateParser.stringifyEuDate(date);
    } else if (DateParser.dateFormat === "f_us" /* FANCY_US */) {
      return DateParser.stringifyUsFancyDate(date);
    } else if (DateParser.dateFormat === "fs_us" /* FANCY_SHORT_US */) {
      return DateParser.stringifyUsFancyDateShort(date);
    }
    throw new MetaBindInternalError("date format setting does not match any supported date format");
  }
  static parse(dateString) {
    if (DateParser.dateFormat === "us" /* US */) {
      return DateParser.parseUsDate(dateString);
    } else if (DateParser.dateFormat === "eu" /* EU */) {
      return DateParser.parseEuDate(dateString);
    } else if (DateParser.dateFormat === "f_us" /* FANCY_US */) {
      return DateParser.parseUsFancyDate(dateString);
    } else if (DateParser.dateFormat === "fs_us" /* FANCY_SHORT_US */) {
      return DateParser.parseUsFancyDate(dateString);
    }
    throw new MetaBindInternalError("date format setting does not match any supported date format");
  }
  static stringifyEuDate(date) {
    return `${date.getUniformDay()}/${date.getUniformMonth()}/${date.getUniformYear()}`;
  }
  static parseEuDate(dateString) {
    const date = DateParser.getDefaultDate();
    const dateParts = dateString.split("/");
    if (dateParts.length !== 3) {
      return void 0;
    }
    date.setDayFromString(dateParts[0]);
    date.setMonthFromString(dateParts[1]);
    date.setYearFromString(dateParts[2]);
    return date;
  }
  static stringifyUsDate(date) {
    return `${date.getUniformMonth()}/${date.getUniformDay()}/${date.getUniformYear()}`;
  }
  static parseUsDate(dateString) {
    const date = DateParser.getDefaultDate();
    const dateParts = dateString.split("/");
    if (dateParts.length !== 3) {
      return void 0;
    }
    date.setMonthFromString(dateParts[0]);
    date.setDayFromString(dateParts[1]);
    date.setYearFromString(dateParts[2]);
    return date;
  }
  static stringifyUsFancyDate(date) {
    return `${date.getMonthName()} ${date.getDay().toString()}, ${date.getYear().toString()}`;
  }
  static stringifyUsFancyDateShort(date) {
    return `${date.getMonthNameShort()} ${date.getDay().toString()}, ${date.getYear().toString()}`;
  }
  static parseUsFancyDate(dateString) {
    const date = DateParser.getDefaultDate();
    const dateParts = dateString.split(",").map((x) => x.trim());
    if (dateParts.length !== 2) {
      return void 0;
    }
    const datePartsParts = dateParts[0].split(" ");
    if (datePartsParts.length !== 2) {
      return void 0;
    }
    date.setMonthFromName(datePartsParts[0]);
    date.setDayFromString(datePartsParts[1]);
    date.setYearFromString(dateParts[1]);
    return date;
  }
  static getDefaultDate() {
    return new Date();
  }
  static getDefaultDay() {
    return 1;
  }
  static getDefaultMonth() {
    return 1;
  }
  static getDefaultYear() {
    return 2022;
  }
};

// src/settings/Settings.ts
var DEFAULT_SETTINGS = {
  devMode: false,
  dateFormat: "us" /* US */,
  syncInterval: 200,
  minSyncInterval: 50,
  maxSyncInterval: 1e3
};
var MetaBindSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Meta Bind Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Sync Interval").setDesc(`The interval in milli-seconds between disk writes. Changing this number is not recommended except if your hard drive is exceptionally slow. Standard: ${DEFAULT_SETTINGS.syncInterval}; Minimum: ${DEFAULT_SETTINGS.minSyncInterval}; Maximum: ${DEFAULT_SETTINGS.maxSyncInterval}`).addText((cb) => {
      cb.setValue(this.plugin.settings.syncInterval.toString());
      cb.onChange((data) => {
        this.plugin.settings.syncInterval = Number.parseInt(data);
        if (Number.isNaN(this.plugin.settings.syncInterval)) {
          this.plugin.settings.syncInterval = DEFAULT_SETTINGS.syncInterval;
        }
        if (this.plugin.settings.syncInterval < DEFAULT_SETTINGS.minSyncInterval) {
          this.plugin.settings.syncInterval = DEFAULT_SETTINGS.minSyncInterval;
        }
        if (this.plugin.settings.syncInterval > DEFAULT_SETTINGS.maxSyncInterval) {
          this.plugin.settings.syncInterval = DEFAULT_SETTINGS.maxSyncInterval;
        }
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc(`The date format to be used by this plugin.`).addDropdown((cb) => {
      cb.addOptions({
        "us": "US date format (1/30/2022)",
        "eu": "EU date format (30/1/2022)",
        "f_us": "US date format (January 30, 2022)",
        "fs_us": "US date format (Jan 30, 2022)"
      });
      cb.onChange((data) => {
        this.plugin.settings.dateFormat = data;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Dev Mode").setDesc("Enable dev mode. Not recommended unless you want to debug this plugin.").addToggle((cb) => {
      cb.setValue(this.plugin.settings.devMode);
      cb.onChange((data) => {
        this.plugin.settings.devMode = data;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/InputFieldMarkdownRenderChild.ts
var import_obsidian8 = require("obsidian");

// src/utils/Logger.ts
var _Logger = class {
  static log(...data) {
    console.log(this.prefix, ...data);
  }
  static logDebug(...data) {
    if (this.devMode) {
      _Logger.log(...data);
    }
  }
  static logWarning(...data) {
    console.warn(this.prefix, data);
  }
  static logError(...data) {
    console.error(this.prefix, data);
  }
};
var Logger = _Logger;
Logger.prefix = "meta-bind |";

// src/inputFields/AbstractInputField.ts
var AbstractInputField = class {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    this.inputFieldMarkdownRenderChild = inputFieldMarkdownRenderChild;
    this.onValueChange = onValueChange;
  }
};
AbstractInputField.allowCodeBlock = true;
AbstractInputField.allowInlineCodeBlock = true;

// src/inputFields/ToggleInputField.ts
var import_obsidian2 = require("obsidian");
var ToggleInputField = class extends AbstractInputField {
  getValue() {
    if (!this.toggleComponent) {
      throw new MetaBindInternalError("toggle input component is undefined");
    }
    return this.toggleComponent.getValue();
  }
  setValue(value) {
    if (!this.toggleComponent) {
      throw new MetaBindInternalError("toggle input component is undefined");
    }
    if (value != null && typeof value == "boolean") {
      this.toggleComponent.setValue(value);
    } else {
      Logger.logWarning(`can not set value of toggle to '${value}'`);
      this.toggleComponent.setValue(false);
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return false;
  }
  getHtmlElement() {
    if (!this.toggleComponent) {
      throw new MetaBindInternalError("toggle input component is undefined");
    }
    return this.toggleComponent.toggleEl;
  }
  render(container) {
    const component = new import_obsidian2.ToggleComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    this.toggleComponent = component;
  }
};

// src/inputFields/TextInputField.ts
var import_obsidian3 = require("obsidian");
var TextInputField = class extends AbstractInputField {
  getValue() {
    if (!this.textComponent) {
      throw new MetaBindInternalError("text input component is undefined");
    }
    return this.textComponent.getValue();
  }
  setValue(value) {
    if (!this.textComponent) {
      throw new MetaBindInternalError("text input component is undefined");
    }
    if (value != null && typeof value == "string") {
      this.textComponent.setValue(value);
    } else {
      Logger.logWarning(`can not set value of text input to '${value}'`);
      this.textComponent.setValue("");
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return "";
  }
  getHtmlElement() {
    if (!this.textComponent) {
      throw new MetaBindInternalError("text input component is undefined");
    }
    return this.textComponent.inputEl;
  }
  render(container) {
    const component = new import_obsidian3.TextComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    this.textComponent = component;
  }
};

// src/inputFields/SliderInputField.ts
var import_obsidian4 = require("obsidian");
var SliderInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    var _a, _b, _c, _d;
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.minValue = (_b = (_a = inputFieldMarkdownRenderChild.getArgument("minValue")) == null ? void 0 : _a.value) != null ? _b : 0;
    this.maxValue = (_d = (_c = inputFieldMarkdownRenderChild.getArgument("maxValue")) == null ? void 0 : _c.value) != null ? _d : 100;
  }
  getValue() {
    if (!this.sliderComponent) {
      throw new MetaBindInternalError("slider input component is undefined");
    }
    return this.sliderComponent.getValue();
  }
  setValue(value) {
    if (!this.sliderComponent) {
      throw new MetaBindInternalError("slider input component is undefined");
    }
    if (value != null && typeof value == "number") {
      if (value >= this.minValue && value <= this.maxValue) {
        this.sliderComponent.setValue(value);
      }
    } else {
      Logger.logWarning(`can not set value of slider to '${value}'`);
      this.sliderComponent.setValue(this.getDefaultValue());
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return this.minValue;
  }
  getHtmlElement() {
    if (!this.sliderComponent) {
      throw new MetaBindInternalError("slider input component is undefined");
    }
    return this.sliderComponent.sliderEl;
  }
  render(container) {
    container.removeClass("meta-bind-plugin-input-wrapper");
    container.addClass("meta-bind-plugin-flex-input-wrapper");
    const labelArgument = this.inputFieldMarkdownRenderChild.getArgument("labels");
    if (labelArgument && labelArgument.value === true) {
      container.createSpan({ text: this.minValue.toString(), cls: "meta-bind-plugin-slider-input-label" });
    }
    const component = new import_obsidian4.SliderComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    component.setDynamicTooltip();
    component.setLimits(this.minValue, this.maxValue, 1);
    component.sliderEl.addClass("meta-bind-plugin-slider-input");
    if (labelArgument && labelArgument.value === true) {
      container.createSpan({ text: this.maxValue.toString(), cls: "meta-bind-plugin-slider-input-label" });
    }
    this.sliderComponent = component;
  }
};

// src/inputFields/TextAreaInputField.ts
var import_obsidian5 = require("obsidian");
var TextAreaInputField = class extends AbstractInputField {
  getValue() {
    if (!this.textAreaComponent) {
      throw new MetaBindInternalError("text area input component is undefined");
    }
    return this.textAreaComponent.getValue();
  }
  setValue(value) {
    if (!this.textAreaComponent) {
      throw new MetaBindInternalError("text area input component is undefined");
    }
    if (value != null && typeof value == "string") {
      this.textAreaComponent.setValue(value);
    } else {
      Logger.logWarning(`can not set value of text area input to '${value}'`);
      this.textAreaComponent.setValue("");
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return "";
  }
  getHtmlElement() {
    if (!this.textAreaComponent) {
      throw new MetaBindInternalError("text area input component is undefined");
    }
    return this.textAreaComponent.inputEl;
  }
  render(container) {
    const component = new import_obsidian5.TextAreaComponent(container);
    component.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
    component.onChange(this.onValueChange);
    this.textAreaComponent = component;
  }
};

// src/inputFields/SelectInputFieldElement.ts
var SelectInputFieldElement = class {
  constructor(value, parentElement, id, multiSelectInputField, active = false) {
    this.value = value;
    this.id = id;
    this.active = active;
    this.highlighted = false;
    this.selectInputField = multiSelectInputField;
    this.cssClass = "meta-bind-plugin-select-input-element";
    this.activeClass = "meta-bind-plugin-select-input-element-selected";
    this.hoverClass = "meta-bind-plugin-select-input-element-hover";
    this.element = parentElement.createDiv({ cls: this.cssClass });
    this.element.id = this.getHTMLId();
    this.element.on("click", "#" + this.getHTMLId(), () => {
      this.setActive(!this.active);
      if (!this.selectInputField.allowMultiSelect) {
        this.selectInputField.disableAllOtherElements(this.id);
      }
    });
    this.element.on("mouseenter", "#" + this.getHTMLId(), () => {
      this.setHighlighted(true);
    });
    this.element.on("mouseleave", "#" + this.getHTMLId(), () => {
      this.setHighlighted(false);
    });
  }
  getHTMLId() {
    return `meta-bind-select-input-element-${this.selectInputField.inputFieldMarkdownRenderChild.uid}-${this.id}`;
  }
  isHighlighted() {
    return this.highlighted;
  }
  setHighlighted(value) {
    this.highlighted = value;
    if (this.highlighted) {
      this.addClass(this.hoverClass);
      this.selectInputField.deHighlightAllOtherElements(this.id);
    } else {
      this.removeClass(this.hoverClass);
    }
  }
  isActive() {
    return this.active;
  }
  setActive(active, updateParent = true) {
    this.active = active;
    this.update(updateParent);
  }
  update(updateParent) {
    if (this.active) {
      this.addClass(this.activeClass);
    } else {
      this.removeClass(this.activeClass);
    }
    if (updateParent) {
      this.selectInputField.onChange();
    }
  }
  addClass(cssClass) {
    if (!this.element.hasClass(cssClass)) {
      this.element.addClass(cssClass);
    }
  }
  removeClass(cssClass) {
    if (this.element.hasClass(cssClass)) {
      this.element.removeClass(cssClass);
    }
  }
  render() {
    this.element.createEl("div", { text: this.value });
  }
};

// src/inputFields/SelectInputField.ts
var SelectInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.elements = [];
    this.allowMultiSelect = false;
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("select input container is undefined");
    }
    return this.container;
  }
  getValue() {
    var _a, _b;
    return (_b = (_a = this.elements.filter((x) => x.isActive()).first()) == null ? void 0 : _a.value) != null ? _b : "";
  }
  setValue(value) {
    for (const element of this.elements) {
      if (value === element.value) {
        element.setActive(true, false);
      } else {
        element.setActive(false, false);
      }
    }
  }
  isEqualValue(value) {
    return this.getValue() == value;
  }
  getDefaultValue() {
    return "";
  }
  onChange() {
    this.onValueChange(this.getValue());
  }
  render(container) {
    container.addClass("meta-bind-plugin-select-input-bg");
    this.container = container;
    const elementWrapper = container.createDiv({ cls: "meta-bind-plugin-select-input-wrapper" });
    const titleArgument = this.inputFieldMarkdownRenderChild.getArgument("title");
    if (titleArgument) {
      elementWrapper.createEl("div", { text: titleArgument.value, cls: "meta-bind-plugin-select-input-header" });
    }
    const elementArguments = this.inputFieldMarkdownRenderChild.getArguments("option");
    let i = 0;
    for (const elementArgument of elementArguments) {
      const selectInputFieldElement = new SelectInputFieldElement(elementArgument.value, elementWrapper, i, this, false);
      this.elements.push(selectInputFieldElement);
      selectInputFieldElement.render();
      i += 1;
    }
    this.setValue(this.inputFieldMarkdownRenderChild.getInitialValue());
  }
  disableAllOtherElements(elementId) {
    for (const selectModalElement of this.elements) {
      if (selectModalElement.id !== elementId) {
        selectModalElement.setActive(false);
      }
    }
  }
  deHighlightAllOtherElements(elementId) {
    for (const selectModalElement of this.elements) {
      if (selectModalElement.id !== elementId) {
        selectModalElement.setHighlighted(false);
      }
    }
  }
  activateHighlighted() {
    for (const selectModalElement of this.elements) {
      if (selectModalElement.isHighlighted()) {
        selectModalElement.setActive(!selectModalElement.isActive());
        if (!this.allowMultiSelect) {
          this.disableAllOtherElements(selectModalElement.id);
        }
      }
    }
  }
  highlightUp() {
    var _a, _b;
    for (const selectModalElement of this.elements) {
      if (selectModalElement.isHighlighted()) {
        (_a = this.getPreviousSelectModalElement(selectModalElement)) == null ? void 0 : _a.setHighlighted(true);
        return;
      }
    }
    (_b = this.elements.at(-1)) == null ? void 0 : _b.setHighlighted(true);
  }
  highlightDown() {
    var _a, _b;
    for (const selectModalElement of this.elements) {
      if (selectModalElement.isHighlighted()) {
        (_a = this.getNextSelectModalElement(selectModalElement)) == null ? void 0 : _a.setHighlighted(true);
        return;
      }
    }
    (_b = this.elements.at(0)) == null ? void 0 : _b.setHighlighted(true);
  }
  getNextSelectModalElement(element) {
    let nextId = element.id + 1;
    nextId = mod(nextId, this.elements.length);
    return this.elements.filter((x) => x.id === nextId).at(0);
  }
  getPreviousSelectModalElement(element) {
    let nextId = element.id - 1;
    nextId = mod(nextId, this.elements.length);
    return this.elements.filter((x) => x.id === nextId).at(0);
  }
};
SelectInputField.allowInlineCodeBlock = false;

// src/inputFields/MultiSelectInputField.ts
var MultiSelectInputField = class extends SelectInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.allowMultiSelect = true;
  }
  getValue() {
    return this.elements.filter((x) => x.isActive()).map((x) => x.value);
  }
  setValue(value) {
    if (value.length === 0) {
      for (const element of this.elements) {
        element.setActive(false, false);
      }
      return;
    }
    elementLoop:
      for (const element of this.elements) {
        for (const valueElement of value) {
          if (valueElement === element.value) {
            element.setActive(true, false);
            continue elementLoop;
          }
        }
        element.setActive(false, false);
      }
  }
  isEqualValue(value) {
    if (!Array.isArray(value)) {
      return false;
    }
    return arrayEquals(this.getValue(), value);
  }
  getDefaultValue() {
    return [];
  }
};

// src/inputFields/DateInputField.ts
var import_obsidian6 = require("obsidian");
var DateInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.months = {
      "1": "January",
      "2": "February",
      "3": "March",
      "4": "April",
      "5": "May",
      "6": "June",
      "7": "July",
      "8": "August",
      "9": "September",
      "10": "October",
      "11": "November",
      "12": "December"
    };
    this.date = DateParser.getDefaultDate();
    this.days = {};
    for (let i = 1; i <= 31; i++) {
      this.days[i.toString()] = i.toString();
    }
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("toggle input container is undefined");
    }
    return this.container;
  }
  getValue() {
    return DateParser.stringify(this.date);
  }
  setValue(value) {
    var _a;
    if (!this.monthComponent) {
      throw new MetaBindInternalError("date input month component is undefined");
    }
    if (!this.dayComponent) {
      throw new MetaBindInternalError("date input day component is undefined");
    }
    if (!this.yearComponent) {
      throw new MetaBindInternalError("date input hour component is undefined");
    }
    this.date = (_a = DateParser.parse(value)) != null ? _a : DateParser.getDefaultDate();
    this.monthComponent.setValue(this.date.getMonth().toString());
    this.dayComponent.setValue(this.date.getDay().toString());
    this.yearComponent.setValue(this.date.getYear().toString());
  }
  isEqualValue(value) {
    return value == this.getValue();
  }
  getDefaultValue() {
    return DateParser.stringify(DateParser.getDefaultDate());
  }
  render(container) {
    var _a;
    this.date = (_a = DateParser.parse(this.inputFieldMarkdownRenderChild.getInitialValue())) != null ? _a : DateParser.getDefaultDate();
    container.removeClass("meta-bind-plugin-input-wrapper");
    container.addClass("meta-bind-plugin-flex-input-wrapper", "meta-bind-plugin-input-element-group");
    if (DateParser.dateFormat === "eu" /* EU */) {
      this.dayComponent = new import_obsidian6.DropdownComponent(container);
      this.dayComponent.addOptions(this.days);
      this.dayComponent.setValue(this.date.getDay().toString());
      this.dayComponent.onChange(this.onDayChange.bind(this));
      this.monthComponent = new import_obsidian6.DropdownComponent(container);
      this.monthComponent.addOptions(this.months);
      this.monthComponent.setValue(this.date.getMonth().toString());
      this.monthComponent.onChange(this.onMonthChange.bind(this));
      this.dayComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
      this.monthComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    } else {
      this.monthComponent = new import_obsidian6.DropdownComponent(container);
      this.monthComponent.addOptions(this.months);
      this.monthComponent.setValue(this.date.getMonth().toString());
      this.monthComponent.onChange(this.onMonthChange.bind(this));
      this.dayComponent = new import_obsidian6.DropdownComponent(container);
      this.dayComponent.addOptions(this.days);
      this.dayComponent.setValue(this.date.getDay().toString());
      this.dayComponent.onChange(this.onDayChange.bind(this));
      this.dayComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
      this.monthComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    }
    this.yearComponent = new import_obsidian6.TextComponent(container);
    this.yearComponent.setValue(this.date.getYear().toString());
    this.yearComponent.onChange(this.onYearChange.bind(this));
    this.yearComponent.inputEl.addClass("meta-bind-plugin-date-input-year-input");
    this.yearComponent.inputEl.addClass("meta-bind-plugin-input-element-group-element");
    this.yearComponent.inputEl.type = "number";
    this.yearComponent.inputEl.max = "9999";
    this.container = container;
  }
  onMonthChange(value) {
    this.date.setMonthFromString(value);
    this.onValueChange(this.getValue());
  }
  onDayChange(value) {
    this.date.setDayFromString(value);
    this.onValueChange(this.getValue());
  }
  onYearChange(value) {
    this.date.setYearFromString(value);
    this.onValueChange(this.getValue());
  }
};

// src/inputFields/TimeInputField.ts
var import_obsidian7 = require("obsidian");

// src/parsers/TimeParser.ts
var Time = class {
  constructor() {
    this._hour = TimeParser.getDefaultHour();
    this._minute = TimeParser.getDefaultHour();
  }
  getHour() {
    return this._hour;
  }
  setHour(value) {
    if (value < 0 || value > 24) {
      this._hour = TimeParser.getDefaultHour();
      return;
    }
    this._hour = value;
  }
  getMinute() {
    return this._minute;
  }
  setMinute(value) {
    if (value < 0 || value > 59) {
      this._minute = TimeParser.getDefaultMinute();
      return;
    }
    this._minute = value;
  }
  getUniformHour() {
    return ("00" + this.getHour().toString()).slice(-2);
  }
  getUniformMinute() {
    return ("00" + this.getMinute().toString()).slice(-2);
  }
  setHourFromString(str) {
    const v = Number.parseInt(str);
    this.setHour(Number.isNaN(v) ? TimeParser.getDefaultHour() : v);
  }
  setMinuteFromString(str) {
    const v = Number.parseInt(str);
    this.setMinute(Number.isNaN(v) ? TimeParser.getDefaultMinute() : v);
  }
};
var TimeParser = class {
  static parse(timeString) {
    const time = TimeParser.getDefaultTime();
    const timeParts = timeString.split(":");
    if (timeParts.length !== 2) {
      return void 0;
    }
    time.setHourFromString(timeParts[0]);
    time.setMinuteFromString(timeParts[1]);
    return time;
  }
  static stringify(time) {
    return `${time.getUniformHour()}:${time.getUniformMinute()}`;
  }
  static getDefaultTime() {
    return new Time();
  }
  static getDefaultHour() {
    return 0;
  }
  static getDefaultMinute() {
    return 0;
  }
};

// src/inputFields/TimeInputField.ts
var TimeInputField = class extends AbstractInputField {
  constructor(inputFieldMarkdownRenderChild, onValueChange) {
    super(inputFieldMarkdownRenderChild, onValueChange);
    this.time = TimeParser.getDefaultTime();
    this.hours = {};
    for (let i = 0; i <= 24; i++) {
      this.hours[i.toString()] = i.toString();
    }
    this.minutes = {};
    for (let i = 0; i <= 59; i++) {
      this.minutes[i.toString()] = i.toString();
    }
  }
  getHtmlElement() {
    if (!this.container) {
      throw new MetaBindInternalError("time input container is undefined");
    }
    return this.container;
  }
  getValue() {
    return TimeParser.stringify(this.time);
  }
  setValue(value) {
    var _a;
    if (!this.hourComponent) {
      throw new MetaBindInternalError("time input hour component is undefined");
    }
    if (!this.minuteComponent) {
      throw new MetaBindInternalError("time input minute component is undefined");
    }
    this.time = (_a = TimeParser.parse(value)) != null ? _a : TimeParser.getDefaultTime();
    this.hourComponent.setValue(this.time.getHour().toString());
    this.minuteComponent.setValue(this.time.getMinute().toString());
  }
  isEqualValue(value) {
    return value == this.getValue();
  }
  getDefaultValue() {
    return TimeParser.stringify(TimeParser.getDefaultTime());
  }
  render(container) {
    var _a;
    this.time = (_a = TimeParser.parse(this.inputFieldMarkdownRenderChild.getInitialValue())) != null ? _a : TimeParser.getDefaultTime();
    container.removeClass("meta-bind-plugin-input-wrapper");
    container.addClass("meta-bind-plugin-flex-input-wrapper", "meta-bind-plugin-input-element-group");
    this.hourComponent = new import_obsidian7.DropdownComponent(container);
    this.hourComponent.addOptions(this.hours);
    this.hourComponent.setValue(this.time.getHour().toString());
    this.hourComponent.onChange(this.onHourChange.bind(this));
    this.minuteComponent = new import_obsidian7.DropdownComponent(container);
    this.minuteComponent.addOptions(this.minutes);
    this.minuteComponent.setValue(this.time.getMinute().toString());
    this.minuteComponent.onChange(this.onMinuteChange.bind(this));
    this.hourComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    this.minuteComponent.selectEl.addClass("meta-bind-plugin-input-element-group-element");
    this.container = container;
  }
  onHourChange(value) {
    this.time.setHourFromString(value);
    this.onValueChange(this.getValue());
  }
  onMinuteChange(value) {
    this.time.setMinuteFromString(value);
    this.onValueChange(this.getValue());
  }
};

// src/utils/ParserUtils.ts
var EnclosingPair = class {
  constructor(openingString, closingString) {
    if (isFalsy(openingString)) {
      throw new MetaBindInternalError("opening string must not be empty");
    }
    this.openingEqualsClosing = isFalsy(closingString) || openingString === closingString;
    if (this.openingEqualsClosing) {
      this._openingString = openingString;
      this._closingString = openingString;
    } else {
      this._openingString = openingString;
      this._closingString = closingString;
    }
  }
  get openingString() {
    return this._openingString;
  }
  get closingString() {
    return this.openingEqualsClosing ? this._openingString : this._closingString;
  }
  overlaps(other) {
    return equalOrIncludes(this.openingString, other.openingString) || equalOrIncludes(this.openingString, other.closingString) || equalOrIncludes(this.closingString, other.openingString) || equalOrIncludes(this.closingString, other.closingString);
  }
  equals(other) {
    if (isFalsy(other)) {
      return false;
    }
    return this.openingString === other.openingString && this.closingString === other.closingString;
  }
  toString() {
    return JSON.stringify(this);
  }
};
var ParserUtils = class {
  static split(str, separator, ignore) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    if (!separator) {
      throw new MetaBindInternalError("separator must not be empty");
    }
    let subStr = "";
    const subStrings = [];
    if (ignore) {
      let remainingOpeningStringCount = ParserUtils.numberOfOccurrences(str, ignore.openingString);
      let remainingClosingStringCount = ParserUtils.numberOfOccurrences(str, ignore.closingString);
      let enclosingLevel = 0;
      strLoop:
        for (let i = 0; i < str.length; i++) {
          if (enclosingLevel === 0 && ParserUtils.isStringAt(str, separator, i)) {
            subStrings.push(subStr);
            subStr = "";
            i += separator.length - 1;
          } else {
            subStr += str[i];
          }
          if (ignore.openingEqualsClosing) {
            if (ParserUtils.isStringAt(str, ignore.openingString, i)) {
              if (enclosingLevel % 2 === 0 && remainingOpeningStringCount === 1) {
              } else if (enclosingLevel % 2 === 0) {
                enclosingLevel += 1;
                for (let j = 1; j < ignore.openingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              } else {
                enclosingLevel -= 1;
                for (let j = 1; j < ignore.closingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              }
              remainingOpeningStringCount -= 1;
            }
          } else {
            if (ParserUtils.isStringAt(str, ignore.openingString, i)) {
              if (remainingOpeningStringCount <= remainingClosingStringCount) {
                enclosingLevel += 1;
                for (let j = 1; j < ignore.openingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              }
              remainingOpeningStringCount -= 1;
            } else if (ParserUtils.isStringAt(str, ignore.closingString, i)) {
              if (enclosingLevel > 0) {
                enclosingLevel -= 1;
                for (let j = 1; j < ignore.closingString.length; j++) {
                  i += 1;
                  subStr += str[i];
                  if (i >= str.length) {
                    break strLoop;
                  }
                }
              }
              remainingClosingStringCount -= 1;
            }
          }
        }
    } else {
      for (let i = 0; i < str.length; i++) {
        if (ParserUtils.isStringAt(str, separator, i)) {
          subStrings.push(subStr);
          subStr = "";
          i += separator.length - 1;
        } else {
          subStr += str[i];
        }
      }
    }
    subStrings.push(subStr);
    return subStrings;
  }
  static removeInBetween(str, enclosingPair) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    let remainingOpeningStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.openingString);
    let remainingClosingStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.closingString);
    let enclosingLevel = 0;
    let subStr = "";
    for (let i = 0; i < str.length; i++) {
      if (enclosingPair.openingEqualsClosing) {
        if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
          if (enclosingLevel % 2 === 0 && remainingOpeningStringCount === 1) {
          } else if (enclosingLevel % 2 === 0) {
            enclosingLevel += 1;
            i += enclosingPair.openingString.length;
            if (i >= str.length) {
              break;
            }
          } else {
            enclosingLevel -= 1;
            i += enclosingPair.closingString.length;
            if (i >= str.length) {
              break;
            }
          }
          remainingOpeningStringCount -= 1;
        }
      } else {
        if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
          if (remainingOpeningStringCount <= remainingClosingStringCount) {
            enclosingLevel += 1;
            i += enclosingPair.openingString.length;
            if (i >= str.length) {
              break;
            }
          }
          remainingOpeningStringCount -= 1;
        } else if (ParserUtils.isStringAt(str, enclosingPair.closingString, i)) {
          if (enclosingLevel > 0) {
            enclosingLevel -= 1;
            i += enclosingPair.closingString.length;
            if (i >= str.length) {
              break;
            }
          }
          remainingClosingStringCount -= 1;
        }
      }
      if (enclosingLevel === 0) {
        subStr += str[i];
      }
    }
    return subStr;
  }
  static getInBetween(str, enclosingPair) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    let remainingOpeningStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.openingString);
    let remainingClosingStringCount = ParserUtils.numberOfOccurrences(str, enclosingPair.closingString);
    let enclosingLevel = 0;
    let subStr = "";
    const subStrings = [];
    strLoop:
      for (let i = 0; i < str.length; i++) {
        if (enclosingPair.openingEqualsClosing) {
          if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
            if (enclosingLevel % 2 === 0 && remainingOpeningStringCount === 1) {
            } else if (enclosingLevel % 2 === 0) {
              enclosingLevel += 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.openingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i >= str.length) {
                  break strLoop;
                }
              }
            } else {
              enclosingLevel -= 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.closingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i > str.length) {
                  break strLoop;
                }
              }
              subStrings.push(subStr);
              subStr = "";
            }
            remainingOpeningStringCount -= 1;
          } else {
            if (enclosingLevel >= 1) {
              subStr += str[i];
            }
          }
        } else {
          if (ParserUtils.isStringAt(str, enclosingPair.openingString, i)) {
            if (remainingOpeningStringCount <= remainingClosingStringCount) {
              enclosingLevel += 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.openingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i >= str.length) {
                  break strLoop;
                }
              }
            }
            remainingOpeningStringCount -= 1;
          } else if (ParserUtils.isStringAt(str, enclosingPair.closingString, i)) {
            if (enclosingLevel > 0) {
              enclosingLevel -= 1;
              subStr += str[i];
              for (let j = 1; j < enclosingPair.closingString.length; j++) {
                i += 1;
                subStr += str[i];
                if (i > str.length) {
                  break strLoop;
                }
              }
              if (enclosingLevel === 0) {
                subStrings.push(subStr);
                subStr = "";
              }
            }
            remainingClosingStringCount -= 1;
          } else {
            if (enclosingLevel >= 1) {
              subStr += str[i];
            }
          }
        }
      }
    if (subStrings.length === 0) {
      return "";
    } else if (subStrings.length === 1) {
      return subStrings[0].substring(enclosingPair.openingString.length, subStrings[0].length - enclosingPair.closingString.length);
    } else {
      return subStrings.map((x) => x.substring(enclosingPair.openingString.length, x.length - enclosingPair.closingString.length));
    }
  }
  static isStringAt(str, subStr, index) {
    if (index < 0) {
      throw new MetaBindInternalError("index must be greater than 0");
    }
    if (index >= str.length) {
      throw new MetaBindInternalError("index out of bounds of string");
    }
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    if (!subStr) {
      throw new MetaBindInternalError("sub string must not be empty");
    }
    for (let i = 0; i < subStr.length; i++) {
      if (str[i + index] !== subStr[i]) {
        return false;
      }
    }
    return true;
  }
  static contains(str, subStr) {
    return ParserUtils.numberOfOccurrences(str, subStr) > 0;
  }
  static numberOfOccurrences(str, subStr) {
    if (!str) {
      throw new MetaBindInternalError("string must not be empty");
    }
    if (!subStr) {
      throw new MetaBindInternalError("sub string must not be empty");
    }
    let occurrences = 0;
    for (let i = 0; i < str.length; i++) {
      if (ParserUtils.isStringAt(str, subStr, i)) {
        occurrences += 1;
      }
    }
    return occurrences;
  }
};

// src/parsers/InputFieldDeclarationParser.ts
var InputFieldType = /* @__PURE__ */ ((InputFieldType2) => {
  InputFieldType2["TOGGLE"] = "toggle";
  InputFieldType2["SLIDER"] = "slider";
  InputFieldType2["TEXT"] = "text";
  InputFieldType2["TEXT_AREA"] = "text_area";
  InputFieldType2["SELECT"] = "select";
  InputFieldType2["MULTI_SELECT"] = "multi_select";
  InputFieldType2["DATE"] = "date";
  InputFieldType2["TIME"] = "time";
  InputFieldType2["INVALID"] = "invalid";
  return InputFieldType2;
})(InputFieldType || {});
var _InputFieldDeclarationParser = class {
  static parse(fullDeclaration) {
    var _a;
    const inputFieldDeclaration = {};
    inputFieldDeclaration.fullDeclaration = fullDeclaration;
    inputFieldDeclaration.declaration = ParserUtils.getInBetween(fullDeclaration, _InputFieldDeclarationParser.squareBracesPair);
    const declarationParts = ParserUtils.split(inputFieldDeclaration.declaration, ":", _InputFieldDeclarationParser.squareBracesPair);
    inputFieldDeclaration.bindTarget = (_a = declarationParts[1]) != null ? _a : "";
    inputFieldDeclaration.isBound = isTruthy(inputFieldDeclaration.bindTarget);
    const inputFieldTypeWithArguments = declarationParts[0];
    const inputFieldTypeString = ParserUtils.removeInBetween(inputFieldTypeWithArguments, _InputFieldDeclarationParser.roundBracesPair);
    inputFieldDeclaration.inputFieldType = _InputFieldDeclarationParser.getInputFieldType(inputFieldTypeString);
    if (inputFieldDeclaration.inputFieldType === "invalid" /* INVALID */) {
      throw new MetaBindParsingError(`unknown input field type '${inputFieldTypeString}'`);
    }
    const inputFieldArgumentsString = ParserUtils.getInBetween(inputFieldTypeWithArguments, _InputFieldDeclarationParser.roundBracesPair);
    if (inputFieldArgumentsString) {
      inputFieldDeclaration.arguments = _InputFieldDeclarationParser.parseArguments(inputFieldArgumentsString, inputFieldDeclaration.inputFieldType);
    } else {
      inputFieldDeclaration.arguments = [];
    }
    return inputFieldDeclaration;
  }
  static parseArguments(inputFieldArgumentsString, inputFieldType) {
    let inputFieldArgumentStrings = ParserUtils.split(inputFieldArgumentsString, ",", _InputFieldDeclarationParser.roundBracesPair);
    inputFieldArgumentStrings = inputFieldArgumentStrings.map((x) => x.trim());
    const inputFieldArguments = [];
    for (const inputFieldArgumentString of inputFieldArgumentStrings) {
      const inputFieldArgumentName = _InputFieldDeclarationParser.extractInputFieldArgumentName(inputFieldArgumentString);
      if (inputFieldArgumentName === "class") {
        const inputFieldArgumentValue = _InputFieldDeclarationParser.extractInputFieldArgumentValue(inputFieldArgumentString);
        const inputFieldClassArgument = { name: inputFieldArgumentName, value: inputFieldArgumentValue };
        inputFieldArguments.push(inputFieldClassArgument);
      } else if (inputFieldArgumentName === "addLabels") {
        if (inputFieldType !== "slider" /* SLIDER */) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' is only applicable to slider input fields`);
        }
        inputFieldArguments.push({ name: "labels", value: true });
      } else if (inputFieldArgumentName === "minValue") {
        if (inputFieldType !== "slider" /* SLIDER */) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' is only applicable to slider input fields`);
        }
        const inputFieldArgumentValue = _InputFieldDeclarationParser.extractInputFieldArgumentValue(inputFieldArgumentString);
        const inputFieldArgumentValueAsNumber = Number.parseInt(inputFieldArgumentValue);
        if (Number.isNaN(inputFieldArgumentValueAsNumber)) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' value must be of type number`);
        }
        const inputFieldArgumentObject = { name: inputFieldArgumentName, value: inputFieldArgumentValueAsNumber };
        inputFieldArguments.push(inputFieldArgumentObject);
      } else if (inputFieldArgumentName === "maxValue") {
        if (inputFieldType !== "slider" /* SLIDER */) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' is only applicable to slider input fields`);
        }
        const inputFieldArgumentValue = _InputFieldDeclarationParser.extractInputFieldArgumentValue(inputFieldArgumentString);
        const inputFieldArgumentValueAsNumber = Number.parseInt(inputFieldArgumentValue);
        if (Number.isNaN(inputFieldArgumentValueAsNumber)) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' value must be of type number`);
        }
        const inputFieldArgumentObject = { name: inputFieldArgumentName, value: inputFieldArgumentValueAsNumber };
        inputFieldArguments.push(inputFieldArgumentObject);
      } else if (inputFieldArgumentName === "option") {
        if (inputFieldType !== "select" /* SELECT */ && inputFieldType !== "multi_select" /* MULTI_SELECT */) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' is only applicable to select and multi-select input fields`);
        }
        const inputFieldArgumentValue = _InputFieldDeclarationParser.extractInputFieldArgumentValue(inputFieldArgumentString);
        const inputFieldArgumentObject = { name: inputFieldArgumentName, value: inputFieldArgumentValue };
        inputFieldArguments.push(inputFieldArgumentObject);
      } else if (inputFieldArgumentName === "title") {
        if (inputFieldType !== "select" /* SELECT */ && inputFieldType !== "multi_select" /* MULTI_SELECT */) {
          throw new MetaBindParsingError(`argument '${inputFieldArgumentName}' is only applicable to select and multi-select input fields`);
        }
        const inputFieldArgumentValue = _InputFieldDeclarationParser.extractInputFieldArgumentValue(inputFieldArgumentString);
        const inputFieldArgumentObject = { name: inputFieldArgumentName, value: inputFieldArgumentValue };
        inputFieldArguments.push(inputFieldArgumentObject);
      } else {
        throw new MetaBindParsingError(`unknown argument '${inputFieldArgumentName}'`);
      }
    }
    return inputFieldArguments;
  }
  static extractInputFieldArgumentName(argumentString) {
    return ParserUtils.removeInBetween(argumentString, _InputFieldDeclarationParser.roundBracesPair);
  }
  static extractInputFieldArgumentValue(argumentString) {
    const argumentName = this.extractInputFieldArgumentName(argumentString);
    const argumentValue = ParserUtils.getInBetween(argumentString, _InputFieldDeclarationParser.roundBracesPair);
    if (!argumentValue) {
      throw new MetaBindParsingError(`argument '${argumentName}' requires a non empty value`);
    }
    return argumentValue;
  }
  static getInputFieldType(str) {
    for (const entry of Object.entries(InputFieldType)) {
      if (entry[1] === str) {
        return entry[1];
      }
    }
    return "invalid" /* INVALID */;
  }
};
var InputFieldDeclarationParser = _InputFieldDeclarationParser;
InputFieldDeclarationParser.roundBracesPair = new EnclosingPair("(", ")");
InputFieldDeclarationParser.squareBracesPair = new EnclosingPair("[", "]");
InputFieldDeclarationParser.curlyBracesPair = new EnclosingPair("{", "}");
InputFieldDeclarationParser.allBracesPairs = [
  _InputFieldDeclarationParser.roundBracesPair,
  _InputFieldDeclarationParser.squareBracesPair,
  _InputFieldDeclarationParser.curlyBracesPair
];

// src/inputFields/InputFieldFactory.ts
var _InputFieldFactory = class {
  static createInputField(inputFieldType, args) {
    if (inputFieldType === "toggle" /* TOGGLE */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new ToggleInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "slider" /* SLIDER */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new SliderInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "text" /* TEXT */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new TextInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "text_area" /* TEXT_AREA */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new TextAreaInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "select" /* SELECT */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new SelectInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "multi_select" /* MULTI_SELECT */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new MultiSelectInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "date" /* DATE */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new DateInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    } else if (inputFieldType === "time" /* TIME */) {
      _InputFieldFactory.checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, args.type);
      return new TimeInputField(args.inputFieldMarkdownRenderChild, args.onValueChanged);
    }
    return void 0;
  }
  static checkInputFieldMarkdownRenderChildTypeAllowed(inputFieldType, type) {
    const allowCodeBlock = _InputFieldFactory.allowCodeBlockMap[inputFieldType];
    if (type === 1 /* CODE_BLOCK */ && !allowCodeBlock.codeBlock) {
      throw new MetaBindParsingError(`'${inputFieldType}' is not allowed as code block`);
    }
    if (type === 0 /* INLINE_CODE_BLOCK */ && !allowCodeBlock.inlineCodeBlock) {
      throw new MetaBindParsingError(`'${inputFieldType}' is not allowed as inline code block`);
    }
  }
};
var InputFieldFactory = _InputFieldFactory;
InputFieldFactory.allowCodeBlockMap = {
  ["toggle" /* TOGGLE */]: { codeBlock: ToggleInputField.allowCodeBlock, inlineCodeBlock: ToggleInputField.allowInlineCodeBlock },
  ["slider" /* SLIDER */]: { codeBlock: SliderInputField.allowCodeBlock, inlineCodeBlock: SliderInputField.allowInlineCodeBlock },
  ["text" /* TEXT */]: { codeBlock: TextInputField.allowCodeBlock, inlineCodeBlock: TextInputField.allowInlineCodeBlock },
  ["text_area" /* TEXT_AREA */]: { codeBlock: TextAreaInputField.allowCodeBlock, inlineCodeBlock: TextAreaInputField.allowInlineCodeBlock },
  ["select" /* SELECT */]: { codeBlock: SelectInputField.allowCodeBlock, inlineCodeBlock: SelectInputField.allowInlineCodeBlock },
  ["multi_select" /* MULTI_SELECT */]: { codeBlock: MultiSelectInputField.allowCodeBlock, inlineCodeBlock: MultiSelectInputField.allowInlineCodeBlock },
  ["date" /* DATE */]: { codeBlock: DateInputField.allowCodeBlock, inlineCodeBlock: DateInputField.allowInlineCodeBlock },
  ["time" /* TIME */]: { codeBlock: TimeInputField.allowCodeBlock, inlineCodeBlock: TimeInputField.allowInlineCodeBlock }
};

// src/InputFieldMarkdownRenderChild.ts
var InputFieldMarkdownRenderChild2 = class extends import_obsidian8.MarkdownRenderChild {
  constructor(containerEl, type, fullDeclaration, plugin, filePath, uid) {
    super(containerEl);
    this.error = "";
    this.filePath = filePath;
    this.uid = uid;
    this.plugin = plugin;
    this.valueQueue = [];
    this.intervalCounter = 0;
    try {
      this.inputFieldDeclaration = InputFieldDeclarationParser.parse(fullDeclaration);
      if (this.inputFieldDeclaration.isBound) {
        this.parseBindTarget();
        this.metaData = this.plugin.getMetaDataForFile(this.bindTargetFile);
      }
      this.inputField = InputFieldFactory.createInputField(this.inputFieldDeclaration.inputFieldType, {
        type,
        inputFieldMarkdownRenderChild: this,
        onValueChanged: this.pushToValueQueue.bind(this)
      });
      this.limitInterval = window.setInterval(() => this.applyValueQueueToMetadata(), this.plugin.settings.syncInterval);
    } catch (e) {
      this.error = e.message;
      Logger.logWarning(e);
    }
  }
  parseBindTarget() {
    if (!this.inputFieldDeclaration) {
      throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not parse bind target");
    }
    const bindTargetParts = this.inputFieldDeclaration.bindTarget.split("#");
    if (bindTargetParts.length === 1) {
      this.bindTargetMetadataField = this.inputFieldDeclaration.bindTarget;
      const files = this.plugin.getFilesByName(this.filePath);
      if (files.length === 0) {
        throw new MetaBindBindTargetError("bind target file not found");
      } else if (files.length === 1) {
        this.bindTargetFile = files[0];
      } else {
        throw new MetaBindBindTargetError("bind target resolves to multiple files, please also specify the file path");
      }
    } else if (bindTargetParts.length === 2) {
      this.bindTargetMetadataField = bindTargetParts[1];
      const files = this.plugin.getFilesByName(bindTargetParts[0]);
      if (files.length === 0) {
        throw new MetaBindBindTargetError("bind target file not found");
      } else if (files.length === 1) {
        this.bindTargetFile = files[0];
      } else {
        throw new MetaBindBindTargetError("bind target resolves to multiple files, please also specify the file path");
      }
    } else {
      throw new MetaBindBindTargetError("bind target may only contain one '#' to specify the metadata field");
    }
  }
  applyValueQueueToMetadata() {
    return __async(this, null, function* () {
      if (!this.inputFieldDeclaration) {
        throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not update metadata");
      }
      if (!this.inputFieldDeclaration.isBound) {
        return;
      }
      if (!this.bindTargetMetadataField || !this.bindTargetFile) {
        throw new MetaBindInternalError("bindTargetMetadataField or bindTargetFile is undefined, can not update metadata");
      }
      if (this.valueQueue.length > 0) {
        yield this.plugin.updateMetaData(this.bindTargetMetadataField, this.valueQueue.at(-1), this.bindTargetFile);
        this.valueQueue = [];
      }
    });
  }
  pushToValueQueue(value) {
    return __async(this, null, function* () {
      var _a;
      if ((_a = this.inputFieldDeclaration) == null ? void 0 : _a.isBound) {
        this.valueQueue.push(value);
      }
    });
  }
  updateValue(value) {
    if (!this.inputField) {
      throw new MetaBindInternalError("inputField is undefined, can not update value");
    }
    if (value == null) {
      value = this.inputField.getDefaultValue();
    }
    if (!this.inputField.isEqualValue(value) && this.valueQueue.length === 0) {
      Logger.logDebug(`updating input field ${this.uid} to`, value);
      this.inputField.setValue(value);
    }
  }
  getInitialValue() {
    var _a, _b, _c, _d;
    if ((_a = this.inputFieldDeclaration) == null ? void 0 : _a.isBound) {
      return (_d = this.metaData[(_b = this.bindTargetMetadataField) != null ? _b : ""]) != null ? _d : (_c = this.inputField) == null ? void 0 : _c.getDefaultValue();
    }
  }
  getArguments(name) {
    if (!this.inputFieldDeclaration) {
      throw new MetaBindInternalError("inputFieldDeclaration is undefined, can not retrieve arguments");
    }
    return this.inputFieldDeclaration.arguments.filter((x) => x.name === name);
  }
  getArgument(name) {
    return this.getArguments(name).at(0);
  }
  onload() {
    return __async(this, null, function* () {
      Logger.logDebug("load", this);
      this.metaData = yield this.metaData;
      const container = this.containerEl.createDiv();
      container.addClass("meta-bind-plugin-input-wrapper");
      this.containerEl.addClass("meta-bind-plugin-input");
      if (this.error) {
        container.innerText = ` -> ERROR: ${this.error}`;
        container.addClass("meta-bind-plugin-error");
        this.containerEl.appendChild(container);
        return;
      }
      if (!this.inputField) {
        container.innerText = ` -> ERROR: ${new MetaBindInternalError("input field is undefined and error is empty").message}`;
        container.addClass("meta-bind-plugin-error");
        this.containerEl.appendChild(container);
        return;
      }
      this.plugin.registerInputFieldMarkdownRenderChild(this);
      this.inputField.render(container);
      const classArgument = this.getArguments("class");
      if (classArgument) {
        this.inputField.getHtmlElement().addClasses(classArgument.map((x) => x.value));
      }
      this.containerEl.empty();
      this.containerEl.appendChild(container);
    });
  }
  onunload() {
    Logger.logDebug("unload", this);
    this.plugin.unregisterInputFieldMarkdownRenderChild(this);
    super.onunload();
    window.clearInterval(this.limitInterval);
  }
};

// src/main.ts
var MetaBindPlugin = class extends import_obsidian9.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      Logger.devMode = this.settings.devMode;
      DateParser.dateFormat = this.settings.dateFormat;
      this.activeMarkdownInputFields = [];
      this.markDownInputFieldIndex = 0;
      this.registerMarkdownPostProcessor((element, context) => {
        const codeBlocks = element.querySelectorAll("code");
        for (let index = 0; index < codeBlocks.length; index++) {
          const codeBlock = codeBlocks.item(index);
          const text = codeBlock.innerText;
          const isInputField = text.startsWith("INPUT[") && text.endsWith("]");
          if (isInputField) {
            context.addChild(new InputFieldMarkdownRenderChild2(codeBlock, 0 /* INLINE_CODE_BLOCK */, text, this, context.sourcePath, this.markDownInputFieldIndex));
            this.markDownInputFieldIndex += 1;
          }
        }
      });
      this.registerMarkdownCodeBlockProcessor("meta-bind", (source, el, ctx) => {
        const codeBlock = el;
        const text = source.replace(/\n/g, "");
        const isInputField = text.startsWith("INPUT[") && text.endsWith("]");
        if (isInputField) {
          ctx.addChild(new InputFieldMarkdownRenderChild2(codeBlock, 1 /* CODE_BLOCK */, text, this, ctx.sourcePath, this.markDownInputFieldIndex));
          this.markDownInputFieldIndex += 1;
        }
      });
      this.registerEvent(this.app.vault.on("modify", (abstractFile) => __async(this, null, function* () {
        if (abstractFile instanceof import_obsidian9.TFile) {
          yield this.updateMarkdownInputFieldsOnFileChange(abstractFile);
        }
      })));
      this.addSettingTab(new MetaBindSettingTab(this.app, this));
    });
  }
  onunload() {
    for (const activeMarkdownInputField of this.activeMarkdownInputFields) {
      activeMarkdownInputField.unload();
    }
  }
  registerInputFieldMarkdownRenderChild(inputFieldMarkdownRenderChild) {
    this.activeMarkdownInputFields.push(inputFieldMarkdownRenderChild);
  }
  unregisterInputFieldMarkdownRenderChild(inputFieldMarkdownRenderChild) {
    this.activeMarkdownInputFields = this.activeMarkdownInputFields.filter((x) => x.uid !== inputFieldMarkdownRenderChild.uid);
  }
  updateMarkdownInputFieldsOnFileChange(file) {
    return __async(this, null, function* () {
      var _a;
      let metadata = void 0;
      for (const activeMarkdownInputField of this.activeMarkdownInputFields) {
        if (!((_a = activeMarkdownInputField.inputFieldDeclaration) == null ? void 0 : _a.isBound) || !activeMarkdownInputField.bindTargetFile || !activeMarkdownInputField.bindTargetMetadataField) {
          continue;
        }
        if (activeMarkdownInputField.bindTargetFile.path === file.path) {
          if (metadata === void 0) {
            metadata = yield this.getMetaDataForFile(file);
          }
          activeMarkdownInputField.updateValue(metadata[activeMarkdownInputField.bindTargetMetadataField]);
        }
      }
    });
  }
  updateMetaData(key, value, file) {
    return __async(this, null, function* () {
      Logger.logDebug(`updating `, key, `: `, value, ` in '${file.path}'`);
      if (!file) {
        console.log("no file");
        return;
      }
      let fileContent = yield this.app.vault.read(file);
      const regExp = new RegExp("^(---)\\n[\\s\\S]*\\n---");
      fileContent = fileContent.replace(regExp, "");
      const metadata = yield this.getMetaDataForFile(file);
      if (!metadata) {
        return;
      }
      metadata[key] = value;
      fileContent = `---
${(0, import_obsidian9.stringifyYaml)(metadata)}---` + fileContent;
      yield this.app.vault.modify(file, fileContent);
    });
  }
  getFilesByName(name) {
    const fileNameIsPath = isPath(name);
    const processedFileName = fileNameIsPath ? removeFileEnding(name) : getFileName(removeFileEnding(name));
    const allFiles = this.app.vault.getFiles();
    const files = [];
    for (const file of allFiles) {
      if (fileNameIsPath) {
        if (removeFileEnding(file.path) === processedFileName) {
          files.push(file);
        }
      } else {
        if (getFileName(removeFileEnding(file.name)) === processedFileName) {
          files.push(file);
        }
      }
    }
    return files;
  }
  getMetaDataForFile(file) {
    return __async(this, null, function* () {
      let metadata;
      const fileContent = yield this.app.vault.read(file);
      const regExp = new RegExp("^(---)\\n[\\s\\S]*\\n---");
      const frontMatterRegExpResult = regExp.exec(fileContent);
      if (!frontMatterRegExpResult) {
        return {};
      }
      let frontMatter = frontMatterRegExpResult[0];
      if (!frontMatter) {
        return {};
      }
      frontMatter = frontMatter.substring(4);
      frontMatter = frontMatter.substring(0, frontMatter.length - 3);
      metadata = (0, import_obsidian9.parseYaml)(frontMatter);
      if (!metadata) {
        metadata = {};
      }
      return metadata;
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      DateParser.dateFormat = this.settings.dateFormat;
      Logger.devMode = this.settings.devMode;
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vc3JjL21haW4udHMiLCAiLi4vLi4vLi4vLi4vc3JjL3NldHRpbmdzL1NldHRpbmdzLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy91dGlscy9VdGlscy50cyIsICIuLi8uLi8uLi8uLi9zcmMvcGFyc2Vycy9EYXRlUGFyc2VyLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9JbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC50cyIsICIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvTG9nZ2VyLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9pbnB1dEZpZWxkcy9BYnN0cmFjdElucHV0RmllbGQudHMiLCAiLi4vLi4vLi4vLi4vc3JjL2lucHV0RmllbGRzL1RvZ2dsZUlucHV0RmllbGQudHMiLCAiLi4vLi4vLi4vLi4vc3JjL2lucHV0RmllbGRzL1RleHRJbnB1dEZpZWxkLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9pbnB1dEZpZWxkcy9TbGlkZXJJbnB1dEZpZWxkLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9pbnB1dEZpZWxkcy9UZXh0QXJlYUlucHV0RmllbGQudHMiLCAiLi4vLi4vLi4vLi4vc3JjL2lucHV0RmllbGRzL1NlbGVjdElucHV0RmllbGRFbGVtZW50LnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9pbnB1dEZpZWxkcy9TZWxlY3RJbnB1dEZpZWxkLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9pbnB1dEZpZWxkcy9NdWx0aVNlbGVjdElucHV0RmllbGQudHMiLCAiLi4vLi4vLi4vLi4vc3JjL2lucHV0RmllbGRzL0RhdGVJbnB1dEZpZWxkLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9pbnB1dEZpZWxkcy9UaW1lSW5wdXRGaWVsZC50cyIsICIuLi8uLi8uLi8uLi9zcmMvcGFyc2Vycy9UaW1lUGFyc2VyLnRzIiwgIi4uLy4uLy4uLy4uL3NyYy91dGlscy9QYXJzZXJVdGlscy50cyIsICIuLi8uLi8uLi8uLi9zcmMvcGFyc2Vycy9JbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIudHMiLCAiLi4vLi4vLi4vLi4vc3JjL2lucHV0RmllbGRzL0lucHV0RmllbGRGYWN0b3J5LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge3BhcnNlWWFtbCwgUGx1Z2luLCBzdHJpbmdpZnlZYW1sLCBURmlsZX0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQge0RFRkFVTFRfU0VUVElOR1MsIE1ldGFCaW5kUGx1Z2luU2V0dGluZ3MsIE1ldGFCaW5kU2V0dGluZ1RhYn0gZnJvbSAnLi9zZXR0aW5ncy9TZXR0aW5ncyc7XHJcbmltcG9ydCB7SW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQsIElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZX0gZnJvbSAnLi9JbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCc7XHJcbmltcG9ydCB7Z2V0RmlsZU5hbWUsIGlzUGF0aCwgcmVtb3ZlRmlsZUVuZGluZ30gZnJvbSAnLi91dGlscy9VdGlscyc7XHJcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuL3V0aWxzL0xvZ2dlcic7XHJcbmltcG9ydCB7RGF0ZVBhcnNlcn0gZnJvbSAnLi9wYXJzZXJzL0RhdGVQYXJzZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWV0YUJpbmRQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdC8vIEB0cy1pZ25vcmUgZGVmaW5lZCBpbiBgb25sb2FkYFxyXG5cdHNldHRpbmdzOiBNZXRhQmluZFBsdWdpblNldHRpbmdzO1xyXG5cclxuXHQvLyBAdHMtaWdub3JlIGRlZmluZWQgaW4gYG9ubG9hZGBcclxuXHRhY3RpdmVNYXJrZG93bklucHV0RmllbGRzOiBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZFtdO1xyXG5cdC8vIEB0cy1pZ25vcmUgZGVmaW5lZCBpbiBgb25sb2FkYFxyXG5cdG1hcmtEb3duSW5wdXRGaWVsZEluZGV4OiBudW1iZXI7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0TG9nZ2VyLmRldk1vZGUgPSB0aGlzLnNldHRpbmdzLmRldk1vZGU7XHJcblx0XHREYXRlUGFyc2VyLmRhdGVGb3JtYXQgPSB0aGlzLnNldHRpbmdzLmRhdGVGb3JtYXQ7XHJcblxyXG5cdFx0dGhpcy5hY3RpdmVNYXJrZG93bklucHV0RmllbGRzID0gW107XHJcblx0XHR0aGlzLm1hcmtEb3duSW5wdXRGaWVsZEluZGV4ID0gMDtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKChlbGVtZW50LCBjb250ZXh0KSA9PiB7XHJcblx0XHRcdGNvbnN0IGNvZGVCbG9ja3MgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NvZGUnKTtcclxuXHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvZGVCbG9ja3MubGVuZ3RoOyBpbmRleCsrKSB7XHJcblx0XHRcdFx0Y29uc3QgY29kZUJsb2NrID0gY29kZUJsb2Nrcy5pdGVtKGluZGV4KTtcclxuXHRcdFx0XHRjb25zdCB0ZXh0ID0gY29kZUJsb2NrLmlubmVyVGV4dDtcclxuXHRcdFx0XHRjb25zdCBpc0lucHV0RmllbGQgPSB0ZXh0LnN0YXJ0c1dpdGgoJ0lOUFVUWycpICYmIHRleHQuZW5kc1dpdGgoJ10nKTtcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhjb250ZXh0LnNvdXJjZVBhdGgpO1xyXG5cdFx0XHRcdGlmIChpc0lucHV0RmllbGQpIHtcclxuXHRcdFx0XHRcdGNvbnRleHQuYWRkQ2hpbGQobmV3IElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkKGNvZGVCbG9jaywgSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGRUeXBlLklOTElORV9DT0RFX0JMT0NLLCB0ZXh0LCB0aGlzLCBjb250ZXh0LnNvdXJjZVBhdGgsIHRoaXMubWFya0Rvd25JbnB1dEZpZWxkSW5kZXgpKTtcclxuXHRcdFx0XHRcdHRoaXMubWFya0Rvd25JbnB1dEZpZWxkSW5kZXggKz0gMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcignbWV0YS1iaW5kJywgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xyXG5cdFx0XHRjb25zdCBjb2RlQmxvY2sgPSBlbDtcclxuXHRcdFx0Y29uc3QgdGV4dCA9IHNvdXJjZS5yZXBsYWNlKC9cXG4vZywgJycpO1xyXG5cdFx0XHRjb25zdCBpc0lucHV0RmllbGQgPSB0ZXh0LnN0YXJ0c1dpdGgoJ0lOUFVUWycpICYmIHRleHQuZW5kc1dpdGgoJ10nKTtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2coY29udGV4dC5zb3VyY2VQYXRoKTtcclxuXHRcdFx0aWYgKGlzSW5wdXRGaWVsZCkge1xyXG5cdFx0XHRcdGN0eC5hZGRDaGlsZChuZXcgSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQoY29kZUJsb2NrLCBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZFR5cGUuQ09ERV9CTE9DSywgdGV4dCwgdGhpcywgY3R4LnNvdXJjZVBhdGgsIHRoaXMubWFya0Rvd25JbnB1dEZpZWxkSW5kZXgpKTtcclxuXHRcdFx0XHR0aGlzLm1hcmtEb3duSW5wdXRGaWVsZEluZGV4ICs9IDE7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignbW9kaWZ5JywgYXN5bmMgYWJzdHJhY3RGaWxlID0+IHtcclxuXHRcdFx0aWYgKGFic3RyYWN0RmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy51cGRhdGVNYXJrZG93bklucHV0RmllbGRzT25GaWxlQ2hhbmdlKGFic3RyYWN0RmlsZSBhcyBURmlsZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pKTtcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IE1ldGFCaW5kU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKTogdm9pZCB7XHJcblx0XHRmb3IgKGNvbnN0IGFjdGl2ZU1hcmtkb3duSW5wdXRGaWVsZCBvZiB0aGlzLmFjdGl2ZU1hcmtkb3duSW5wdXRGaWVsZHMpIHtcclxuXHRcdFx0YWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkLnVubG9hZCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmVnaXN0ZXJJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZChpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZDogSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQpOiB2b2lkIHtcclxuXHRcdHRoaXMuYWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkcy5wdXNoKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkKTtcclxuXHR9XHJcblxyXG5cdHVucmVnaXN0ZXJJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZChpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZDogSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQpOiB2b2lkIHtcclxuXHRcdHRoaXMuYWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkcyA9IHRoaXMuYWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkcy5maWx0ZXIoeCA9PiB4LnVpZCAhPT0gaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQudWlkKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHVwZGF0ZU1hcmtkb3duSW5wdXRGaWVsZHNPbkZpbGVDaGFuZ2UoZmlsZTogVEZpbGUpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGxldCBtZXRhZGF0YTogYW55ID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdGZvciAoY29uc3QgYWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkIG9mIHRoaXMuYWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkcykge1xyXG5cdFx0XHRpZiAoIWFjdGl2ZU1hcmtkb3duSW5wdXRGaWVsZC5pbnB1dEZpZWxkRGVjbGFyYXRpb24/LmlzQm91bmQgfHwgIWFjdGl2ZU1hcmtkb3duSW5wdXRGaWVsZC5iaW5kVGFyZ2V0RmlsZSB8fCAhYWN0aXZlTWFya2Rvd25JbnB1dEZpZWxkLmJpbmRUYXJnZXRNZXRhZGF0YUZpZWxkKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChhY3RpdmVNYXJrZG93bklucHV0RmllbGQuYmluZFRhcmdldEZpbGUucGF0aCA9PT0gZmlsZS5wYXRoKSB7XHJcblx0XHRcdFx0aWYgKG1ldGFkYXRhID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdG1ldGFkYXRhID0gYXdhaXQgdGhpcy5nZXRNZXRhRGF0YUZvckZpbGUoZmlsZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGFjdGl2ZU1hcmtkb3duSW5wdXRGaWVsZC51cGRhdGVWYWx1ZShtZXRhZGF0YVthY3RpdmVNYXJrZG93bklucHV0RmllbGQuYmluZFRhcmdldE1ldGFkYXRhRmllbGRdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgdXBkYXRlTWV0YURhdGEoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIGZpbGU6IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRMb2dnZXIubG9nRGVidWcoYHVwZGF0aW5nIGAsIGtleSwgYDogYCwgdmFsdWUsIGAgaW4gJyR7ZmlsZS5wYXRofSdgKTtcclxuXHJcblx0XHRpZiAoIWZpbGUpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ25vIGZpbGUnKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBmaWxlQ29udGVudDogc3RyaW5nID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdGNvbnN0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoJ14oLS0tKVxcXFxuW1xcXFxzXFxcXFNdKlxcXFxuLS0tJyk7XHJcblx0XHRmaWxlQ29udGVudCA9IGZpbGVDb250ZW50LnJlcGxhY2UocmVnRXhwLCAnJyk7XHJcblxyXG5cdFx0Y29uc3QgbWV0YWRhdGE6IGFueSA9IGF3YWl0IHRoaXMuZ2V0TWV0YURhdGFGb3JGaWxlKGZpbGUpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2cobWV0YWRhdGEpO1xyXG5cdFx0aWYgKCFtZXRhZGF0YSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bWV0YWRhdGFba2V5XSA9IHZhbHVlO1xyXG5cdFx0Ly8gY29uc29sZS5sb2cobWV0YWRhdGEpO1xyXG5cclxuXHRcdGZpbGVDb250ZW50ID0gYC0tLVxcbiR7c3RyaW5naWZ5WWFtbChtZXRhZGF0YSl9LS0tYCArIGZpbGVDb250ZW50O1xyXG5cdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGZpbGVDb250ZW50KTtcclxuXHR9XHJcblxyXG5cdGdldEZpbGVzQnlOYW1lKG5hbWU6IHN0cmluZyk6IFRGaWxlW10ge1xyXG5cdFx0Ly8gY29uc29sZS5sb2coZ2V0RmlsZU5hbWUocmVtb3ZlRmlsZUVuZGluZyhuYW1lKSkpXHJcblx0XHRjb25zdCBmaWxlTmFtZUlzUGF0aCA9IGlzUGF0aChuYW1lKTtcclxuXHRcdGNvbnN0IHByb2Nlc3NlZEZpbGVOYW1lID0gZmlsZU5hbWVJc1BhdGggPyByZW1vdmVGaWxlRW5kaW5nKG5hbWUpIDogZ2V0RmlsZU5hbWUocmVtb3ZlRmlsZUVuZGluZyhuYW1lKSk7XHJcblxyXG5cdFx0Y29uc3QgYWxsRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpO1xyXG5cdFx0Y29uc3QgZmlsZXM6IFRGaWxlW10gPSBbXTtcclxuXHRcdGZvciAoY29uc3QgZmlsZSBvZiBhbGxGaWxlcykge1xyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhyZW1vdmVGaWxlRW5kaW5nKGZpbGUucGF0aCkpO1xyXG5cdFx0XHRpZiAoZmlsZU5hbWVJc1BhdGgpIHtcclxuXHRcdFx0XHRpZiAocmVtb3ZlRmlsZUVuZGluZyhmaWxlLnBhdGgpID09PSBwcm9jZXNzZWRGaWxlTmFtZSkge1xyXG5cdFx0XHRcdFx0ZmlsZXMucHVzaChmaWxlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKGdldEZpbGVOYW1lKHJlbW92ZUZpbGVFbmRpbmcoZmlsZS5uYW1lKSkgPT09IHByb2Nlc3NlZEZpbGVOYW1lKSB7XHJcblx0XHRcdFx0XHRmaWxlcy5wdXNoKGZpbGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmaWxlcztcclxuXHR9XHJcblxyXG5cdGFzeW5jIGdldE1ldGFEYXRhRm9yRmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8YW55PiB7XHJcblx0XHQvLyBMb2dnZXIubG9nRGVidWcoYHJlYWRpbmcgbWV0YWRhdGEgZm9yICR7ZmlsZS5wYXRofWApO1xyXG5cdFx0bGV0IG1ldGFkYXRhOiBhbnk7XHJcblxyXG5cdFx0Y29uc3QgZmlsZUNvbnRlbnQ6IHN0cmluZyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcblx0XHRjb25zdCByZWdFeHAgPSBuZXcgUmVnRXhwKCdeKC0tLSlcXFxcbltcXFxcc1xcXFxTXSpcXFxcbi0tLScpO1xyXG5cdFx0Y29uc3QgZnJvbnRNYXR0ZXJSZWdFeHBSZXN1bHQgPSByZWdFeHAuZXhlYyhmaWxlQ29udGVudCk7XHJcblx0XHRpZiAoIWZyb250TWF0dGVyUmVnRXhwUmVzdWx0KSB7XHJcblx0XHRcdHJldHVybiB7fTtcclxuXHRcdH1cclxuXHRcdGxldCBmcm9udE1hdHRlciA9IGZyb250TWF0dGVyUmVnRXhwUmVzdWx0WzBdO1xyXG5cdFx0aWYgKCFmcm9udE1hdHRlcikge1xyXG5cdFx0XHRyZXR1cm4ge307XHJcblx0XHR9XHJcblx0XHQvLyBjb25zb2xlLmxvZyhmcm9udE1hdHRlcik7XHJcblx0XHRmcm9udE1hdHRlciA9IGZyb250TWF0dGVyLnN1YnN0cmluZyg0KTtcclxuXHRcdGZyb250TWF0dGVyID0gZnJvbnRNYXR0ZXIuc3Vic3RyaW5nKDAsIGZyb250TWF0dGVyLmxlbmd0aCAtIDMpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2coZnJvbnRNYXR0ZXIpO1xyXG5cclxuXHRcdG1ldGFkYXRhID0gcGFyc2VZYW1sKGZyb250TWF0dGVyKTtcclxuXHJcblx0XHRpZiAoIW1ldGFkYXRhKSB7XHJcblx0XHRcdG1ldGFkYXRhID0ge307XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9jb25zb2xlLmxvZyhtZXRhZGF0YSk7XHJcblxyXG5cdFx0cmV0dXJuIG1ldGFkYXRhO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHREYXRlUGFyc2VyLmRhdGVGb3JtYXQgPSB0aGlzLnNldHRpbmdzLmRhdGVGb3JtYXQ7XHJcblx0XHRMb2dnZXIuZGV2TW9kZSA9IHRoaXMuc2V0dGluZ3MuZGV2TW9kZTtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQge0FwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZ30gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgTWV0YUJpbmRQbHVnaW4gZnJvbSAnLi4vbWFpbic7XHJcbmltcG9ydCB7RGF0ZUZvcm1hdH0gZnJvbSAnLi4vcGFyc2Vycy9EYXRlUGFyc2VyJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWV0YUJpbmRQbHVnaW5TZXR0aW5ncyB7XHJcblx0ZGV2TW9kZTogYm9vbGVhbjtcclxuXHRkYXRlRm9ybWF0OiBEYXRlRm9ybWF0O1xyXG5cdHN5bmNJbnRlcnZhbDogbnVtYmVyO1xyXG5cdG1heFN5bmNJbnRlcnZhbDogbnVtYmVyO1xyXG5cdG1pblN5bmNJbnRlcnZhbDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTWV0YUJpbmRQbHVnaW5TZXR0aW5ncyA9IHtcclxuXHRkZXZNb2RlOiBmYWxzZSxcclxuXHRkYXRlRm9ybWF0OiBEYXRlRm9ybWF0LlVTLFxyXG5cdHN5bmNJbnRlcnZhbDogMjAwLFxyXG5cdG1pblN5bmNJbnRlcnZhbDogNTAsXHJcblx0bWF4U3luY0ludGVydmFsOiAxMDAwLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIE1ldGFCaW5kU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogTWV0YUJpbmRQbHVnaW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1ldGFCaW5kUGx1Z2luKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnTWV0YSBCaW5kIFBsdWdpbiBTZXR0aW5ncyd9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1N5bmMgSW50ZXJ2YWwnKVxyXG5cdFx0XHQuc2V0RGVzYyhgVGhlIGludGVydmFsIGluIG1pbGxpLXNlY29uZHMgYmV0d2VlbiBkaXNrIHdyaXRlcy4gQ2hhbmdpbmcgdGhpcyBudW1iZXIgaXMgbm90IHJlY29tbWVuZGVkIGV4Y2VwdCBpZiB5b3VyIGhhcmQgZHJpdmUgaXMgZXhjZXB0aW9uYWxseSBzbG93LiBTdGFuZGFyZDogJHtERUZBVUxUX1NFVFRJTkdTLnN5bmNJbnRlcnZhbH07IE1pbmltdW06ICR7REVGQVVMVF9TRVRUSU5HUy5taW5TeW5jSW50ZXJ2YWx9OyBNYXhpbXVtOiAke0RFRkFVTFRfU0VUVElOR1MubWF4U3luY0ludGVydmFsfWApXHJcblx0XHRcdC5hZGRUZXh0KGNiID0+IHtcclxuXHRcdFx0XHRjYi5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jSW50ZXJ2YWwudG9TdHJpbmcoKSk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoZGF0YSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jSW50ZXJ2YWwgPSBOdW1iZXIucGFyc2VJbnQoZGF0YSk7XHJcblx0XHRcdFx0XHRpZiAoTnVtYmVyLmlzTmFOKHRoaXMucGx1Z2luLnNldHRpbmdzLnN5bmNJbnRlcnZhbCkpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0ludGVydmFsID0gREVGQVVMVF9TRVRUSU5HUy5zeW5jSW50ZXJ2YWw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0ludGVydmFsIDwgREVGQVVMVF9TRVRUSU5HUy5taW5TeW5jSW50ZXJ2YWwpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0ludGVydmFsID0gREVGQVVMVF9TRVRUSU5HUy5taW5TeW5jSW50ZXJ2YWw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0ludGVydmFsID4gREVGQVVMVF9TRVRUSU5HUy5tYXhTeW5jSW50ZXJ2YWwpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0ludGVydmFsID0gREVGQVVMVF9TRVRUSU5HUy5tYXhTeW5jSW50ZXJ2YWw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdEYXRlIGZvcm1hdCcpXHJcblx0XHRcdC5zZXREZXNjKGBUaGUgZGF0ZSBmb3JtYXQgdG8gYmUgdXNlZCBieSB0aGlzIHBsdWdpbi5gKVxyXG5cdFx0XHQuYWRkRHJvcGRvd24oY2IgPT4ge1xyXG5cdFx0XHRcdGNiLmFkZE9wdGlvbnMoe1xyXG5cdFx0XHRcdFx0J3VzJzogJ1VTIGRhdGUgZm9ybWF0ICgxLzMwLzIwMjIpJyxcclxuXHRcdFx0XHRcdCdldSc6ICdFVSBkYXRlIGZvcm1hdCAoMzAvMS8yMDIyKScsXHJcblx0XHRcdFx0XHQnZl91cyc6ICdVUyBkYXRlIGZvcm1hdCAoSmFudWFyeSAzMCwgMjAyMiknLFxyXG5cdFx0XHRcdFx0J2ZzX3VzJzogJ1VTIGRhdGUgZm9ybWF0IChKYW4gMzAsIDIwMjIpJyxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRjYi5vbkNoYW5nZShkYXRhID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmRhdGVGb3JtYXQgPSBkYXRhIGFzIERhdGVGb3JtYXQ7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdEZXYgTW9kZScpXHJcblx0XHRcdC5zZXREZXNjKCdFbmFibGUgZGV2IG1vZGUuIE5vdCByZWNvbW1lbmRlZCB1bmxlc3MgeW91IHdhbnQgdG8gZGVidWcgdGhpcyBwbHVnaW4uJylcclxuXHRcdFx0LmFkZFRvZ2dsZShjYiA9PiB7XHJcblx0XHRcdFx0Y2Iuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGV2TW9kZSk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoZGF0YSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXZNb2RlID0gZGF0YTtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHR9XHJcbn1cclxuIiwgImV4cG9ydCBjbGFzcyBNZXRhQmluZEludGVybmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcblx0Y29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblx0XHRzdXBlcihgW01CX0lOVEVSTkFMX0VSUk9SIC0gcGxlYXNlIHJlcG9ydCB0aGlzIGVycm9yIGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL21Qcm9qZWN0c0NvZGUvb2JzaWRpYW4tbWV0YS1iaW5kLXBsdWdpbi9pc3N1ZXNdICR7bWVzc2FnZX1gKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZXRhQmluZFBhcnNpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuXHRjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHRcdHN1cGVyKGBbTUJfUEFSU0lOR19FUlJPUl0gJHttZXNzYWdlfWApO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1ldGFCaW5kQmluZFRhcmdldEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cdFx0c3VwZXIoYFtNQl9CSU5EX1RBUkdFVF9FUlJPUl0gJHttZXNzYWdlfWApO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGZpbGUgbmFtZSBmcm9tIGEgcGF0aFxyXG4gKlxyXG4gKiBAcGFyYW0gcGF0aFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVOYW1lKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0cmV0dXJuIHBhdGguc3BsaXQoJy8nKS5hdCgtMSkgPz8gcGF0aDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIHBhdGggaXMgYSBwYXRoIG9yIGEgZmlsZSBuYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSBwYXRoXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNQYXRoKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBwYXRoLnNwbGl0KCcvJykubGVuZ3RoID4gMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgdGhlIGZpbGUgZW5kaW5nIG9mIGEgZmlsZSBuYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSBmaWxlTmFtZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZpbGVFbmRpbmcoZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0Y29uc3QgZmlsZU5hbWVQYXJ0cyA9IGZpbGVOYW1lLnNwbGl0KCcuJyk7XHJcblx0aWYgKGZpbGVOYW1lUGFydHMubGVuZ3RoID09PSAxKSB7XHJcblx0XHRyZXR1cm4gZmlsZU5hbWU7XHJcblx0fSBlbHNlIHtcclxuXHRcdGxldCBuZXdGaWxlTmFtZSA9IGZpbGVOYW1lUGFydHNbMF07XHJcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IGZpbGVOYW1lUGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcblx0XHRcdG5ld0ZpbGVOYW1lICs9ICcuJyArIGZpbGVOYW1lUGFydHNbaV07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbmV3RmlsZU5hbWU7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQ2xhbXAsIHVudXNlZFxyXG4gKlxyXG4gKiBAcGFyYW0gbnVtXHJcbiAqIEBwYXJhbSBtaW5cclxuICogQHBhcmFtIG1heFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKG51bTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG5cdHJldHVybiBNYXRoLm1pbihNYXRoLm1heChudW0sIG1pbiksIG1heCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBqcyBjYW4ndCBldmVuIGltcGxlbWVudCBtb2R1bG8gY29ycmVjdGx5Li4uXHJcbiAqXHJcbiAqIEBwYXJhbSBuXHJcbiAqIEBwYXJhbSBtXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbW9kKG46IG51bWJlciwgbTogbnVtYmVyKTogbnVtYmVyIHtcclxuXHRyZXR1cm4gKChuICUgbSkgKyBtKSAlIG07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgMiBhcnJheXMgYXJlIGVxdWFsLCB0aGUgYXJyYXlzIHNob3VsZCBoYXZlIHRoZSBzYW1lIGRhdGF0eXBlXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnIxXHJcbiAqIEBwYXJhbSBhcnIyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlFcXVhbHMoYXJyMTogYW55W10sIGFycjI6IGFueVtdKTogYm9vbGVhbiB7XHJcblx0aWYgKGFycjEubGVuZ3RoICE9PSBhcnIyLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0Zm9yIChjb25zdCBhcnIxRWxlbWVudCBvZiBhcnIxKSB7XHJcblx0XHRpZiAoIWFycjIuY29udGFpbnMoYXJyMUVsZW1lbnQpKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogVGVtcGxhdGUgXCJlbmdpbmVcIiBmcm9tIG15IG1lZGlhIGRiIHBsdWdpblxyXG4gKlxyXG4gKiBAcGFyYW0gdGVtcGxhdGVcclxuICogQHBhcmFtIGRhdGFNb2RlbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VUYWdzKHRlbXBsYXRlOiBzdHJpbmcsIGRhdGFNb2RlbDogYW55KTogc3RyaW5nIHtcclxuXHRjb25zdCByZXNvbHZlZFRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShuZXcgUmVnRXhwKCd7ey4qP319JywgJ2cnKSwgKG1hdGNoOiBzdHJpbmcpID0+IHJlcGxhY2VUYWcobWF0Y2gsIGRhdGFNb2RlbCkpO1xyXG5cclxuXHRyZXR1cm4gcmVzb2x2ZWRUZW1wbGF0ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRha2VzIGluIGEgdGVtcGxhdGUgbWF0Y2ggYW5kIHJldHVybnMgdGhlIHJlcGxhY2VtZW50IGRhdGFcclxuICpcclxuICogQHBhcmFtIG1hdGNoXHJcbiAqIEBwYXJhbSBkYXRhTW9kZWxcclxuICovXHJcbmZ1bmN0aW9uIHJlcGxhY2VUYWcobWF0Y2g6IHN0cmluZywgZGF0YU1vZGVsOiBhbnkpOiBzdHJpbmcge1xyXG5cdGxldCB0YWcgPSBtYXRjaDtcclxuXHR0YWcgPSB0YWcuc3Vic3RyaW5nKDIpO1xyXG5cdHRhZyA9IHRhZy5zdWJzdHJpbmcoMCwgdGFnLmxlbmd0aCAtIDIpO1xyXG5cdHRhZyA9IHRhZy50cmltKCk7XHJcblxyXG5cdGNvbnN0IHBhcnRzID0gdGFnLnNwbGl0KCc6Jyk7XHJcblx0aWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xyXG5cdFx0Y29uc3QgcGF0aCA9IHBhcnRzWzBdLnNwbGl0KCcuJyk7XHJcblxyXG5cdFx0Y29uc3Qgb2JqID0gdHJhdmVyc2VPYmplY3QocGF0aCwgZGF0YU1vZGVsKTtcclxuXHJcblx0XHRpZiAob2JqID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuICd7eyBJTlZBTElEIFRFTVBMQVRFIFRBRyAtIG9iamVjdCB1bmRlZmluZWQgfX0nO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvYmo7XHJcblx0fSBlbHNlIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHtcclxuXHRcdGNvbnN0IG9wZXJhdG9yID0gcGFydHNbMF07XHJcblxyXG5cdFx0Y29uc3QgcGF0aCA9IHBhcnRzWzFdLnNwbGl0KCcuJyk7XHJcblxyXG5cdFx0Y29uc3Qgb2JqID0gdHJhdmVyc2VPYmplY3QocGF0aCwgZGF0YU1vZGVsKTtcclxuXHJcblx0XHRpZiAob2JqID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuICd7eyBJTlZBTElEIFRFTVBMQVRFIFRBRyAtIG9iamVjdCB1bmRlZmluZWQgfX0nO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvcGVyYXRvciA9PT0gJ0xJU1QnKSB7XHJcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheShvYmopKSB7XHJcblx0XHRcdFx0cmV0dXJuICd7eyBJTlZBTElEIFRFTVBMQVRFIFRBRyAtIG9wZXJhdG9yIExJU1QgaXMgb25seSBhcHBsaWNhYmxlIG9uIGFuIGFycmF5IH19JztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gb2JqLm1hcCgoZTogYW55KSA9PiBgLSAke2V9YCkuam9pbignXFxuJyk7XHJcblx0XHR9IGVsc2UgaWYgKG9wZXJhdG9yID09PSAnRU5VTScpIHtcclxuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KG9iaikpIHtcclxuXHRcdFx0XHRyZXR1cm4gJ3t7IElOVkFMSUQgVEVNUExBVEUgVEFHIC0gb3BlcmF0b3IgRU5VTSBpcyBvbmx5IGFwcGxpY2FibGUgb24gYW4gYXJyYXkgfX0nO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBvYmouam9pbignLCAnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYHt7IElOVkFMSUQgVEVNUExBVEUgVEFHIC0gdW5rbm93biBvcGVyYXRvciAke29wZXJhdG9yfSB9fWA7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gJ3t7IElOVkFMSUQgVEVNUExBVEUgVEFHIH19JztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYXZlcnNlcyB0aGUgb2JqZWN0IGFsb25nIGEgcHJvcGVydHkgcGF0aFxyXG4gKlxyXG4gKiBAcGFyYW0gcGF0aFxyXG4gKiBAcGFyYW0gb2JqXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmF2ZXJzZU9iamVjdChwYXRoOiBBcnJheTxzdHJpbmc+LCBvYmo6IGFueSk6IGFueSB7XHJcblx0Zm9yIChjb25zdCBwYXJ0IG9mIHBhdGgpIHtcclxuXHRcdGlmIChvYmogIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRvYmogPSBvYmpbcGFydF07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gb2JqO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNUcnV0aHkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiAhIXZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGYWxzeSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcblx0cmV0dXJuICF2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsT3JJbmNsdWRlcyhzdHIxOiBzdHJpbmcsIHN0cjI6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBzdHIxID09PSBzdHIyIHx8IHN0cjEuaW5jbHVkZXMoc3RyMikgfHwgc3RyMi5pbmNsdWRlcyhzdHIxKTtcclxufVxyXG4iLCAiaW1wb3J0IHtNZXRhQmluZEludGVybmFsRXJyb3J9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRlIHtcclxuXHRwcml2YXRlIF9kYXk6IG51bWJlcjtcclxuXHRwcml2YXRlIF9tb250aDogbnVtYmVyO1xyXG5cdHByaXZhdGUgX3llYXI6IG51bWJlcjtcclxuXHJcblx0cHJpdmF0ZSBfbW9udGhNYXA6IFJlY29yZDxudW1iZXIsIHN0cmluZz4gPSB7XHJcblx0XHQxOiAnSmFudWFyeScsXHJcblx0XHQyOiAnRmVicnVhcnknLFxyXG5cdFx0MzogJ01hcmNoJyxcclxuXHRcdDQ6ICdBcHJpbCcsXHJcblx0XHQ1OiAnTWF5JyxcclxuXHRcdDY6ICdKdW5lJyxcclxuXHRcdDc6ICdKdWx5JyxcclxuXHRcdDg6ICdBdWd1c3QnLFxyXG5cdFx0OTogJ1NlcHRlbWJlcicsXHJcblx0XHQxMDogJ09jdG9iZXInLFxyXG5cdFx0MTE6ICdOb3ZlbWJlcicsXHJcblx0XHQxMjogJ0RlY2VtYmVyJyxcclxuXHR9O1xyXG5cclxuXHRwcml2YXRlIF9tb250aE1hcFNob3J0OiBSZWNvcmQ8bnVtYmVyLCBzdHJpbmc+ID0ge1xyXG5cdFx0MTogJ0phbicsXHJcblx0XHQyOiAnRmViJyxcclxuXHRcdDM6ICdNYXInLFxyXG5cdFx0NDogJ0FwcicsXHJcblx0XHQ1OiAnTWF5JyxcclxuXHRcdDY6ICdKdW4nLFxyXG5cdFx0NzogJ0p1bCcsXHJcblx0XHQ4OiAnQXVnJyxcclxuXHRcdDk6ICdTZXAnLFxyXG5cdFx0MTA6ICdPY3QnLFxyXG5cdFx0MTE6ICdOb3YnLFxyXG5cdFx0MTI6ICdEZWMnLFxyXG5cdH07XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5fZGF5ID0gRGF0ZVBhcnNlci5nZXREZWZhdWx0RGF5KCk7XHJcblx0XHR0aGlzLl9tb250aCA9IERhdGVQYXJzZXIuZ2V0RGVmYXVsdE1vbnRoKCk7XHJcblx0XHR0aGlzLl95ZWFyID0gRGF0ZVBhcnNlci5nZXREZWZhdWx0WWVhcigpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldERheSgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2RheTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXREYXkodmFsdWU6IG51bWJlcik6IHZvaWQgIHtcclxuXHRcdGlmICh2YWx1ZSA8IDEgfHwgdmFsdWUgPiAzMSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR0aGlzLl9kYXkgPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRNb250aCgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXMuX21vbnRoO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldE1vbnRoKHZhbHVlOiBudW1iZXIpOiB2b2lkICB7XHJcblx0XHRpZiAodmFsdWUgPCAxIHx8IHZhbHVlID4gMTIpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5fbW9udGggPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRZZWFyKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gdGhpcy5feWVhcjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRZZWFyKHZhbHVlOiBudW1iZXIpOiB2b2lkICB7XHJcblx0XHR0aGlzLl95ZWFyID0gdmFsdWU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VW5pZm9ybURheSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuICgnMDAnICsgdGhpcy5nZXREYXkoKS50b1N0cmluZygpKS5zbGljZSgtMik7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VW5pZm9ybU1vbnRoKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gKCcwMCcgKyB0aGlzLmdldE1vbnRoKCkudG9TdHJpbmcoKSkuc2xpY2UoLTIpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFVuaWZvcm1ZZWFyKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gKCcwMDAwJyArIHRoaXMuZ2V0WWVhcigpLnRvU3RyaW5nKCkpLnNsaWNlKC00KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXREYXlGcm9tU3RyaW5nKHN0cjogc3RyaW5nKTogdm9pZCAge1xyXG5cdFx0Y29uc3QgdiA9IE51bWJlci5wYXJzZUludChzdHIpO1xyXG5cdFx0dGhpcy5zZXREYXkoTnVtYmVyLmlzTmFOKHYpID8gRGF0ZVBhcnNlci5nZXREZWZhdWx0RGF5KCkgOiB2KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRNb250aEZyb21TdHJpbmcoc3RyOiBzdHJpbmcpOiB2b2lkICB7XHJcblx0XHRjb25zdCB2ID0gTnVtYmVyLnBhcnNlSW50KHN0cik7XHJcblx0XHR0aGlzLnNldE1vbnRoKE51bWJlci5pc05hTih2KSA/IERhdGVQYXJzZXIuZ2V0RGVmYXVsdE1vbnRoKCkgOiB2KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRZZWFyRnJvbVN0cmluZyhzdHI6IHN0cmluZyk6IHZvaWQge1xyXG5cdFx0Y29uc3QgdiA9IE51bWJlci5wYXJzZUludChzdHIpO1xyXG5cdFx0dGhpcy5zZXRZZWFyKE51bWJlci5pc05hTih2KSA/IERhdGVQYXJzZXIuZ2V0RGVmYXVsdFllYXIoKSA6IHYpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldE1vbnRoTmFtZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuX21vbnRoTWFwW3RoaXMuZ2V0TW9udGgoKV07XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0TW9udGhOYW1lU2hvcnQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLl9tb250aE1hcFNob3J0W3RoaXMuZ2V0TW9udGgoKV07XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0TW9udGhGcm9tTmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuX21vbnRoTWFwKSkge1xyXG5cdFx0XHRpZiAodmFsdWUgPT09IG5hbWUpIHtcclxuXHRcdFx0XHR0aGlzLnNldE1vbnRoRnJvbVN0cmluZyhrZXkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuX21vbnRoTWFwU2hvcnQpKSB7XHJcblx0XHRcdGlmICh2YWx1ZSA9PT0gbmFtZSkge1xyXG5cdFx0XHRcdHRoaXMuc2V0TW9udGhGcm9tU3RyaW5nKGtleSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBEYXRlRm9ybWF0IHtcclxuXHRVUyA9ICd1cycsXHJcblx0RVUgPSAnZXUnLFxyXG5cdEZBTkNZX1VTID0gJ2ZfdXMnLFxyXG5cdEZBTkNZX1NIT1JUX1VTID0gJ2ZzX3VzJyxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGVQYXJzZXIge1xyXG5cdHB1YmxpYyBzdGF0aWMgZGF0ZUZvcm1hdDogRGF0ZUZvcm1hdDtcclxuXHJcblx0cHVibGljIHN0YXRpYyBzdHJpbmdpZnkoZGF0ZTogRGF0ZSk6IHN0cmluZyB7XHJcblx0XHRpZiAoRGF0ZVBhcnNlci5kYXRlRm9ybWF0ID09PSBEYXRlRm9ybWF0LlVTKSB7XHJcblx0XHRcdHJldHVybiBEYXRlUGFyc2VyLnN0cmluZ2lmeVVzRGF0ZShkYXRlKTtcclxuXHRcdH0gZWxzZSBpZiAoRGF0ZVBhcnNlci5kYXRlRm9ybWF0ID09PSBEYXRlRm9ybWF0LkVVKSB7XHJcblx0XHRcdHJldHVybiBEYXRlUGFyc2VyLnN0cmluZ2lmeUV1RGF0ZShkYXRlKTtcclxuXHRcdH0gZWxzZSBpZiAoRGF0ZVBhcnNlci5kYXRlRm9ybWF0ID09PSBEYXRlRm9ybWF0LkZBTkNZX1VTKSB7XHJcblx0XHRcdHJldHVybiBEYXRlUGFyc2VyLnN0cmluZ2lmeVVzRmFuY3lEYXRlKGRhdGUpO1xyXG5cdFx0fSBlbHNlIGlmIChEYXRlUGFyc2VyLmRhdGVGb3JtYXQgPT09IERhdGVGb3JtYXQuRkFOQ1lfU0hPUlRfVVMpIHtcclxuXHRcdFx0cmV0dXJuIERhdGVQYXJzZXIuc3RyaW5naWZ5VXNGYW5jeURhdGVTaG9ydChkYXRlKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ2RhdGUgZm9ybWF0IHNldHRpbmcgZG9lcyBub3QgbWF0Y2ggYW55IHN1cHBvcnRlZCBkYXRlIGZvcm1hdCcpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBwYXJzZShkYXRlU3RyaW5nOiBzdHJpbmcpOiBEYXRlIHwgdW5kZWZpbmVkIHtcclxuXHRcdGlmIChEYXRlUGFyc2VyLmRhdGVGb3JtYXQgPT09IERhdGVGb3JtYXQuVVMpIHtcclxuXHRcdFx0cmV0dXJuIERhdGVQYXJzZXIucGFyc2VVc0RhdGUoZGF0ZVN0cmluZyk7XHJcblx0XHR9IGVsc2UgaWYgKERhdGVQYXJzZXIuZGF0ZUZvcm1hdCA9PT0gRGF0ZUZvcm1hdC5FVSkge1xyXG5cdFx0XHRyZXR1cm4gRGF0ZVBhcnNlci5wYXJzZUV1RGF0ZShkYXRlU3RyaW5nKTtcclxuXHRcdH0gZWxzZSBpZiAoRGF0ZVBhcnNlci5kYXRlRm9ybWF0ID09PSBEYXRlRm9ybWF0LkZBTkNZX1VTKSB7XHJcblx0XHRcdHJldHVybiBEYXRlUGFyc2VyLnBhcnNlVXNGYW5jeURhdGUoZGF0ZVN0cmluZyk7XHJcblx0XHR9IGVsc2UgaWYgKERhdGVQYXJzZXIuZGF0ZUZvcm1hdCA9PT0gRGF0ZUZvcm1hdC5GQU5DWV9TSE9SVF9VUykge1xyXG5cdFx0XHRyZXR1cm4gRGF0ZVBhcnNlci5wYXJzZVVzRmFuY3lEYXRlKGRhdGVTdHJpbmcpO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignZGF0ZSBmb3JtYXQgc2V0dGluZyBkb2VzIG5vdCBtYXRjaCBhbnkgc3VwcG9ydGVkIGRhdGUgZm9ybWF0Jyk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIHN0cmluZ2lmeUV1RGF0ZShkYXRlOiBEYXRlKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBgJHtkYXRlLmdldFVuaWZvcm1EYXkoKX0vJHtkYXRlLmdldFVuaWZvcm1Nb250aCgpfS8ke2RhdGUuZ2V0VW5pZm9ybVllYXIoKX1gO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBwYXJzZUV1RGF0ZShkYXRlU3RyaW5nOiBzdHJpbmcpOiBEYXRlIHwgdW5kZWZpbmVkIHtcclxuXHRcdGNvbnN0IGRhdGU6IERhdGUgPSBEYXRlUGFyc2VyLmdldERlZmF1bHREYXRlKCk7XHJcblxyXG5cdFx0Y29uc3QgZGF0ZVBhcnRzID0gZGF0ZVN0cmluZy5zcGxpdCgnLycpO1xyXG5cdFx0aWYgKGRhdGVQYXJ0cy5sZW5ndGggIT09IDMpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHRkYXRlLnNldERheUZyb21TdHJpbmcoZGF0ZVBhcnRzWzBdKTtcclxuXHRcdGRhdGUuc2V0TW9udGhGcm9tU3RyaW5nKGRhdGVQYXJ0c1sxXSk7XHJcblx0XHRkYXRlLnNldFllYXJGcm9tU3RyaW5nKGRhdGVQYXJ0c1syXSk7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIHN0cmluZ2lmeVVzRGF0ZShkYXRlOiBEYXRlKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBgJHtkYXRlLmdldFVuaWZvcm1Nb250aCgpfS8ke2RhdGUuZ2V0VW5pZm9ybURheSgpfS8ke2RhdGUuZ2V0VW5pZm9ybVllYXIoKX1gO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBwYXJzZVVzRGF0ZShkYXRlU3RyaW5nOiBzdHJpbmcpOiBEYXRlIHwgdW5kZWZpbmVkIHtcclxuXHRcdGNvbnN0IGRhdGU6IERhdGUgPSBEYXRlUGFyc2VyLmdldERlZmF1bHREYXRlKCk7XHJcblxyXG5cdFx0Y29uc3QgZGF0ZVBhcnRzID0gZGF0ZVN0cmluZy5zcGxpdCgnLycpO1xyXG5cdFx0aWYgKGRhdGVQYXJ0cy5sZW5ndGggIT09IDMpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHRkYXRlLnNldE1vbnRoRnJvbVN0cmluZyhkYXRlUGFydHNbMF0pO1xyXG5cdFx0ZGF0ZS5zZXREYXlGcm9tU3RyaW5nKGRhdGVQYXJ0c1sxXSk7XHJcblx0XHRkYXRlLnNldFllYXJGcm9tU3RyaW5nKGRhdGVQYXJ0c1syXSk7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIHN0cmluZ2lmeVVzRmFuY3lEYXRlKGRhdGU6IERhdGUpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIGAke2RhdGUuZ2V0TW9udGhOYW1lKCl9ICR7ZGF0ZS5nZXREYXkoKS50b1N0cmluZygpfSwgJHtkYXRlLmdldFllYXIoKS50b1N0cmluZygpfWA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIHN0cmluZ2lmeVVzRmFuY3lEYXRlU2hvcnQoZGF0ZTogRGF0ZSk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gYCR7ZGF0ZS5nZXRNb250aE5hbWVTaG9ydCgpfSAke2RhdGUuZ2V0RGF5KCkudG9TdHJpbmcoKX0sICR7ZGF0ZS5nZXRZZWFyKCkudG9TdHJpbmcoKX1gO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBwYXJzZVVzRmFuY3lEYXRlKGRhdGVTdHJpbmc6IHN0cmluZyk6IERhdGUgfCB1bmRlZmluZWQge1xyXG5cdFx0Y29uc3QgZGF0ZTogRGF0ZSA9IERhdGVQYXJzZXIuZ2V0RGVmYXVsdERhdGUoKTtcclxuXHJcblx0XHRjb25zdCBkYXRlUGFydHMgPSBkYXRlU3RyaW5nLnNwbGl0KCcsJykubWFwKHggPT4geC50cmltKCkpO1xyXG5cdFx0aWYgKGRhdGVQYXJ0cy5sZW5ndGggIT09IDIpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGRhdGVQYXJ0c1BhcnRzID0gZGF0ZVBhcnRzWzBdLnNwbGl0KCcgJyk7XHJcblx0XHRpZiAoZGF0ZVBhcnRzUGFydHMubGVuZ3RoICE9PSAyKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY29uc29sZS5sb2coZGF0ZVBhcnRzUGFydHMpXHJcblxyXG5cdFx0ZGF0ZS5zZXRNb250aEZyb21OYW1lKGRhdGVQYXJ0c1BhcnRzWzBdKTtcclxuXHRcdGRhdGUuc2V0RGF5RnJvbVN0cmluZyhkYXRlUGFydHNQYXJ0c1sxXSk7XHJcblx0XHRkYXRlLnNldFllYXJGcm9tU3RyaW5nKGRhdGVQYXJ0c1sxXSk7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIGdldERlZmF1bHREYXRlKCk6IERhdGUge1xyXG5cdFx0cmV0dXJuIG5ldyBEYXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIGdldERlZmF1bHREYXkoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiAxO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXREZWZhdWx0TW9udGgoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiAxO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXREZWZhdWx0WWVhcigpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIDIwMjI7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQge01hcmtkb3duUmVuZGVyQ2hpbGQsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBNZXRhQmluZFBsdWdpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi91dGlscy9Mb2dnZXInO1xyXG5pbXBvcnQge0Fic3RyYWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9pbnB1dEZpZWxkcy9BYnN0cmFjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge0lucHV0RmllbGRGYWN0b3J5fSBmcm9tICcuL2lucHV0RmllbGRzL0lucHV0RmllbGRGYWN0b3J5JztcclxuaW1wb3J0IHtJbnB1dEZpZWxkQXJndW1lbnQsIElucHV0RmllbGREZWNsYXJhdGlvbiwgSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyfSBmcm9tICcuL3BhcnNlcnMvSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyJztcclxuaW1wb3J0IHtNZXRhQmluZEJpbmRUYXJnZXRFcnJvciwgTWV0YUJpbmRJbnRlcm5hbEVycm9yfSBmcm9tICcuL3V0aWxzL1V0aWxzJztcclxuXHJcbmV4cG9ydCBlbnVtIElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZSB7XHJcblx0SU5MSU5FX0NPREVfQkxPQ0ssXHJcblx0Q09ERV9CTE9DSyxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkIGV4dGVuZHMgTWFya2Rvd25SZW5kZXJDaGlsZCB7XHJcblx0cGx1Z2luOiBNZXRhQmluZFBsdWdpbjtcclxuXHRtZXRhRGF0YTogYW55O1xyXG5cdGZpbGVQYXRoOiBzdHJpbmc7XHJcblx0dWlkOiBudW1iZXI7XHJcblx0aW5wdXRGaWVsZDogQWJzdHJhY3RJbnB1dEZpZWxkIHwgdW5kZWZpbmVkO1xyXG5cdGVycm9yOiBzdHJpbmc7XHJcblxyXG5cdGlucHV0RmllbGREZWNsYXJhdGlvbjogSW5wdXRGaWVsZERlY2xhcmF0aW9uIHwgdW5kZWZpbmVkO1xyXG5cdGJpbmRUYXJnZXRGaWxlOiBURmlsZSB8IHVuZGVmaW5lZDtcclxuXHRiaW5kVGFyZ2V0TWV0YWRhdGFGaWVsZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG5cclxuXHRsaW1pdEludGVydmFsOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcblx0aW50ZXJ2YWxDb3VudGVyOiBudW1iZXI7XHJcblx0dmFsdWVRdWV1ZTogYW55W107XHJcblxyXG5cdGNvbnN0cnVjdG9yKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgdHlwZTogSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGRUeXBlLCBmdWxsRGVjbGFyYXRpb246IHN0cmluZywgcGx1Z2luOiBNZXRhQmluZFBsdWdpbiwgZmlsZVBhdGg6IHN0cmluZywgdWlkOiBudW1iZXIpIHtcclxuXHRcdHN1cGVyKGNvbnRhaW5lckVsKTtcclxuXHJcblx0XHR0aGlzLmVycm9yID0gJyc7XHJcblx0XHR0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XHJcblx0XHR0aGlzLnVpZCA9IHVpZDtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cclxuXHRcdHRoaXMudmFsdWVRdWV1ZSA9IFtdO1xyXG5cdFx0dGhpcy5pbnRlcnZhbENvdW50ZXIgPSAwO1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdHRoaXMuaW5wdXRGaWVsZERlY2xhcmF0aW9uID0gSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyLnBhcnNlKGZ1bGxEZWNsYXJhdGlvbik7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5pbnB1dEZpZWxkRGVjbGFyYXRpb24uaXNCb3VuZCkge1xyXG5cdFx0XHRcdHRoaXMucGFyc2VCaW5kVGFyZ2V0KCk7XHJcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZSBgcGFyc2VCaW5kVGFyZ2V0YCBzZXRzIGBiaW5kVGFyZ2V0RmlsZWAgYW5kIGBiaW5kVGFyZ2V0TWV0YWRhdGFGaWVsZGAgb3IgdGhyb3dzIGFuIGVycm9yLlxyXG5cdFx0XHRcdHRoaXMubWV0YURhdGEgPSB0aGlzLnBsdWdpbi5nZXRNZXRhRGF0YUZvckZpbGUodGhpcy5iaW5kVGFyZ2V0RmlsZSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuaW5wdXRGaWVsZCA9IElucHV0RmllbGRGYWN0b3J5LmNyZWF0ZUlucHV0RmllbGQodGhpcy5pbnB1dEZpZWxkRGVjbGFyYXRpb24uaW5wdXRGaWVsZFR5cGUsIHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkOiB0aGlzLFxyXG5cdFx0XHRcdG9uVmFsdWVDaGFuZ2VkOiB0aGlzLnB1c2hUb1ZhbHVlUXVldWUuYmluZCh0aGlzKSxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHR0aGlzLmxpbWl0SW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5hcHBseVZhbHVlUXVldWVUb01ldGFkYXRhKCksIHRoaXMucGx1Z2luLnNldHRpbmdzLnN5bmNJbnRlcnZhbCk7XHJcblx0XHR9IGNhdGNoIChlOiBhbnkpIHtcclxuXHRcdFx0dGhpcy5lcnJvciA9IGUubWVzc2FnZTtcclxuXHRcdFx0TG9nZ2VyLmxvZ1dhcm5pbmcoZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwYXJzZUJpbmRUYXJnZXQoKTogdm9pZCB7XHJcblx0XHRpZiAoIXRoaXMuaW5wdXRGaWVsZERlY2xhcmF0aW9uKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ2lucHV0RmllbGREZWNsYXJhdGlvbiBpcyB1bmRlZmluZWQsIGNhbiBub3QgcGFyc2UgYmluZCB0YXJnZXQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBiaW5kVGFyZ2V0UGFydHMgPSB0aGlzLmlucHV0RmllbGREZWNsYXJhdGlvbi5iaW5kVGFyZ2V0LnNwbGl0KCcjJyk7XHJcblxyXG5cdFx0aWYgKGJpbmRUYXJnZXRQYXJ0cy5sZW5ndGggPT09IDEpIHtcclxuXHRcdFx0Ly8gdGhlIGJpbmQgdGFyZ2V0IGlzIGluIHRoZSBzYW1lIGZpbGVcclxuXHRcdFx0dGhpcy5iaW5kVGFyZ2V0TWV0YWRhdGFGaWVsZCA9IHRoaXMuaW5wdXRGaWVsZERlY2xhcmF0aW9uLmJpbmRUYXJnZXQ7XHJcblxyXG5cdFx0XHRjb25zdCBmaWxlczogVEZpbGVbXSA9IHRoaXMucGx1Z2luLmdldEZpbGVzQnlOYW1lKHRoaXMuZmlsZVBhdGgpO1xyXG5cdFx0XHRpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kQmluZFRhcmdldEVycm9yKCdiaW5kIHRhcmdldCBmaWxlIG5vdCBmb3VuZCcpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGZpbGVzLmxlbmd0aCA9PT0gMSkge1xyXG5cdFx0XHRcdHRoaXMuYmluZFRhcmdldEZpbGUgPSBmaWxlc1swXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRCaW5kVGFyZ2V0RXJyb3IoJ2JpbmQgdGFyZ2V0IHJlc29sdmVzIHRvIG11bHRpcGxlIGZpbGVzLCBwbGVhc2UgYWxzbyBzcGVjaWZ5IHRoZSBmaWxlIHBhdGgnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChiaW5kVGFyZ2V0UGFydHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdC8vIHRoZSBiaW5kIHRhcmdldCBpcyBpbiBhbm90aGVyIGZpbGVcclxuXHRcdFx0dGhpcy5iaW5kVGFyZ2V0TWV0YWRhdGFGaWVsZCA9IGJpbmRUYXJnZXRQYXJ0c1sxXTtcclxuXHJcblx0XHRcdGNvbnN0IGZpbGVzOiBURmlsZVtdID0gdGhpcy5wbHVnaW4uZ2V0RmlsZXNCeU5hbWUoYmluZFRhcmdldFBhcnRzWzBdKTtcclxuXHRcdFx0aWYgKGZpbGVzLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRhQmluZEJpbmRUYXJnZXRFcnJvcignYmluZCB0YXJnZXQgZmlsZSBub3QgZm91bmQnKTtcclxuXHRcdFx0fSBlbHNlIGlmIChmaWxlcy5sZW5ndGggPT09IDEpIHtcclxuXHRcdFx0XHR0aGlzLmJpbmRUYXJnZXRGaWxlID0gZmlsZXNbMF07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kQmluZFRhcmdldEVycm9yKCdiaW5kIHRhcmdldCByZXNvbHZlcyB0byBtdWx0aXBsZSBmaWxlcywgcGxlYXNlIGFsc28gc3BlY2lmeSB0aGUgZmlsZSBwYXRoJyk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEJpbmRUYXJnZXRFcnJvcignYmluZCB0YXJnZXQgbWF5IG9ubHkgY29udGFpbiBvbmUgXFwnI1xcJyB0byBzcGVjaWZ5IHRoZSBtZXRhZGF0YSBmaWVsZCcpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gdXNlIHRoaXMgaW50ZXJ2YWwgdG8gcmVkdWNlIHdyaXRpbmcgb3BlcmF0aW9uc1xyXG5cdGFzeW5jIGFwcGx5VmFsdWVRdWV1ZVRvTWV0YWRhdGEoKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRpZiAoIXRoaXMuaW5wdXRGaWVsZERlY2xhcmF0aW9uKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ2lucHV0RmllbGREZWNsYXJhdGlvbiBpcyB1bmRlZmluZWQsIGNhbiBub3QgdXBkYXRlIG1ldGFkYXRhJyk7XHJcblx0XHR9XHJcblx0XHRpZiAoIXRoaXMuaW5wdXRGaWVsZERlY2xhcmF0aW9uLmlzQm91bmQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLmJpbmRUYXJnZXRNZXRhZGF0YUZpZWxkIHx8ICF0aGlzLmJpbmRUYXJnZXRGaWxlKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ2JpbmRUYXJnZXRNZXRhZGF0YUZpZWxkIG9yIGJpbmRUYXJnZXRGaWxlIGlzIHVuZGVmaW5lZCwgY2FuIG5vdCB1cGRhdGUgbWV0YWRhdGEnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy52YWx1ZVF1ZXVlLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2codGhpcy52YWx1ZVF1ZXVlLmF0KC0xKSlcclxuXHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4udXBkYXRlTWV0YURhdGEodGhpcy5iaW5kVGFyZ2V0TWV0YWRhdGFGaWVsZCwgdGhpcy52YWx1ZVF1ZXVlLmF0KC0xKSwgdGhpcy5iaW5kVGFyZ2V0RmlsZSk7XHJcblx0XHRcdHRoaXMudmFsdWVRdWV1ZSA9IFtdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcHVzaFRvVmFsdWVRdWV1ZSh2YWx1ZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRpZiAodGhpcy5pbnB1dEZpZWxkRGVjbGFyYXRpb24/LmlzQm91bmQpIHtcclxuXHRcdFx0dGhpcy52YWx1ZVF1ZXVlLnB1c2godmFsdWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dXBkYXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG5cdFx0aWYgKCF0aGlzLmlucHV0RmllbGQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignaW5wdXRGaWVsZCBpcyB1bmRlZmluZWQsIGNhbiBub3QgdXBkYXRlIHZhbHVlJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHZhbHVlID09IG51bGwpIHtcclxuXHRcdFx0dmFsdWUgPSB0aGlzLmlucHV0RmllbGQuZ2V0RGVmYXVsdFZhbHVlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLmlucHV0RmllbGQuaXNFcXVhbFZhbHVlKHZhbHVlKSAmJiB0aGlzLnZhbHVlUXVldWUubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdExvZ2dlci5sb2dEZWJ1ZyhgdXBkYXRpbmcgaW5wdXQgZmllbGQgJHt0aGlzLnVpZH0gdG9gLCB2YWx1ZSk7XHJcblx0XHRcdHRoaXMuaW5wdXRGaWVsZC5zZXRWYWx1ZSh2YWx1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRJbml0aWFsVmFsdWUoKTogYW55IHwgdW5kZWZpbmVkIHtcclxuXHRcdGlmICh0aGlzLmlucHV0RmllbGREZWNsYXJhdGlvbj8uaXNCb3VuZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5tZXRhRGF0YVt0aGlzLmJpbmRUYXJnZXRNZXRhZGF0YUZpZWxkID8/ICcnXSA/PyB0aGlzLmlucHV0RmllbGQ/LmdldERlZmF1bHRWYWx1ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0QXJndW1lbnRzKG5hbWU6IHN0cmluZyk6IElucHV0RmllbGRBcmd1bWVudFtdIHtcclxuXHRcdGlmICghdGhpcy5pbnB1dEZpZWxkRGVjbGFyYXRpb24pIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignaW5wdXRGaWVsZERlY2xhcmF0aW9uIGlzIHVuZGVmaW5lZCwgY2FuIG5vdCByZXRyaWV2ZSBhcmd1bWVudHMnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5pbnB1dEZpZWxkRGVjbGFyYXRpb24uYXJndW1lbnRzLmZpbHRlcih4ID0+IHgubmFtZSA9PT0gbmFtZSk7XHJcblx0fVxyXG5cclxuXHRnZXRBcmd1bWVudChuYW1lOiBzdHJpbmcpOiBJbnB1dEZpZWxkQXJndW1lbnQgfCB1bmRlZmluZWQge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXJndW1lbnRzKG5hbWUpLmF0KDApO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25sb2FkKCk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0TG9nZ2VyLmxvZ0RlYnVnKCdsb2FkJywgdGhpcyk7XHJcblxyXG5cdFx0dGhpcy5tZXRhRGF0YSA9IGF3YWl0IHRoaXMubWV0YURhdGE7XHJcblxyXG5cdFx0Y29uc3QgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KCk7XHJcblx0XHRjb250YWluZXIuYWRkQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4taW5wdXQtd3JhcHBlcicpO1xyXG5cdFx0dGhpcy5jb250YWluZXJFbC5hZGRDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1pbnB1dCcpO1xyXG5cclxuXHRcdGlmICh0aGlzLmVycm9yKSB7XHJcblx0XHRcdGNvbnRhaW5lci5pbm5lclRleHQgPSBgIC0+IEVSUk9SOiAke3RoaXMuZXJyb3J9YDtcclxuXHRcdFx0Y29udGFpbmVyLmFkZENsYXNzKCdtZXRhLWJpbmQtcGx1Z2luLWVycm9yJyk7XHJcblx0XHRcdHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghdGhpcy5pbnB1dEZpZWxkKSB7XHJcblx0XHRcdGNvbnRhaW5lci5pbm5lclRleHQgPSBgIC0+IEVSUk9SOiAkeyhuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdpbnB1dCBmaWVsZCBpcyB1bmRlZmluZWQgYW5kIGVycm9yIGlzIGVtcHR5JykubWVzc2FnZSl9YDtcclxuXHRcdFx0Y29udGFpbmVyLmFkZENsYXNzKCdtZXRhLWJpbmQtcGx1Z2luLWVycm9yJyk7XHJcblx0XHRcdHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucGx1Z2luLnJlZ2lzdGVySW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQodGhpcyk7XHJcblxyXG5cdFx0dGhpcy5pbnB1dEZpZWxkLnJlbmRlcihjb250YWluZXIpO1xyXG5cclxuXHRcdGNvbnN0IGNsYXNzQXJndW1lbnQgPSB0aGlzLmdldEFyZ3VtZW50cygnY2xhc3MnKTtcclxuXHRcdGlmIChjbGFzc0FyZ3VtZW50KSB7XHJcblx0XHRcdHRoaXMuaW5wdXRGaWVsZC5nZXRIdG1sRWxlbWVudCgpLmFkZENsYXNzZXMoY2xhc3NBcmd1bWVudC5tYXAoeCA9PiB4LnZhbHVlKSk7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHRcdHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCk6IHZvaWQge1xyXG5cdFx0TG9nZ2VyLmxvZ0RlYnVnKCd1bmxvYWQnLCB0aGlzKTtcclxuXHJcblx0XHR0aGlzLnBsdWdpbi51bnJlZ2lzdGVySW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQodGhpcyk7XHJcblxyXG5cdFx0c3VwZXIub251bmxvYWQoKTtcclxuXHJcblx0XHQvL2NvbnNvbGUubG9nKCd1bmxvYWQnLCB0aGlzKTtcclxuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubGltaXRJbnRlcnZhbCk7XHJcblx0fVxyXG59XHJcbiIsICJleHBvcnQgY2xhc3MgTG9nZ2VyIHtcclxuXHRzdGF0aWMgZGV2TW9kZTogYm9vbGVhbjtcclxuXHRzdGF0aWMgcHJlZml4OiBzdHJpbmcgPSAnbWV0YS1iaW5kIHwnO1xyXG5cclxuXHQvKipcclxuXHQgKiBMb2dzIHRvIHRoZSBjb25zb2xlIHdpdGggdGhlIHBsdWdpbiBwcmVmaXhcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBkYXRhXHJcblx0ICovXHJcblx0c3RhdGljIGxvZyguLi5kYXRhOiBhbnkpOiB2b2lkIHtcclxuXHRcdGNvbnNvbGUubG9nKHRoaXMucHJlZml4LCAuLi5kYXRhKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvZ3MgdG8gdGhlIGNvbnNvbGUgd2l0aCB0aGUgcGx1Z2luIHByZWZpeCwgaWYgZGV2IG1vZGUgaXMgdHVybmVkIG9uIGluIHRoZSBwbHVnaW4gc2V0dGluZ3NcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBkYXRhXHJcblx0ICovXHJcblx0c3RhdGljIGxvZ0RlYnVnKC4uLmRhdGE6IGFueSk6IHZvaWQge1xyXG5cdFx0aWYgKHRoaXMuZGV2TW9kZSkge1xyXG5cdFx0XHRMb2dnZXIubG9nKC4uLmRhdGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTG9ncyBhIHdhcm5pbmcgdG8gdGhlIGNvbnNvbGUgd2l0aCB0aGUgcGx1Z2luIHByZWZpeFxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGRhdGFcclxuXHQgKi9cclxuXHRzdGF0aWMgbG9nV2FybmluZyguLi5kYXRhOiBhbnkpOiB2b2lkIHtcclxuXHRcdGNvbnNvbGUud2Fybih0aGlzLnByZWZpeCwgZGF0YSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBMb2dzIGFuIGVycm9yIHRvIHRoZSBjb25zb2xlIHdpdGggdGhlIHBsdWdpbiBwcmVmaXhcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBkYXRhXHJcblx0ICovXHJcblx0c3RhdGljIGxvZ0Vycm9yKC4uLmRhdGE6IGFueSk6IHZvaWQge1xyXG5cdFx0Y29uc29sZS5lcnJvcih0aGlzLnByZWZpeCwgZGF0YSk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQge0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkfSBmcm9tICcuLi9JbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RJbnB1dEZpZWxkIHtcclxuXHRzdGF0aWMgYWxsb3dDb2RlQmxvY2s6IGJvb2xlYW4gPSB0cnVlO1xyXG5cdHN0YXRpYyBhbGxvd0lubGluZUNvZGVCbG9jazogYm9vbGVhbiA9IHRydWU7XHJcblx0aW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQ6IElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkO1xyXG5cdG9uVmFsdWVDaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcclxuXHJcblx0Y29uc3RydWN0b3IoaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQ6IElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBvblZhbHVlQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD4pIHtcclxuXHRcdHRoaXMuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQgPSBpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZDtcclxuXHRcdHRoaXMub25WYWx1ZUNoYW5nZSA9IG9uVmFsdWVDaGFuZ2U7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGNvbnRlbnQgb2YgdGhlIGlucHV0IGZpZWxkXHJcblx0ICovXHJcblx0YWJzdHJhY3QgZ2V0VmFsdWUoKTogYW55O1xyXG5cclxuXHQvKipcclxuXHQgKiBTZXRzIHRoZSB2YWx1ZSBvbiB0aGlzIGlucHV0IGZpZWxkLCBvdmVycmlkaW5nIHRoZSBjdXJyZW50IGNvbnRlbnRcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB2YWx1ZVxyXG5cdCAqL1xyXG5cdGFic3RyYWN0IHNldFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG5cclxuXHQvKipcclxuXHQgKiBDaGVja3MgaWYgdGhlIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSB2YWx1ZSBvZiB0aGlzIGlucHV0IGZpZWxkXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gdmFsdWVcclxuXHQgKi9cclxuXHRhYnN0cmFjdCBpc0VxdWFsVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhpcyBpbnB1dCBmaWVsZFxyXG5cdCAqL1xyXG5cdGFic3RyYWN0IGdldERlZmF1bHRWYWx1ZSgpOiBhbnk7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIEhUTUwgZWxlbWVudCB0aGlzIGlucHV0IGZpZWxkIGlzIHdyYXBwZWQgaW5cclxuXHQgKi9cclxuXHRhYnN0cmFjdCBnZXRIdG1sRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcclxuXHJcblx0LyoqXHJcblx0ICogUmVuZGVycyB0aGUgaW5wdXQgZmllbGQgYXMgYSBjaGlsZCBvZiB0aGUgY29udGFpbmVyXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gY29udGFpbmVyXHJcblx0ICovXHJcblx0YWJzdHJhY3QgcmVuZGVyKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpOiB2b2lkO1xyXG59XHJcbiIsICJpbXBvcnQge0Fic3RyYWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9BYnN0cmFjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge1RvZ2dsZUNvbXBvbmVudH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vdXRpbHMvTG9nZ2VyJztcclxuaW1wb3J0IHtNZXRhQmluZEludGVybmFsRXJyb3J9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2dnbGVJbnB1dEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RJbnB1dEZpZWxkIHtcclxuXHR0b2dnbGVDb21wb25lbnQ6IFRvZ2dsZUNvbXBvbmVudCB8IHVuZGVmaW5lZDtcclxuXHJcblx0Z2V0VmFsdWUoKTogYW55IHtcclxuXHRcdGlmICghdGhpcy50b2dnbGVDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndG9nZ2xlIGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLnRvZ2dsZUNvbXBvbmVudC5nZXRWYWx1ZSgpO1xyXG5cdH1cclxuXHJcblx0c2V0VmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG5cdFx0aWYgKCF0aGlzLnRvZ2dsZUNvbXBvbmVudCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCd0b2dnbGUgaW5wdXQgY29tcG9uZW50IGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnYm9vbGVhbicpIHtcclxuXHRcdFx0dGhpcy50b2dnbGVDb21wb25lbnQuc2V0VmFsdWUodmFsdWUpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0TG9nZ2VyLmxvZ1dhcm5pbmcoYGNhbiBub3Qgc2V0IHZhbHVlIG9mIHRvZ2dsZSB0byBcXCcke3ZhbHVlfVxcJ2ApO1xyXG5cdFx0XHR0aGlzLnRvZ2dsZUNvbXBvbmVudC5zZXRWYWx1ZShmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpc0VxdWFsVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmFsdWUoKSA9PSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdGdldERlZmF1bHRWYWx1ZSgpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGdldEh0bWxFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuXHRcdGlmICghdGhpcy50b2dnbGVDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndG9nZ2xlIGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy50b2dnbGVDb21wb25lbnQudG9nZ2xlRWw7XHJcblx0fVxyXG5cclxuXHRyZW5kZXIoY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xyXG5cdFx0Y29uc3QgY29tcG9uZW50ID0gbmV3IFRvZ2dsZUNvbXBvbmVudChjb250YWluZXIpO1xyXG5cdFx0Y29tcG9uZW50LnNldFZhbHVlKHRoaXMuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQuZ2V0SW5pdGlhbFZhbHVlKCkpO1xyXG5cdFx0Y29tcG9uZW50Lm9uQ2hhbmdlKHRoaXMub25WYWx1ZUNoYW5nZSk7XHJcblx0XHR0aGlzLnRvZ2dsZUNvbXBvbmVudCA9IGNvbXBvbmVudDtcclxuXHR9XHJcblxyXG59XHJcbiIsICJpbXBvcnQge0Fic3RyYWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9BYnN0cmFjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge1RleHRDb21wb25lbnR9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL3V0aWxzL0xvZ2dlcic7XHJcbmltcG9ydCB7TWV0YUJpbmRJbnRlcm5hbEVycm9yfSBmcm9tICcuLi91dGlscy9VdGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dElucHV0RmllbGQgZXh0ZW5kcyBBYnN0cmFjdElucHV0RmllbGQge1xyXG5cdHRleHRDb21wb25lbnQ6IFRleHRDb21wb25lbnQgfCB1bmRlZmluZWQ7XHJcblxyXG5cdGdldFZhbHVlKCk6IGFueSB7XHJcblx0XHRpZiAoIXRoaXMudGV4dENvbXBvbmVudCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCd0ZXh0IGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy50ZXh0Q29tcG9uZW50LmdldFZhbHVlKCk7XHJcblx0fVxyXG5cclxuXHRzZXRWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcblx0XHRpZiAoIXRoaXMudGV4dENvbXBvbmVudCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCd0ZXh0IGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcclxuXHRcdFx0dGhpcy50ZXh0Q29tcG9uZW50LnNldFZhbHVlKHZhbHVlKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdExvZ2dlci5sb2dXYXJuaW5nKGBjYW4gbm90IHNldCB2YWx1ZSBvZiB0ZXh0IGlucHV0IHRvIFxcJyR7dmFsdWV9XFwnYCk7XHJcblx0XHRcdHRoaXMudGV4dENvbXBvbmVudC5zZXRWYWx1ZSgnJyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpc0VxdWFsVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmFsdWUoKSA9PSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdGdldERlZmF1bHRWYWx1ZSgpOiBhbnkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHJcblx0Z2V0SHRtbEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG5cdFx0aWYgKCF0aGlzLnRleHRDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndGV4dCBpbnB1dCBjb21wb25lbnQgaXMgdW5kZWZpbmVkJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudGV4dENvbXBvbmVudC5pbnB1dEVsO1xyXG5cdH1cclxuXHJcblx0cmVuZGVyKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcclxuXHRcdGNvbnN0IGNvbXBvbmVudCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRhaW5lcik7XHJcblx0XHRjb21wb25lbnQuc2V0VmFsdWUodGhpcy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRJbml0aWFsVmFsdWUoKSk7XHJcblx0XHRjb21wb25lbnQub25DaGFuZ2UodGhpcy5vblZhbHVlQ2hhbmdlKTtcclxuXHRcdHRoaXMudGV4dENvbXBvbmVudCA9IGNvbXBvbmVudDtcclxuXHR9XHJcblxyXG59XHJcbiIsICJpbXBvcnQge0Fic3RyYWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9BYnN0cmFjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge1NsaWRlckNvbXBvbmVudH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vdXRpbHMvTG9nZ2VyJztcclxuaW1wb3J0IHtJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZH0gZnJvbSAnLi4vSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQnO1xyXG5pbXBvcnQge01ldGFCaW5kSW50ZXJuYWxFcnJvcn0gZnJvbSAnLi4vdXRpbHMvVXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNsaWRlcklucHV0RmllbGQgZXh0ZW5kcyBBYnN0cmFjdElucHV0RmllbGQge1xyXG5cdHNsaWRlckNvbXBvbmVudDogU2xpZGVyQ29tcG9uZW50IHwgdW5kZWZpbmVkO1xyXG5cdG1pblZhbHVlOiBudW1iZXI7XHJcblx0bWF4VmFsdWU6IG51bWJlcjtcclxuXHJcblxyXG5cdGNvbnN0cnVjdG9yKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkOiBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgb25WYWx1ZUNoYW5nZTogKHZhbHVlOiBhbnkpID0+ICh2b2lkIHwgUHJvbWlzZTx2b2lkPikpIHtcclxuXHRcdHN1cGVyKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBvblZhbHVlQ2hhbmdlKTtcclxuXHRcdHRoaXMubWluVmFsdWUgPSBpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRBcmd1bWVudCgnbWluVmFsdWUnKT8udmFsdWUgPz8gMDtcclxuXHRcdHRoaXMubWF4VmFsdWUgPSBpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRBcmd1bWVudCgnbWF4VmFsdWUnKT8udmFsdWUgPz8gMTAwO1xyXG5cdH1cclxuXHJcblx0Z2V0VmFsdWUoKTogYW55IHtcclxuXHRcdGlmICghdGhpcy5zbGlkZXJDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignc2xpZGVyIGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zbGlkZXJDb21wb25lbnQuZ2V0VmFsdWUoKTtcclxuXHR9XHJcblxyXG5cdHNldFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuXHRcdGlmICghdGhpcy5zbGlkZXJDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignc2xpZGVyIGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcclxuXHRcdFx0aWYgKHZhbHVlID49IHRoaXMubWluVmFsdWUgJiYgdmFsdWUgPD0gdGhpcy5tYXhWYWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMuc2xpZGVyQ29tcG9uZW50LnNldFZhbHVlKHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0TG9nZ2VyLmxvZ1dhcm5pbmcoYGNhbiBub3Qgc2V0IHZhbHVlIG9mIHNsaWRlciB0byBcXCcke3ZhbHVlfVxcJ2ApO1xyXG5cdFx0XHR0aGlzLnNsaWRlckNvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLmdldERlZmF1bHRWYWx1ZSgpKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlzRXF1YWxWYWx1ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRWYWx1ZSgpID09IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0RGVmYXVsdFZhbHVlKCk6IGFueSB7XHJcblx0XHRyZXR1cm4gdGhpcy5taW5WYWx1ZTtcclxuXHR9XHJcblxyXG5cdGdldEh0bWxFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuXHRcdGlmICghdGhpcy5zbGlkZXJDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignc2xpZGVyIGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zbGlkZXJDb21wb25lbnQuc2xpZGVyRWw7XHJcblx0fVxyXG5cclxuXHRyZW5kZXIoY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xyXG5cdFx0Y29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZXRhLWJpbmQtcGx1Z2luLWlucHV0LXdyYXBwZXInKTtcclxuXHRcdGNvbnRhaW5lci5hZGRDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1mbGV4LWlucHV0LXdyYXBwZXInKTtcclxuXHJcblx0XHRjb25zdCBsYWJlbEFyZ3VtZW50ID0gdGhpcy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRBcmd1bWVudCgnbGFiZWxzJyk7XHJcblx0XHRpZiAobGFiZWxBcmd1bWVudCAmJiBsYWJlbEFyZ3VtZW50LnZhbHVlID09PSB0cnVlKSB7XHJcblx0XHRcdGNvbnRhaW5lci5jcmVhdGVTcGFuKHt0ZXh0OiB0aGlzLm1pblZhbHVlLnRvU3RyaW5nKCksIGNsczogJ21ldGEtYmluZC1wbHVnaW4tc2xpZGVyLWlucHV0LWxhYmVsJ30pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGNvbXBvbmVudCA9IG5ldyBTbGlkZXJDb21wb25lbnQoY29udGFpbmVyKTtcclxuXHRcdGNvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLmlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLmdldEluaXRpYWxWYWx1ZSgpKTtcclxuXHRcdGNvbXBvbmVudC5vbkNoYW5nZSh0aGlzLm9uVmFsdWVDaGFuZ2UpO1xyXG5cdFx0Y29tcG9uZW50LnNldER5bmFtaWNUb29sdGlwKCk7XHJcblx0XHRjb21wb25lbnQuc2V0TGltaXRzKHRoaXMubWluVmFsdWUsIHRoaXMubWF4VmFsdWUsIDEpO1xyXG5cdFx0Y29tcG9uZW50LnNsaWRlckVsLmFkZENsYXNzKCdtZXRhLWJpbmQtcGx1Z2luLXNsaWRlci1pbnB1dCcpO1xyXG5cclxuXHRcdGlmIChsYWJlbEFyZ3VtZW50ICYmIGxhYmVsQXJndW1lbnQudmFsdWUgPT09IHRydWUpIHtcclxuXHRcdFx0Y29udGFpbmVyLmNyZWF0ZVNwYW4oe3RleHQ6IHRoaXMubWF4VmFsdWUudG9TdHJpbmcoKSwgY2xzOiAnbWV0YS1iaW5kLXBsdWdpbi1zbGlkZXItaW5wdXQtbGFiZWwnfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zbGlkZXJDb21wb25lbnQgPSBjb21wb25lbnQ7XHJcblx0fVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHtBYnN0cmFjdElucHV0RmllbGR9IGZyb20gJy4vQWJzdHJhY3RJbnB1dEZpZWxkJztcclxuaW1wb3J0IHtUZXh0QXJlYUNvbXBvbmVudH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vdXRpbHMvTG9nZ2VyJztcclxuaW1wb3J0IHtNZXRhQmluZEludGVybmFsRXJyb3J9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUZXh0QXJlYUlucHV0RmllbGQgZXh0ZW5kcyBBYnN0cmFjdElucHV0RmllbGQge1xyXG5cdHRleHRBcmVhQ29tcG9uZW50OiBUZXh0QXJlYUNvbXBvbmVudCB8IHVuZGVmaW5lZDtcclxuXHJcblx0Z2V0VmFsdWUoKTogYW55IHtcclxuXHRcdGlmICghdGhpcy50ZXh0QXJlYUNvbXBvbmVudCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCd0ZXh0IGFyZWEgaW5wdXQgY29tcG9uZW50IGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnRleHRBcmVhQ29tcG9uZW50LmdldFZhbHVlKCk7XHJcblx0fVxyXG5cclxuXHRzZXRWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcblx0XHRpZiAoIXRoaXMudGV4dEFyZWFDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndGV4dCBhcmVhIGlucHV0IGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcclxuXHRcdFx0dGhpcy50ZXh0QXJlYUNvbXBvbmVudC5zZXRWYWx1ZSh2YWx1ZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRMb2dnZXIubG9nV2FybmluZyhgY2FuIG5vdCBzZXQgdmFsdWUgb2YgdGV4dCBhcmVhIGlucHV0IHRvIFxcJyR7dmFsdWV9XFwnYCk7XHJcblx0XHRcdHRoaXMudGV4dEFyZWFDb21wb25lbnQuc2V0VmFsdWUoJycpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aXNFcXVhbFZhbHVlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzLmdldFZhbHVlKCkgPT0gdmFsdWU7XHJcblx0fVxyXG5cclxuXHRnZXREZWZhdWx0VmFsdWUoKTogYW55IHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdGdldEh0bWxFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuXHRcdGlmICghdGhpcy50ZXh0QXJlYUNvbXBvbmVudCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCd0ZXh0IGFyZWEgaW5wdXQgY29tcG9uZW50IGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnRleHRBcmVhQ29tcG9uZW50LmlucHV0RWw7XHJcblx0fVxyXG5cclxuXHRyZW5kZXIoY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xyXG5cdFx0Y29uc3QgY29tcG9uZW50ID0gbmV3IFRleHRBcmVhQ29tcG9uZW50KGNvbnRhaW5lcik7XHJcblx0XHRjb21wb25lbnQuc2V0VmFsdWUodGhpcy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRJbml0aWFsVmFsdWUoKSk7XHJcblx0XHRjb21wb25lbnQub25DaGFuZ2UodGhpcy5vblZhbHVlQ2hhbmdlKTtcclxuXHRcdHRoaXMudGV4dEFyZWFDb21wb25lbnQgPSBjb21wb25lbnQ7XHJcblx0fVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHtTZWxlY3RJbnB1dEZpZWxkfSBmcm9tICcuL1NlbGVjdElucHV0RmllbGQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbGVjdElucHV0RmllbGRFbGVtZW50IHtcclxuXHR2YWx1ZTogc3RyaW5nO1xyXG5cdHNlbGVjdElucHV0RmllbGQ6IFNlbGVjdElucHV0RmllbGQ7XHJcblx0cmVhZG9ubHkgaWQ6IG51bWJlcjtcclxuXHRlbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuXHJcblx0Y3NzQ2xhc3M6IHN0cmluZztcclxuXHRhY3RpdmVDbGFzczogc3RyaW5nO1xyXG5cdGhvdmVyQ2xhc3M6IHN0cmluZztcclxuXHJcblx0cHJpdmF0ZSBhY3RpdmU6IGJvb2xlYW47XHJcblx0cHJpdmF0ZSBoaWdobGlnaHRlZDogYm9vbGVhbjtcclxuXHJcblx0Y29uc3RydWN0b3IodmFsdWU6IHN0cmluZywgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIGlkOiBudW1iZXIsIG11bHRpU2VsZWN0SW5wdXRGaWVsZDogU2VsZWN0SW5wdXRGaWVsZCwgYWN0aXZlOiBib29sZWFuID0gZmFsc2UpIHtcclxuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHRcdHRoaXMuaWQgPSBpZDtcclxuXHRcdHRoaXMuYWN0aXZlID0gYWN0aXZlO1xyXG5cdFx0dGhpcy5oaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5zZWxlY3RJbnB1dEZpZWxkID0gbXVsdGlTZWxlY3RJbnB1dEZpZWxkO1xyXG5cclxuXHRcdHRoaXMuY3NzQ2xhc3MgPSAnbWV0YS1iaW5kLXBsdWdpbi1zZWxlY3QtaW5wdXQtZWxlbWVudCc7XHJcblx0XHR0aGlzLmFjdGl2ZUNsYXNzID0gJ21ldGEtYmluZC1wbHVnaW4tc2VsZWN0LWlucHV0LWVsZW1lbnQtc2VsZWN0ZWQnO1xyXG5cdFx0dGhpcy5ob3ZlckNsYXNzID0gJ21ldGEtYmluZC1wbHVnaW4tc2VsZWN0LWlucHV0LWVsZW1lbnQtaG92ZXInO1xyXG5cclxuXHRcdHRoaXMuZWxlbWVudCA9IHBhcmVudEVsZW1lbnQuY3JlYXRlRGl2KHtjbHM6IHRoaXMuY3NzQ2xhc3N9KTtcclxuXHRcdHRoaXMuZWxlbWVudC5pZCA9IHRoaXMuZ2V0SFRNTElkKCk7XHJcblx0XHR0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgJyMnICsgdGhpcy5nZXRIVE1MSWQoKSwgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNldEFjdGl2ZSghdGhpcy5hY3RpdmUpO1xyXG5cdFx0XHRpZiAoIXRoaXMuc2VsZWN0SW5wdXRGaWVsZC5hbGxvd011bHRpU2VsZWN0KSB7XHJcblx0XHRcdFx0dGhpcy5zZWxlY3RJbnB1dEZpZWxkLmRpc2FibGVBbGxPdGhlckVsZW1lbnRzKHRoaXMuaWQpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZWxlbWVudC5vbignbW91c2VlbnRlcicsICcjJyArIHRoaXMuZ2V0SFRNTElkKCksICgpID0+IHtcclxuXHRcdFx0dGhpcy5zZXRIaWdobGlnaHRlZCh0cnVlKTtcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5lbGVtZW50Lm9uKCdtb3VzZWxlYXZlJywgJyMnICsgdGhpcy5nZXRIVE1MSWQoKSwgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNldEhpZ2hsaWdodGVkKGZhbHNlKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Z2V0SFRNTElkKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gYG1ldGEtYmluZC1zZWxlY3QtaW5wdXQtZWxlbWVudC0ke3RoaXMuc2VsZWN0SW5wdXRGaWVsZC5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC51aWR9LSR7dGhpcy5pZH1gO1xyXG5cdH1cclxuXHJcblx0aXNIaWdobGlnaHRlZCgpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzLmhpZ2hsaWdodGVkO1xyXG5cdH1cclxuXHJcblx0c2V0SGlnaGxpZ2h0ZWQodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuXHRcdHRoaXMuaGlnaGxpZ2h0ZWQgPSB2YWx1ZTtcclxuXHRcdGlmICh0aGlzLmhpZ2hsaWdodGVkKSB7XHJcblx0XHRcdHRoaXMuYWRkQ2xhc3ModGhpcy5ob3ZlckNsYXNzKTtcclxuXHRcdFx0dGhpcy5zZWxlY3RJbnB1dEZpZWxkLmRlSGlnaGxpZ2h0QWxsT3RoZXJFbGVtZW50cyh0aGlzLmlkKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMucmVtb3ZlQ2xhc3ModGhpcy5ob3ZlckNsYXNzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlO1xyXG5cdH1cclxuXHJcblx0c2V0QWN0aXZlKGFjdGl2ZTogYm9vbGVhbiwgdXBkYXRlUGFyZW50OiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xyXG5cdFx0dGhpcy5hY3RpdmUgPSBhY3RpdmU7XHJcblx0XHR0aGlzLnVwZGF0ZSh1cGRhdGVQYXJlbnQpO1xyXG5cdH1cclxuXHJcblx0dXBkYXRlKHVwZGF0ZVBhcmVudDogYm9vbGVhbik6IHZvaWQge1xyXG5cdFx0aWYgKHRoaXMuYWN0aXZlKSB7XHJcblx0XHRcdHRoaXMuYWRkQ2xhc3ModGhpcy5hY3RpdmVDbGFzcyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnJlbW92ZUNsYXNzKHRoaXMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHVwZGF0ZVBhcmVudCkge1xyXG5cdFx0XHR0aGlzLnNlbGVjdElucHV0RmllbGQub25DaGFuZ2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFkZENsYXNzKGNzc0NsYXNzOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdGlmICghdGhpcy5lbGVtZW50Lmhhc0NsYXNzKGNzc0NsYXNzKSkge1xyXG5cdFx0XHR0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoY3NzQ2xhc3MpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmVtb3ZlQ2xhc3MoY3NzQ2xhc3M6IHN0cmluZyk6IHZvaWQge1xyXG5cdFx0aWYgKHRoaXMuZWxlbWVudC5oYXNDbGFzcyhjc3NDbGFzcykpIHtcclxuXHRcdFx0dGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKGNzc0NsYXNzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJlbmRlcigpOiB2b2lkIHtcclxuXHRcdHRoaXMuZWxlbWVudC5jcmVhdGVFbCgnZGl2Jywge3RleHQ6IHRoaXMudmFsdWV9KTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7QWJzdHJhY3RJbnB1dEZpZWxkfSBmcm9tICcuL0Fic3RyYWN0SW5wdXRGaWVsZCc7XHJcbmltcG9ydCB7U2VsZWN0SW5wdXRGaWVsZEVsZW1lbnR9IGZyb20gJy4vU2VsZWN0SW5wdXRGaWVsZEVsZW1lbnQnO1xyXG5pbXBvcnQge01ldGFCaW5kSW50ZXJuYWxFcnJvciwgbW9kfSBmcm9tICcuLi91dGlscy9VdGlscyc7XHJcbmltcG9ydCB7SW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGR9IGZyb20gJy4uL0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RJbnB1dEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RJbnB1dEZpZWxkIHtcclxuXHRzdGF0aWMgYWxsb3dJbmxpbmVDb2RlQmxvY2s6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRlbGVtZW50czogU2VsZWN0SW5wdXRGaWVsZEVsZW1lbnRbXTtcclxuXHRhbGxvd011bHRpU2VsZWN0OiBib29sZWFuO1xyXG5cdGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkOiBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgb25WYWx1ZUNoYW5nZTogKHZhbHVlOiBhbnkpID0+ICh2b2lkIHwgUHJvbWlzZTx2b2lkPikpIHtcclxuXHRcdHN1cGVyKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBvblZhbHVlQ2hhbmdlKTtcclxuXHRcdHRoaXMuZWxlbWVudHMgPSBbXTtcclxuXHRcdHRoaXMuYWxsb3dNdWx0aVNlbGVjdCA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0Z2V0SHRtbEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG5cdFx0aWYgKCF0aGlzLmNvbnRhaW5lcikge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdzZWxlY3QgaW5wdXQgY29udGFpbmVyIGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmNvbnRhaW5lcjtcclxuXHR9XHJcblxyXG5cdGdldFZhbHVlKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50cy5maWx0ZXIoeCA9PiB4LmlzQWN0aXZlKCkpLmZpcnN0KCk/LnZhbHVlID8/ICcnO1xyXG5cdH1cclxuXHJcblx0c2V0VmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG5cdFx0Zm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMuZWxlbWVudHMpIHtcclxuXHRcdFx0aWYgKHZhbHVlID09PSBlbGVtZW50LnZhbHVlKSB7XHJcblx0XHRcdFx0ZWxlbWVudC5zZXRBY3RpdmUodHJ1ZSwgZmFsc2UpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1lbnQuc2V0QWN0aXZlKGZhbHNlLCBmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlzRXF1YWxWYWx1ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRWYWx1ZSgpID09IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0RGVmYXVsdFZhbHVlKCk6IGFueSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cclxuXHRvbkNoYW5nZSgpOiB2b2lkIHtcclxuXHRcdHRoaXMub25WYWx1ZUNoYW5nZSh0aGlzLmdldFZhbHVlKCkpO1xyXG5cdH1cclxuXHJcblx0cmVuZGVyKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcclxuXHRcdGNvbnRhaW5lci5hZGRDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1zZWxlY3QtaW5wdXQtYmcnKTtcclxuXHRcdHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG5cclxuXHRcdGNvbnN0IGVsZW1lbnRXcmFwcGVyID0gY29udGFpbmVyLmNyZWF0ZURpdih7Y2xzOiAnbWV0YS1iaW5kLXBsdWdpbi1zZWxlY3QtaW5wdXQtd3JhcHBlcid9KTtcclxuXHJcblx0XHRjb25zdCB0aXRsZUFyZ3VtZW50ID0gdGhpcy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRBcmd1bWVudCgndGl0bGUnKTtcclxuXHRcdGlmICh0aXRsZUFyZ3VtZW50KSB7XHJcblx0XHRcdGVsZW1lbnRXcmFwcGVyLmNyZWF0ZUVsKCdkaXYnLCB7dGV4dDogdGl0bGVBcmd1bWVudC52YWx1ZSwgY2xzOiAnbWV0YS1iaW5kLXBsdWdpbi1zZWxlY3QtaW5wdXQtaGVhZGVyJ30pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGVsZW1lbnRBcmd1bWVudHM6IHsgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH1bXSA9IHRoaXMuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQuZ2V0QXJndW1lbnRzKCdvcHRpb24nKTtcclxuXHJcblx0XHRsZXQgaSA9IDA7XHJcblx0XHRmb3IgKGNvbnN0IGVsZW1lbnRBcmd1bWVudCBvZiBlbGVtZW50QXJndW1lbnRzKSB7XHJcblx0XHRcdGNvbnN0IHNlbGVjdElucHV0RmllbGRFbGVtZW50ID0gbmV3IFNlbGVjdElucHV0RmllbGRFbGVtZW50KGVsZW1lbnRBcmd1bWVudC52YWx1ZSwgZWxlbWVudFdyYXBwZXIsIGksIHRoaXMsIGZhbHNlKTtcclxuXHJcblx0XHRcdHRoaXMuZWxlbWVudHMucHVzaChzZWxlY3RJbnB1dEZpZWxkRWxlbWVudCk7XHJcblxyXG5cdFx0XHRzZWxlY3RJbnB1dEZpZWxkRWxlbWVudC5yZW5kZXIoKTtcclxuXHJcblx0XHRcdGkgKz0gMTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNldFZhbHVlKHRoaXMuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQuZ2V0SW5pdGlhbFZhbHVlKCkpO1xyXG5cdH1cclxuXHJcblx0ZGlzYWJsZUFsbE90aGVyRWxlbWVudHMoZWxlbWVudElkOiBudW1iZXIpOiB2b2lkIHtcclxuXHRcdGZvciAoY29uc3Qgc2VsZWN0TW9kYWxFbGVtZW50IG9mIHRoaXMuZWxlbWVudHMpIHtcclxuXHRcdFx0aWYgKHNlbGVjdE1vZGFsRWxlbWVudC5pZCAhPT0gZWxlbWVudElkKSB7XHJcblx0XHRcdFx0c2VsZWN0TW9kYWxFbGVtZW50LnNldEFjdGl2ZShmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGRlSGlnaGxpZ2h0QWxsT3RoZXJFbGVtZW50cyhlbGVtZW50SWQ6IG51bWJlcik6IHZvaWQge1xyXG5cdFx0Zm9yIChjb25zdCBzZWxlY3RNb2RhbEVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xyXG5cdFx0XHRpZiAoc2VsZWN0TW9kYWxFbGVtZW50LmlkICE9PSBlbGVtZW50SWQpIHtcclxuXHRcdFx0XHRzZWxlY3RNb2RhbEVsZW1lbnQuc2V0SGlnaGxpZ2h0ZWQoZmFsc2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhY3RpdmF0ZUhpZ2hsaWdodGVkKCk6IHZvaWQge1xyXG5cdFx0Zm9yIChjb25zdCBzZWxlY3RNb2RhbEVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xyXG5cdFx0XHRpZiAoc2VsZWN0TW9kYWxFbGVtZW50LmlzSGlnaGxpZ2h0ZWQoKSkge1xyXG5cdFx0XHRcdHNlbGVjdE1vZGFsRWxlbWVudC5zZXRBY3RpdmUoIXNlbGVjdE1vZGFsRWxlbWVudC5pc0FjdGl2ZSgpKTtcclxuXHRcdFx0XHRpZiAoIXRoaXMuYWxsb3dNdWx0aVNlbGVjdCkge1xyXG5cdFx0XHRcdFx0dGhpcy5kaXNhYmxlQWxsT3RoZXJFbGVtZW50cyhzZWxlY3RNb2RhbEVsZW1lbnQuaWQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aGlnaGxpZ2h0VXAoKTogdm9pZCB7XHJcblx0XHRmb3IgKGNvbnN0IHNlbGVjdE1vZGFsRWxlbWVudCBvZiB0aGlzLmVsZW1lbnRzKSB7XHJcblx0XHRcdGlmIChzZWxlY3RNb2RhbEVsZW1lbnQuaXNIaWdobGlnaHRlZCgpKSB7XHJcblx0XHRcdFx0dGhpcy5nZXRQcmV2aW91c1NlbGVjdE1vZGFsRWxlbWVudChzZWxlY3RNb2RhbEVsZW1lbnQpPy5zZXRIaWdobGlnaHRlZCh0cnVlKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBub3RoaW5nIGlzIGhpZ2hsaWdodGVkXHJcblx0XHR0aGlzLmVsZW1lbnRzLmF0KC0xKT8uc2V0SGlnaGxpZ2h0ZWQodHJ1ZSk7XHJcblx0fVxyXG5cclxuXHRoaWdobGlnaHREb3duKCk6IHZvaWQge1xyXG5cdFx0Zm9yIChjb25zdCBzZWxlY3RNb2RhbEVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xyXG5cdFx0XHRpZiAoc2VsZWN0TW9kYWxFbGVtZW50LmlzSGlnaGxpZ2h0ZWQoKSkge1xyXG5cdFx0XHRcdHRoaXMuZ2V0TmV4dFNlbGVjdE1vZGFsRWxlbWVudChzZWxlY3RNb2RhbEVsZW1lbnQpPy5zZXRIaWdobGlnaHRlZCh0cnVlKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBub3RoaW5nIGlzIGhpZ2hsaWdodGVkXHJcblx0XHR0aGlzLmVsZW1lbnRzLmF0KDApPy5zZXRIaWdobGlnaHRlZCh0cnVlKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgZ2V0TmV4dFNlbGVjdE1vZGFsRWxlbWVudChlbGVtZW50OiBTZWxlY3RJbnB1dEZpZWxkRWxlbWVudCk6IFNlbGVjdElucHV0RmllbGRFbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuXHRcdGxldCBuZXh0SWQgPSBlbGVtZW50LmlkICsgMTtcclxuXHRcdG5leHRJZCA9IG1vZChuZXh0SWQsIHRoaXMuZWxlbWVudHMubGVuZ3RoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50cy5maWx0ZXIoeCA9PiB4LmlkID09PSBuZXh0SWQpLmF0KDApO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBnZXRQcmV2aW91c1NlbGVjdE1vZGFsRWxlbWVudChlbGVtZW50OiBTZWxlY3RJbnB1dEZpZWxkRWxlbWVudCk6IFNlbGVjdElucHV0RmllbGRFbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuXHRcdGxldCBuZXh0SWQgPSBlbGVtZW50LmlkIC0gMTtcclxuXHRcdG5leHRJZCA9IG1vZChuZXh0SWQsIHRoaXMuZWxlbWVudHMubGVuZ3RoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50cy5maWx0ZXIoeCA9PiB4LmlkID09PSBuZXh0SWQpLmF0KDApO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHtTZWxlY3RJbnB1dEZpZWxkfSBmcm9tICcuL1NlbGVjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkfSBmcm9tICcuLi9JbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCc7XHJcbmltcG9ydCB7YXJyYXlFcXVhbHN9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNdWx0aVNlbGVjdElucHV0RmllbGQgZXh0ZW5kcyBTZWxlY3RJbnB1dEZpZWxkIHtcclxuXHJcblx0Y29uc3RydWN0b3IoaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQ6IElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBvblZhbHVlQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gKHZvaWQgfCBQcm9taXNlPHZvaWQ+KSkge1xyXG5cdFx0c3VwZXIoaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQsIG9uVmFsdWVDaGFuZ2UpO1xyXG5cdFx0dGhpcy5hbGxvd011bHRpU2VsZWN0ID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGdldFZhbHVlKCk6IGFueSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50cy5maWx0ZXIoeCA9PiB4LmlzQWN0aXZlKCkpLm1hcCh4ID0+IHgudmFsdWUpO1xyXG5cdH1cclxuXHJcblx0c2V0VmFsdWUodmFsdWU6IHN0cmluZ1tdKTogdm9pZCB7XHJcblx0XHRpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdGZvciAoY29uc3QgZWxlbWVudCBvZiB0aGlzLmVsZW1lbnRzKSB7XHJcblx0XHRcdFx0ZWxlbWVudC5zZXRBY3RpdmUoZmFsc2UsIGZhbHNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0ZWxlbWVudExvb3AgOiBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xyXG5cdFx0XHRmb3IgKGNvbnN0IHZhbHVlRWxlbWVudCBvZiB2YWx1ZSkge1xyXG5cdFx0XHRcdGlmICh2YWx1ZUVsZW1lbnQgPT09IGVsZW1lbnQudmFsdWUpIHtcclxuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QWN0aXZlKHRydWUsIGZhbHNlKTtcclxuXHRcdFx0XHRcdGNvbnRpbnVlIGVsZW1lbnRMb29wO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbGVtZW50LnNldEFjdGl2ZShmYWxzZSwgZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aXNFcXVhbFZhbHVlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuXHRcdGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhcnJheUVxdWFscyh0aGlzLmdldFZhbHVlKCksIHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdGdldERlZmF1bHRWYWx1ZSgpOiBzdHJpbmdbXSB7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQge0Fic3RyYWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9BYnN0cmFjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge0Ryb3Bkb3duQ29tcG9uZW50LCBUZXh0Q29tcG9uZW50fSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7SW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGR9IGZyb20gJy4uL0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkJztcclxuaW1wb3J0IHtEYXRlLCBEYXRlRm9ybWF0LCBEYXRlUGFyc2VyfSBmcm9tICcuLi9wYXJzZXJzL0RhdGVQYXJzZXInO1xyXG5pbXBvcnQge01ldGFCaW5kSW50ZXJuYWxFcnJvcn0gZnJvbSAnLi4vdXRpbHMvVXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGVJbnB1dEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RJbnB1dEZpZWxkIHtcclxuXHRjb250YWluZXI6IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkO1xyXG5cdGRhdGU6IERhdGU7XHJcblxyXG5cdG1vbnRoczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcclxuXHRcdCcxJzogJ0phbnVhcnknLFxyXG5cdFx0JzInOiAnRmVicnVhcnknLFxyXG5cdFx0JzMnOiAnTWFyY2gnLFxyXG5cdFx0JzQnOiAnQXByaWwnLFxyXG5cdFx0JzUnOiAnTWF5JyxcclxuXHRcdCc2JzogJ0p1bmUnLFxyXG5cdFx0JzcnOiAnSnVseScsXHJcblx0XHQnOCc6ICdBdWd1c3QnLFxyXG5cdFx0JzknOiAnU2VwdGVtYmVyJyxcclxuXHRcdCcxMCc6ICdPY3RvYmVyJyxcclxuXHRcdCcxMSc6ICdOb3ZlbWJlcicsXHJcblx0XHQnMTInOiAnRGVjZW1iZXInLFxyXG5cdH07XHJcblx0ZGF5czogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuXHJcblx0bW9udGhDb21wb25lbnQ6IERyb3Bkb3duQ29tcG9uZW50IHwgdW5kZWZpbmVkO1xyXG5cdGRheUNvbXBvbmVudDogRHJvcGRvd25Db21wb25lbnQgfCB1bmRlZmluZWQ7XHJcblx0eWVhckNvbXBvbmVudDogVGV4dENvbXBvbmVudCB8IHVuZGVmaW5lZDtcclxuXHJcblxyXG5cdGNvbnN0cnVjdG9yKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkOiBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgb25WYWx1ZUNoYW5nZTogKHZhbHVlOiBhbnkpID0+ICh2b2lkIHwgUHJvbWlzZTx2b2lkPikpIHtcclxuXHRcdHN1cGVyKGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBvblZhbHVlQ2hhbmdlKTtcclxuXHJcblx0XHR0aGlzLmRhdGUgPSBEYXRlUGFyc2VyLmdldERlZmF1bHREYXRlKCk7XHJcblxyXG5cdFx0dGhpcy5kYXlzID0ge307XHJcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8PSAzMTsgaSsrKSB7XHJcblx0XHRcdHRoaXMuZGF5c1tpLnRvU3RyaW5nKCldID0gaS50b1N0cmluZygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIGdldEh0bWxFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuXHRcdGlmICghdGhpcy5jb250YWluZXIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndG9nZ2xlIGlucHV0IGNvbnRhaW5lciBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb250YWluZXI7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VmFsdWUoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBEYXRlUGFyc2VyLnN0cmluZ2lmeSh0aGlzLmRhdGUpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdGlmICghdGhpcy5tb250aENvbXBvbmVudCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdkYXRlIGlucHV0IG1vbnRoIGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHRcdGlmICghdGhpcy5kYXlDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignZGF0ZSBpbnB1dCBkYXkgY29tcG9uZW50IGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLnllYXJDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignZGF0ZSBpbnB1dCBob3VyIGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRhdGUgPSBEYXRlUGFyc2VyLnBhcnNlKHZhbHVlKSA/PyBEYXRlUGFyc2VyLmdldERlZmF1bHREYXRlKCk7XHJcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLmRhdGUpO1xyXG5cdFx0dGhpcy5tb250aENvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLmRhdGUuZ2V0TW9udGgoKS50b1N0cmluZygpKTtcclxuXHRcdHRoaXMuZGF5Q29tcG9uZW50LnNldFZhbHVlKHRoaXMuZGF0ZS5nZXREYXkoKS50b1N0cmluZygpKTtcclxuXHRcdHRoaXMueWVhckNvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLmRhdGUuZ2V0WWVhcigpLnRvU3RyaW5nKCkpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGlzRXF1YWxWYWx1ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdmFsdWUgPT0gdGhpcy5nZXRWYWx1ZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldERlZmF1bHRWYWx1ZSgpOiBhbnkge1xyXG5cdFx0cmV0dXJuIERhdGVQYXJzZXIuc3RyaW5naWZ5KERhdGVQYXJzZXIuZ2V0RGVmYXVsdERhdGUoKSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcmVuZGVyKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcclxuXHRcdHRoaXMuZGF0ZSA9IERhdGVQYXJzZXIucGFyc2UodGhpcy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZC5nZXRJbml0aWFsVmFsdWUoKSkgPz8gRGF0ZVBhcnNlci5nZXREZWZhdWx0RGF0ZSgpO1xyXG5cclxuXHRcdGNvbnRhaW5lci5yZW1vdmVDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1pbnB1dC13cmFwcGVyJyk7XHJcblx0XHRjb250YWluZXIuYWRkQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4tZmxleC1pbnB1dC13cmFwcGVyJywgJ21ldGEtYmluZC1wbHVnaW4taW5wdXQtZWxlbWVudC1ncm91cCcpO1xyXG5cclxuXHRcdGlmIChEYXRlUGFyc2VyLmRhdGVGb3JtYXQgPT09IERhdGVGb3JtYXQuRVUpIHtcclxuXHRcdFx0dGhpcy5kYXlDb21wb25lbnQgPSBuZXcgRHJvcGRvd25Db21wb25lbnQoY29udGFpbmVyKTtcclxuXHRcdFx0dGhpcy5kYXlDb21wb25lbnQuYWRkT3B0aW9ucyh0aGlzLmRheXMpO1xyXG5cdFx0XHR0aGlzLmRheUNvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLmRhdGUuZ2V0RGF5KCkudG9TdHJpbmcoKSk7XHJcblx0XHRcdHRoaXMuZGF5Q29tcG9uZW50Lm9uQ2hhbmdlKHRoaXMub25EYXlDaGFuZ2UuYmluZCh0aGlzKSk7XHJcblxyXG5cdFx0XHR0aGlzLm1vbnRoQ29tcG9uZW50ID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KGNvbnRhaW5lcik7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQuYWRkT3B0aW9ucyh0aGlzLm1vbnRocyk7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQuc2V0VmFsdWUodGhpcy5kYXRlLmdldE1vbnRoKCkudG9TdHJpbmcoKSk7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQub25DaGFuZ2UodGhpcy5vbk1vbnRoQ2hhbmdlLmJpbmQodGhpcykpO1xyXG5cclxuXHRcdFx0dGhpcy5kYXlDb21wb25lbnQuc2VsZWN0RWwuYWRkQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4taW5wdXQtZWxlbWVudC1ncm91cC1lbGVtZW50Jyk7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQuc2VsZWN0RWwuYWRkQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4taW5wdXQtZWxlbWVudC1ncm91cC1lbGVtZW50Jyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLm1vbnRoQ29tcG9uZW50ID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KGNvbnRhaW5lcik7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQuYWRkT3B0aW9ucyh0aGlzLm1vbnRocyk7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQuc2V0VmFsdWUodGhpcy5kYXRlLmdldE1vbnRoKCkudG9TdHJpbmcoKSk7XHJcblx0XHRcdHRoaXMubW9udGhDb21wb25lbnQub25DaGFuZ2UodGhpcy5vbk1vbnRoQ2hhbmdlLmJpbmQodGhpcykpO1xyXG5cclxuXHRcdFx0dGhpcy5kYXlDb21wb25lbnQgPSBuZXcgRHJvcGRvd25Db21wb25lbnQoY29udGFpbmVyKTtcclxuXHRcdFx0dGhpcy5kYXlDb21wb25lbnQuYWRkT3B0aW9ucyh0aGlzLmRheXMpO1xyXG5cdFx0XHR0aGlzLmRheUNvbXBvbmVudC5zZXRWYWx1ZSh0aGlzLmRhdGUuZ2V0RGF5KCkudG9TdHJpbmcoKSk7XHJcblx0XHRcdHRoaXMuZGF5Q29tcG9uZW50Lm9uQ2hhbmdlKHRoaXMub25EYXlDaGFuZ2UuYmluZCh0aGlzKSk7XHJcblxyXG5cdFx0XHR0aGlzLmRheUNvbXBvbmVudC5zZWxlY3RFbC5hZGRDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1pbnB1dC1lbGVtZW50LWdyb3VwLWVsZW1lbnQnKTtcclxuXHRcdFx0dGhpcy5tb250aENvbXBvbmVudC5zZWxlY3RFbC5hZGRDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1pbnB1dC1lbGVtZW50LWdyb3VwLWVsZW1lbnQnKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnllYXJDb21wb25lbnQgPSBuZXcgVGV4dENvbXBvbmVudChjb250YWluZXIpO1xyXG5cdFx0dGhpcy55ZWFyQ29tcG9uZW50LnNldFZhbHVlKHRoaXMuZGF0ZS5nZXRZZWFyKCkudG9TdHJpbmcoKSk7XHJcblx0XHR0aGlzLnllYXJDb21wb25lbnQub25DaGFuZ2UodGhpcy5vblllYXJDaGFuZ2UuYmluZCh0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy55ZWFyQ29tcG9uZW50LmlucHV0RWwuYWRkQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4tZGF0ZS1pbnB1dC15ZWFyLWlucHV0Jyk7XHJcblx0XHR0aGlzLnllYXJDb21wb25lbnQuaW5wdXRFbC5hZGRDbGFzcygnbWV0YS1iaW5kLXBsdWdpbi1pbnB1dC1lbGVtZW50LWdyb3VwLWVsZW1lbnQnKTtcclxuXHRcdHRoaXMueWVhckNvbXBvbmVudC5pbnB1dEVsLnR5cGUgPSAnbnVtYmVyJztcclxuXHRcdHRoaXMueWVhckNvbXBvbmVudC5pbnB1dEVsLm1heCA9ICc5OTk5JztcclxuXHJcblx0XHR0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgb25Nb250aENoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcblx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcblx0XHR0aGlzLmRhdGUuc2V0TW9udGhGcm9tU3RyaW5nKHZhbHVlKTtcclxuXHRcdHRoaXMub25WYWx1ZUNoYW5nZSh0aGlzLmdldFZhbHVlKCkpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBvbkRheUNoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcblx0XHR0aGlzLmRhdGUuc2V0RGF5RnJvbVN0cmluZyh2YWx1ZSk7XHJcblx0XHR0aGlzLm9uVmFsdWVDaGFuZ2UodGhpcy5nZXRWYWx1ZSgpKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgb25ZZWFyQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdHRoaXMuZGF0ZS5zZXRZZWFyRnJvbVN0cmluZyh2YWx1ZSk7XHJcblx0XHR0aGlzLm9uVmFsdWVDaGFuZ2UodGhpcy5nZXRWYWx1ZSgpKTtcclxuXHR9XHJcblxyXG59XHJcbiIsICJpbXBvcnQge0Fic3RyYWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9BYnN0cmFjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge0Ryb3Bkb3duQ29tcG9uZW50fSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7SW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGR9IGZyb20gJy4uL0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkJztcclxuaW1wb3J0IHtUaW1lLCBUaW1lUGFyc2VyfSBmcm9tICcuLi9wYXJzZXJzL1RpbWVQYXJzZXInO1xyXG5pbXBvcnQge01ldGFCaW5kSW50ZXJuYWxFcnJvcn0gZnJvbSAnLi4vdXRpbHMvVXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVJbnB1dEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RJbnB1dEZpZWxkIHtcclxuXHRjb250YWluZXI6IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkO1xyXG5cdHRpbWU6IFRpbWU7XHJcblxyXG5cdGhvdXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xyXG5cdG1pbnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcblxyXG5cdGhvdXJDb21wb25lbnQ6IERyb3Bkb3duQ29tcG9uZW50IHwgdW5kZWZpbmVkO1xyXG5cdG1pbnV0ZUNvbXBvbmVudDogRHJvcGRvd25Db21wb25lbnQgfCB1bmRlZmluZWQ7XHJcblxyXG5cclxuXHRjb25zdHJ1Y3RvcihpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZDogSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQsIG9uVmFsdWVDaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiAodm9pZCB8IFByb21pc2U8dm9pZD4pKSB7XHJcblx0XHRzdXBlcihpbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgb25WYWx1ZUNoYW5nZSk7XHJcblxyXG5cdFx0dGhpcy50aW1lID0gVGltZVBhcnNlci5nZXREZWZhdWx0VGltZSgpO1xyXG5cclxuXHRcdHRoaXMuaG91cnMgPSB7fTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDw9IDI0OyBpKyspIHtcclxuXHRcdFx0dGhpcy5ob3Vyc1tpLnRvU3RyaW5nKCldID0gaS50b1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubWludXRlcyA9IHt9O1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPD0gNTk7IGkrKykge1xyXG5cdFx0XHR0aGlzLm1pbnV0ZXNbaS50b1N0cmluZygpXSA9IGkudG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRIdG1sRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XHJcblx0XHRpZiAoIXRoaXMuY29udGFpbmVyKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ3RpbWUgaW5wdXQgY29udGFpbmVyIGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmNvbnRhaW5lcjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRWYWx1ZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIFRpbWVQYXJzZXIuc3RyaW5naWZ5KHRoaXMudGltZSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG5cdFx0aWYgKCF0aGlzLmhvdXJDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndGltZSBpbnB1dCBob3VyIGNvbXBvbmVudCBpcyB1bmRlZmluZWQnKTtcclxuXHRcdH1cclxuXHRcdGlmICghdGhpcy5taW51dGVDb21wb25lbnQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcigndGltZSBpbnB1dCBtaW51dGUgY29tcG9uZW50IGlzIHVuZGVmaW5lZCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudGltZSA9IFRpbWVQYXJzZXIucGFyc2UodmFsdWUpID8/IFRpbWVQYXJzZXIuZ2V0RGVmYXVsdFRpbWUoKTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMudGltZSk7XHJcblx0XHR0aGlzLmhvdXJDb21wb25lbnQuc2V0VmFsdWUodGhpcy50aW1lLmdldEhvdXIoKS50b1N0cmluZygpKTtcclxuXHRcdHRoaXMubWludXRlQ29tcG9uZW50LnNldFZhbHVlKHRoaXMudGltZS5nZXRNaW51dGUoKS50b1N0cmluZygpKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBpc0VxdWFsVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHZhbHVlID09IHRoaXMuZ2V0VmFsdWUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXREZWZhdWx0VmFsdWUoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBUaW1lUGFyc2VyLnN0cmluZ2lmeShUaW1lUGFyc2VyLmdldERlZmF1bHRUaW1lKCkpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHJlbmRlcihjb250YWluZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XHJcblx0XHR0aGlzLnRpbWUgPSBUaW1lUGFyc2VyLnBhcnNlKHRoaXMuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQuZ2V0SW5pdGlhbFZhbHVlKCkpID8/IFRpbWVQYXJzZXIuZ2V0RGVmYXVsdFRpbWUoKTtcclxuXHJcblx0XHRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4taW5wdXQtd3JhcHBlcicpO1xyXG5cdFx0Y29udGFpbmVyLmFkZENsYXNzKCdtZXRhLWJpbmQtcGx1Z2luLWZsZXgtaW5wdXQtd3JhcHBlcicsICdtZXRhLWJpbmQtcGx1Z2luLWlucHV0LWVsZW1lbnQtZ3JvdXAnKTtcclxuXHJcblx0XHR0aGlzLmhvdXJDb21wb25lbnQgPSBuZXcgRHJvcGRvd25Db21wb25lbnQoY29udGFpbmVyKTtcclxuXHRcdHRoaXMuaG91ckNvbXBvbmVudC5hZGRPcHRpb25zKHRoaXMuaG91cnMpO1xyXG5cdFx0dGhpcy5ob3VyQ29tcG9uZW50LnNldFZhbHVlKHRoaXMudGltZS5nZXRIb3VyKCkudG9TdHJpbmcoKSk7XHJcblx0XHR0aGlzLmhvdXJDb21wb25lbnQub25DaGFuZ2UodGhpcy5vbkhvdXJDaGFuZ2UuYmluZCh0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5taW51dGVDb21wb25lbnQgPSBuZXcgRHJvcGRvd25Db21wb25lbnQoY29udGFpbmVyKTtcclxuXHRcdHRoaXMubWludXRlQ29tcG9uZW50LmFkZE9wdGlvbnModGhpcy5taW51dGVzKTtcclxuXHRcdHRoaXMubWludXRlQ29tcG9uZW50LnNldFZhbHVlKHRoaXMudGltZS5nZXRNaW51dGUoKS50b1N0cmluZygpKTtcclxuXHRcdHRoaXMubWludXRlQ29tcG9uZW50Lm9uQ2hhbmdlKHRoaXMub25NaW51dGVDaGFuZ2UuYmluZCh0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5ob3VyQ29tcG9uZW50LnNlbGVjdEVsLmFkZENsYXNzKCdtZXRhLWJpbmQtcGx1Z2luLWlucHV0LWVsZW1lbnQtZ3JvdXAtZWxlbWVudCcpO1xyXG5cdFx0dGhpcy5taW51dGVDb21wb25lbnQuc2VsZWN0RWwuYWRkQ2xhc3MoJ21ldGEtYmluZC1wbHVnaW4taW5wdXQtZWxlbWVudC1ncm91cC1lbGVtZW50Jyk7XHJcblxyXG5cdFx0dGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIG9uSG91ckNoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcblx0XHR0aGlzLnRpbWUuc2V0SG91ckZyb21TdHJpbmcodmFsdWUpO1xyXG5cdFx0dGhpcy5vblZhbHVlQ2hhbmdlKHRoaXMuZ2V0VmFsdWUoKSk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIG9uTWludXRlQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdHRoaXMudGltZS5zZXRNaW51dGVGcm9tU3RyaW5nKHZhbHVlKTtcclxuXHRcdHRoaXMub25WYWx1ZUNoYW5nZSh0aGlzLmdldFZhbHVlKCkpO1xyXG5cdH1cclxufVxyXG4iLCAiZXhwb3J0IGNsYXNzIFRpbWUge1xyXG5cdHByaXZhdGUgX2hvdXI6IG51bWJlcjtcclxuXHRwcml2YXRlIF9taW51dGU6IG51bWJlcjtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR0aGlzLl9ob3VyID0gVGltZVBhcnNlci5nZXREZWZhdWx0SG91cigpO1xyXG5cdFx0dGhpcy5fbWludXRlID0gVGltZVBhcnNlci5nZXREZWZhdWx0SG91cigpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldEhvdXIoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLl9ob3VyO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldEhvdXIodmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG5cdFx0aWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDI0KSB7XHJcblx0XHRcdHRoaXMuX2hvdXIgPSBUaW1lUGFyc2VyLmdldERlZmF1bHRIb3VyKCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuX2hvdXIgPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRNaW51dGUoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLl9taW51dGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0TWludXRlKHZhbHVlOiBudW1iZXIpOiB2b2lkICB7XHJcblx0XHRpZiAodmFsdWUgPCAwIHx8IHZhbHVlID4gNTkpIHtcclxuXHRcdFx0dGhpcy5fbWludXRlID0gVGltZVBhcnNlci5nZXREZWZhdWx0TWludXRlKCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuX21pbnV0ZSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFVuaWZvcm1Ib3VyKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gKCcwMCcgKyB0aGlzLmdldEhvdXIoKS50b1N0cmluZygpKS5zbGljZSgtMik7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0VW5pZm9ybU1pbnV0ZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuICgnMDAnICsgdGhpcy5nZXRNaW51dGUoKS50b1N0cmluZygpKS5zbGljZSgtMik7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0SG91ckZyb21TdHJpbmcoc3RyOiBzdHJpbmcpOiB2b2lkICB7XHJcblx0XHRjb25zdCB2ID0gTnVtYmVyLnBhcnNlSW50KHN0cik7XHJcblx0XHR0aGlzLnNldEhvdXIoTnVtYmVyLmlzTmFOKHYpID8gVGltZVBhcnNlci5nZXREZWZhdWx0SG91cigpIDogdik7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0TWludXRlRnJvbVN0cmluZyhzdHI6IHN0cmluZyk6IHZvaWQgIHtcclxuXHRcdGNvbnN0IHYgPSBOdW1iZXIucGFyc2VJbnQoc3RyKTtcclxuXHRcdHRoaXMuc2V0TWludXRlKE51bWJlci5pc05hTih2KSA/IFRpbWVQYXJzZXIuZ2V0RGVmYXVsdE1pbnV0ZSgpIDogdik7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZVBhcnNlciB7XHJcblx0cHVibGljIHN0YXRpYyBwYXJzZSh0aW1lU3RyaW5nOiBzdHJpbmcpOiBUaW1lIHwgdW5kZWZpbmVkIHtcclxuXHRcdGNvbnN0IHRpbWU6IFRpbWUgPSBUaW1lUGFyc2VyLmdldERlZmF1bHRUaW1lKCk7XHJcblxyXG5cdFx0Y29uc3QgdGltZVBhcnRzID0gdGltZVN0cmluZy5zcGxpdCgnOicpO1xyXG5cdFx0aWYgKHRpbWVQYXJ0cy5sZW5ndGggIT09IDIpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHR0aW1lLnNldEhvdXJGcm9tU3RyaW5nKHRpbWVQYXJ0c1swXSk7XHJcblx0XHR0aW1lLnNldE1pbnV0ZUZyb21TdHJpbmcodGltZVBhcnRzWzFdKTtcclxuXHJcblx0XHRyZXR1cm4gdGltZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgc3RyaW5naWZ5KHRpbWU6IFRpbWUpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIGAke3RpbWUuZ2V0VW5pZm9ybUhvdXIoKX06JHt0aW1lLmdldFVuaWZvcm1NaW51dGUoKX1gO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXREZWZhdWx0VGltZSgpOiBUaW1lIHtcclxuXHRcdHJldHVybiBuZXcgVGltZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXREZWZhdWx0SG91cigpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIGdldERlZmF1bHRNaW51dGUoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHtlcXVhbE9ySW5jbHVkZXMsIGlzRmFsc3ksIE1ldGFCaW5kSW50ZXJuYWxFcnJvcn0gZnJvbSAnLi9VdGlscyc7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEVuY2xvc2luZ1BhaXIge1xyXG5cdHJlYWRvbmx5IG9wZW5pbmdFcXVhbHNDbG9zaW5nOiBib29sZWFuO1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgX29wZW5pbmdTdHJpbmc6IHN0cmluZztcclxuXHRwcml2YXRlIHJlYWRvbmx5IF9jbG9zaW5nU3RyaW5nOiBzdHJpbmc7XHJcblxyXG5cdGNvbnN0cnVjdG9yKG9wZW5pbmdTdHJpbmc6IHN0cmluZywgY2xvc2luZ1N0cmluZz86IHN0cmluZykge1xyXG5cdFx0aWYgKGlzRmFsc3kob3BlbmluZ1N0cmluZykpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignb3BlbmluZyBzdHJpbmcgbXVzdCBub3QgYmUgZW1wdHknKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm9wZW5pbmdFcXVhbHNDbG9zaW5nID0gaXNGYWxzeShjbG9zaW5nU3RyaW5nKSB8fCBvcGVuaW5nU3RyaW5nID09PSBjbG9zaW5nU3RyaW5nO1xyXG5cclxuXHRcdGlmICh0aGlzLm9wZW5pbmdFcXVhbHNDbG9zaW5nKSB7XHJcblx0XHRcdHRoaXMuX29wZW5pbmdTdHJpbmcgPSBvcGVuaW5nU3RyaW5nO1xyXG5cdFx0XHR0aGlzLl9jbG9zaW5nU3RyaW5nID0gb3BlbmluZ1N0cmluZztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuX29wZW5pbmdTdHJpbmcgPSBvcGVuaW5nU3RyaW5nO1xyXG5cdFx0XHQvLyBAdHMtaWdub3JlIHRoaXMgY2FuIG5vdCBiZSB1bmRlZmluZWQgaGVyZVxyXG5cdFx0XHR0aGlzLl9jbG9zaW5nU3RyaW5nID0gY2xvc2luZ1N0cmluZztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgb3BlbmluZ1N0cmluZygpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIHRoaXMuX29wZW5pbmdTdHJpbmc7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IGNsb3NpbmdTdHJpbmcoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLm9wZW5pbmdFcXVhbHNDbG9zaW5nID8gdGhpcy5fb3BlbmluZ1N0cmluZyA6IHRoaXMuX2Nsb3NpbmdTdHJpbmc7XHJcblx0fVxyXG5cclxuXHRvdmVybGFwcyhvdGhlcjogRW5jbG9zaW5nUGFpcik6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIGVxdWFsT3JJbmNsdWRlcyh0aGlzLm9wZW5pbmdTdHJpbmcsIG90aGVyLm9wZW5pbmdTdHJpbmcpIHx8XHJcblx0XHRcdGVxdWFsT3JJbmNsdWRlcyh0aGlzLm9wZW5pbmdTdHJpbmcsIG90aGVyLmNsb3NpbmdTdHJpbmcpIHx8XHJcblx0XHRcdGVxdWFsT3JJbmNsdWRlcyh0aGlzLmNsb3NpbmdTdHJpbmcsIG90aGVyLm9wZW5pbmdTdHJpbmcpIHx8XHJcblx0XHRcdGVxdWFsT3JJbmNsdWRlcyh0aGlzLmNsb3NpbmdTdHJpbmcsIG90aGVyLmNsb3NpbmdTdHJpbmcpO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzKG90aGVyOiBFbmNsb3NpbmdQYWlyKTogYm9vbGVhbiB7XHJcblx0XHRpZiAoaXNGYWxzeShvdGhlcikpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICh0aGlzLm9wZW5pbmdTdHJpbmcgPT09IG90aGVyLm9wZW5pbmdTdHJpbmcpICYmICh0aGlzLmNsb3NpbmdTdHJpbmcgPT09IG90aGVyLmNsb3NpbmdTdHJpbmcpO1xyXG5cdH1cclxuXHJcblx0dG9TdHJpbmcoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJzZXJVdGlscyB7XHJcblxyXG5cdC8vIFRPRE86IHJlbmFtZSBzdHVmZlxyXG5cdHN0YXRpYyBzcGxpdChzdHI6IHN0cmluZywgc2VwYXJhdG9yOiBzdHJpbmcsIGlnbm9yZT86IEVuY2xvc2luZ1BhaXIpOiBzdHJpbmdbXSB7XHJcblx0XHRpZiAoIXN0cikge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdzdHJpbmcgbXVzdCBub3QgYmUgZW1wdHknKTtcclxuXHRcdH1cclxuXHRcdGlmICghc2VwYXJhdG9yKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ3NlcGFyYXRvciBtdXN0IG5vdCBiZSBlbXB0eScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBzdWJTdHI6IHN0cmluZyA9ICcnO1xyXG5cdFx0Y29uc3Qgc3ViU3RyaW5nczogc3RyaW5nW10gPSBbXTtcclxuXHJcblx0XHRpZiAoaWdub3JlKSB7XHJcblx0XHRcdGxldCByZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgPSBQYXJzZXJVdGlscy5udW1iZXJPZk9jY3VycmVuY2VzKHN0ciwgaWdub3JlLm9wZW5pbmdTdHJpbmcpO1xyXG5cdFx0XHRsZXQgcmVtYWluaW5nQ2xvc2luZ1N0cmluZ0NvdW50ID0gUGFyc2VyVXRpbHMubnVtYmVyT2ZPY2N1cnJlbmNlcyhzdHIsIGlnbm9yZS5jbG9zaW5nU3RyaW5nKTtcclxuXHJcblx0XHRcdGxldCBlbmNsb3NpbmdMZXZlbDogbnVtYmVyID0gMDtcclxuXHJcblx0XHRcdHN0ckxvb3AgOiBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdC8vIGlnbm9yZSBzcGVjaWZpZWRcclxuXHRcdFx0XHRpZiAoZW5jbG9zaW5nTGV2ZWwgPT09IDAgJiYgUGFyc2VyVXRpbHMuaXNTdHJpbmdBdChzdHIsIHNlcGFyYXRvciwgaSkpIHtcclxuXHRcdFx0XHRcdHN1YlN0cmluZ3MucHVzaChzdWJTdHIpO1xyXG5cdFx0XHRcdFx0c3ViU3RyID0gJyc7XHJcblx0XHRcdFx0XHRpICs9IHNlcGFyYXRvci5sZW5ndGggLSAxO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKGlnbm9yZS5vcGVuaW5nRXF1YWxzQ2xvc2luZykge1xyXG5cdFx0XHRcdFx0aWYgKFBhcnNlclV0aWxzLmlzU3RyaW5nQXQoc3RyLCBpZ25vcmUub3BlbmluZ1N0cmluZywgaSkpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGVuY2xvc2luZ0xldmVsICUgMiA9PT0gMCAmJiByZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgPT09IDEpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBub3QgaW4gYSBwYXJ0IHRoYXQgc2hvdWxkIGJlIHJlbW92ZWQgYW5kIHRoZXJlIGlzIHN0aWxsIGFuIG9wZW5pbmcgc3RyaW5nIGxlZnQsIHNvIHdlIGlnbm9yZSBpdFxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGVuY2xvc2luZ0xldmVsICUgMiA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIG9wZW5pbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdFx0ZW5jbG9zaW5nTGV2ZWwgKz0gMTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gY29weSB0aGUgb3BlbmluZyBzdHJpbmdcclxuXHRcdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMTsgaiA8IGlnbm9yZS5vcGVuaW5nU3RyaW5nLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpICs9IDE7XHJcblx0XHRcdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIChpID49IHN0ci5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWsgc3RyTG9vcDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gY2xvc2luZyBzdHJpbmdcclxuXHRcdFx0XHRcdFx0XHRlbmNsb3NpbmdMZXZlbCAtPSAxO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBjb3B5IHRoZSBjbG9zaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0XHRcdGZvciAobGV0IGogPSAxOyBqIDwgaWdub3JlLmNsb3NpbmdTdHJpbmcubGVuZ3RoOyBqKyspIHsgLy8gKG9wZW5pbmcgYW5kIGNsb3Npbmcgc3RyaW5nIGFyZSB0aGUgc2FtZSlcclxuXHRcdFx0XHRcdFx0XHRcdGkgKz0gMTtcclxuXHRcdFx0XHRcdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGkgPj0gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhayBzdHJMb29wO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgLT0gMTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aWYgKFBhcnNlclV0aWxzLmlzU3RyaW5nQXQoc3RyLCBpZ25vcmUub3BlbmluZ1N0cmluZywgaSkpIHtcclxuXHRcdFx0XHRcdFx0Ly8gb3BlbmluZyBzdHJpbmdcclxuXHRcdFx0XHRcdFx0aWYgKHJlbWFpbmluZ09wZW5pbmdTdHJpbmdDb3VudCA8PSByZW1haW5pbmdDbG9zaW5nU3RyaW5nQ291bnQpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBzdHIgc3RpbGwgaGFzIHN1ZmZpY2llbnQgY2xvc2luZyBzdHJpbmcgdG8gZmluZCB0aGlzIGEgcGFydG5lclxyXG5cdFx0XHRcdFx0XHRcdGVuY2xvc2luZ0xldmVsICs9IDE7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGNvcHkgdGhlIG9wZW5pbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDE7IGogPCBpZ25vcmUub3BlbmluZ1N0cmluZy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0XHRcdFx0aSArPSAxO1xyXG5cdFx0XHRcdFx0XHRcdFx0c3ViU3RyICs9IHN0cltpXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoaSA+PSBzdHIubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrIHN0ckxvb3A7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJlbWFpbmluZ09wZW5pbmdTdHJpbmdDb3VudCAtPSAxO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChQYXJzZXJVdGlscy5pc1N0cmluZ0F0KHN0ciwgaWdub3JlLmNsb3NpbmdTdHJpbmcsIGkpKSB7XHJcblx0XHRcdFx0XHRcdC8vIGNsb3Npbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdGlmIChlbmNsb3NpbmdMZXZlbCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyB0aGVyZSB3YXMgYW4gb3BlbmluZyBzdHJpbmcgYmVmb3JlIHRoaXNcclxuXHRcdFx0XHRcdFx0XHRlbmNsb3NpbmdMZXZlbCAtPSAxO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBjb3B5IHRoZSBjbG9zaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0XHRcdGZvciAobGV0IGogPSAxOyBqIDwgaWdub3JlLmNsb3NpbmdTdHJpbmcubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdFx0XHRcdGkgKz0gMTtcclxuXHRcdFx0XHRcdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGkgPj0gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhayBzdHJMb29wO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZW1haW5pbmdDbG9zaW5nU3RyaW5nQ291bnQgLT0gMTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIG5vIGlnbm9yZSBzcGVjaWZpZWRcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0aWYgKFBhcnNlclV0aWxzLmlzU3RyaW5nQXQoc3RyLCBzZXBhcmF0b3IsIGkpKSB7XHJcblx0XHRcdFx0XHRzdWJTdHJpbmdzLnB1c2goc3ViU3RyKTtcclxuXHRcdFx0XHRcdHN1YlN0ciA9ICcnO1xyXG5cdFx0XHRcdFx0aSArPSBzZXBhcmF0b3IubGVuZ3RoIC0gMTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3ViU3RyICs9IHN0cltpXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRzdWJTdHJpbmdzLnB1c2goc3ViU3RyKTtcclxuXHJcblx0XHRyZXR1cm4gc3ViU3RyaW5ncztcclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZW1vdmVJbkJldHdlZW4oc3RyOiBzdHJpbmcsIGVuY2xvc2luZ1BhaXI6IEVuY2xvc2luZ1BhaXIpOiBzdHJpbmcge1xyXG5cdFx0aWYgKCFzdHIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignc3RyaW5nIG11c3Qgbm90IGJlIGVtcHR5Jyk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHJlbWFpbmluZ09wZW5pbmdTdHJpbmdDb3VudCA9IFBhcnNlclV0aWxzLm51bWJlck9mT2NjdXJyZW5jZXMoc3RyLCBlbmNsb3NpbmdQYWlyLm9wZW5pbmdTdHJpbmcpO1xyXG5cdFx0bGV0IHJlbWFpbmluZ0Nsb3NpbmdTdHJpbmdDb3VudCA9IFBhcnNlclV0aWxzLm51bWJlck9mT2NjdXJyZW5jZXMoc3RyLCBlbmNsb3NpbmdQYWlyLmNsb3NpbmdTdHJpbmcpO1xyXG5cclxuXHRcdGxldCBlbmNsb3NpbmdMZXZlbDogbnVtYmVyID0gMDtcclxuXHJcblx0XHRsZXQgc3ViU3RyOiBzdHJpbmcgPSAnJztcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoZW5jbG9zaW5nUGFpci5vcGVuaW5nRXF1YWxzQ2xvc2luZykge1xyXG5cdFx0XHRcdGlmIChQYXJzZXJVdGlscy5pc1N0cmluZ0F0KHN0ciwgZW5jbG9zaW5nUGFpci5vcGVuaW5nU3RyaW5nLCBpKSkge1xyXG5cdFx0XHRcdFx0aWYgKGVuY2xvc2luZ0xldmVsICUgMiA9PT0gMCAmJiByZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgPT09IDEpIHtcclxuXHRcdFx0XHRcdFx0Ly8gbm90IGluIGEgcGFydCB0aGF0IHNob3VsZCBiZSByZW1vdmVkIGFuZCB0aGVyZSBpcyBzdGlsbCBhbiBvcGVuaW5nIHN0cmluZyBsZWZ0LCBzbyB3ZSBpZ25vcmUgaXRcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZW5jbG9zaW5nTGV2ZWwgJSAyID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdC8vIG9wZW5pbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdGVuY2xvc2luZ0xldmVsICs9IDE7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBza2lwIHRoZSBvcGVuaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0XHRpICs9IGVuY2xvc2luZ1BhaXIub3BlbmluZ1N0cmluZy5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdGlmIChpID49IHN0ci5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gY2xvc2luZyBzdHJpbmdcclxuXHRcdFx0XHRcdFx0ZW5jbG9zaW5nTGV2ZWwgLT0gMTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHNraXAgdGhlIGNsb3Npbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdGkgKz0gZW5jbG9zaW5nUGFpci5jbG9zaW5nU3RyaW5nLmxlbmd0aDsgLy8gKG9wZW5pbmcgYW5kIGNsb3Npbmcgc3RyaW5nIGFyZSB0aGUgc2FtZSlcclxuXHRcdFx0XHRcdFx0aWYgKGkgPj0gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgLT0gMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKFBhcnNlclV0aWxzLmlzU3RyaW5nQXQoc3RyLCBlbmNsb3NpbmdQYWlyLm9wZW5pbmdTdHJpbmcsIGkpKSB7XHJcblx0XHRcdFx0XHQvLyBvcGVuaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0aWYgKHJlbWFpbmluZ09wZW5pbmdTdHJpbmdDb3VudCA8PSByZW1haW5pbmdDbG9zaW5nU3RyaW5nQ291bnQpIHtcclxuXHRcdFx0XHRcdFx0Ly8gc3RyIHN0aWxsIGhhcyBzdWZmaWNpZW50IGNsb3Npbmcgc3RyaW5nIHRvIGZpbmQgdGhpcyBhIHBhcnRuZXJcclxuXHRcdFx0XHRcdFx0ZW5jbG9zaW5nTGV2ZWwgKz0gMTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHNraXAgdGhlIG9wZW5pbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdGkgKz0gZW5jbG9zaW5nUGFpci5vcGVuaW5nU3RyaW5nLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0aWYgKGkgPj0gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgLT0gMTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKFBhcnNlclV0aWxzLmlzU3RyaW5nQXQoc3RyLCBlbmNsb3NpbmdQYWlyLmNsb3NpbmdTdHJpbmcsIGkpKSB7XHJcblx0XHRcdFx0XHQvLyBjbG9zaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0aWYgKGVuY2xvc2luZ0xldmVsID4gMCkge1xyXG5cdFx0XHRcdFx0XHQvLyB0aGVyZSB3YXMgYW4gb3BlbmluZyBzdHJpbmcgYmVmb3JlIHRoaXNcclxuXHRcdFx0XHRcdFx0ZW5jbG9zaW5nTGV2ZWwgLT0gMTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHNraXAgdGhlIGNsb3Npbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdGkgKz0gZW5jbG9zaW5nUGFpci5jbG9zaW5nU3RyaW5nLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0aWYgKGkgPj0gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZW1haW5pbmdDbG9zaW5nU3RyaW5nQ291bnQgLT0gMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChlbmNsb3NpbmdMZXZlbCA9PT0gMCkge1xyXG5cdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gc3ViU3RyO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldEluQmV0d2VlbihzdHI6IHN0cmluZywgZW5jbG9zaW5nUGFpcjogRW5jbG9zaW5nUGFpcik6IHN0cmluZyB8IHN0cmluZ1tdIHtcclxuXHRcdGlmICghc3RyKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZEludGVybmFsRXJyb3IoJ3N0cmluZyBtdXN0IG5vdCBiZSBlbXB0eScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCByZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgPSBQYXJzZXJVdGlscy5udW1iZXJPZk9jY3VycmVuY2VzKHN0ciwgZW5jbG9zaW5nUGFpci5vcGVuaW5nU3RyaW5nKTtcclxuXHRcdGxldCByZW1haW5pbmdDbG9zaW5nU3RyaW5nQ291bnQgPSBQYXJzZXJVdGlscy5udW1iZXJPZk9jY3VycmVuY2VzKHN0ciwgZW5jbG9zaW5nUGFpci5jbG9zaW5nU3RyaW5nKTtcclxuXHJcblx0XHRsZXQgZW5jbG9zaW5nTGV2ZWw6IG51bWJlciA9IDA7XHJcblxyXG5cdFx0bGV0IHN1YlN0cjogc3RyaW5nID0gJyc7XHJcblx0XHRjb25zdCBzdWJTdHJpbmdzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHRcdHN0ckxvb3AgOiBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoZW5jbG9zaW5nUGFpci5vcGVuaW5nRXF1YWxzQ2xvc2luZykge1xyXG5cdFx0XHRcdGlmIChQYXJzZXJVdGlscy5pc1N0cmluZ0F0KHN0ciwgZW5jbG9zaW5nUGFpci5vcGVuaW5nU3RyaW5nLCBpKSkge1xyXG5cdFx0XHRcdFx0aWYgKGVuY2xvc2luZ0xldmVsICUgMiA9PT0gMCAmJiByZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgPT09IDEpIHtcclxuXHRcdFx0XHRcdFx0Ly8gbm90IGluIGEgcGFydCB0aGF0IHNob3VsZCBiZSByZW1vdmVkIGFuZCB0aGVyZSBpcyBzdGlsbCBhbiBvcGVuaW5nIHN0cmluZyBsZWZ0LCBzbyB3ZSBpZ25vcmUgaXRcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZW5jbG9zaW5nTGV2ZWwgJSAyID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdC8vIG9wZW5pbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdGVuY2xvc2luZ0xldmVsICs9IDE7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBza2lwIHRoZSBvcGVuaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMTsgaiA8IGVuY2xvc2luZ1BhaXIub3BlbmluZ1N0cmluZy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0XHRcdGkgKz0gMTtcclxuXHRcdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoaSA+PSBzdHIubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzdHJMb29wO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gY2xvc2luZyBzdHJpbmdcclxuXHRcdFx0XHRcdFx0ZW5jbG9zaW5nTGV2ZWwgLT0gMTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHNraXAgdGhlIGNsb3Npbmcgc3RyaW5nXHJcblx0XHRcdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblx0XHRcdFx0XHRcdGZvciAobGV0IGogPSAxOyBqIDwgZW5jbG9zaW5nUGFpci5jbG9zaW5nU3RyaW5nLmxlbmd0aDsgaisrKSB7IC8vIChvcGVuaW5nIGFuZCBjbG9zaW5nIHN0cmluZyBhcmUgdGhlIHNhbWUpXHJcblx0XHRcdFx0XHRcdFx0aSArPSAxO1xyXG5cdFx0XHRcdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChpID4gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWsgc3RyTG9vcDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0c3ViU3RyaW5ncy5wdXNoKHN1YlN0cik7XHJcblx0XHRcdFx0XHRcdHN1YlN0ciA9ICcnO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmVtYWluaW5nT3BlbmluZ1N0cmluZ0NvdW50IC09IDE7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGlmIChlbmNsb3NpbmdMZXZlbCA+PSAxKSB7XHJcblx0XHRcdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmIChQYXJzZXJVdGlscy5pc1N0cmluZ0F0KHN0ciwgZW5jbG9zaW5nUGFpci5vcGVuaW5nU3RyaW5nLCBpKSkge1xyXG5cdFx0XHRcdFx0Ly8gb3BlbmluZyBzdHJpbmdcclxuXHRcdFx0XHRcdGlmIChyZW1haW5pbmdPcGVuaW5nU3RyaW5nQ291bnQgPD0gcmVtYWluaW5nQ2xvc2luZ1N0cmluZ0NvdW50KSB7XHJcblx0XHRcdFx0XHRcdC8vIHN0ciBzdGlsbCBoYXMgc3VmZmljaWVudCBjbG9zaW5nIHN0cmluZyB0byBmaW5kIHRoaXMgYSBwYXJ0bmVyXHJcblx0XHRcdFx0XHRcdGVuY2xvc2luZ0xldmVsICs9IDE7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBjb3B5IHRoZSBvcGVuaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMTsgaiA8IGVuY2xvc2luZ1BhaXIub3BlbmluZ1N0cmluZy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0XHRcdGkgKz0gMTtcclxuXHRcdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoaSA+PSBzdHIubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzdHJMb29wO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmVtYWluaW5nT3BlbmluZ1N0cmluZ0NvdW50IC09IDE7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChQYXJzZXJVdGlscy5pc1N0cmluZ0F0KHN0ciwgZW5jbG9zaW5nUGFpci5jbG9zaW5nU3RyaW5nLCBpKSkge1xyXG5cdFx0XHRcdFx0Ly8gY2xvc2luZyBzdHJpbmdcclxuXHRcdFx0XHRcdGlmIChlbmNsb3NpbmdMZXZlbCA+IDApIHtcclxuXHRcdFx0XHRcdFx0Ly8gdGhlcmUgd2FzIGFuIG9wZW5pbmcgc3RyaW5nIGJlZm9yZSB0aGlzXHJcblx0XHRcdFx0XHRcdGVuY2xvc2luZ0xldmVsIC09IDE7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBjb3B5IHRoZSBjbG9zaW5nIHN0cmluZ1xyXG5cdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBqID0gMTsgaiA8IGVuY2xvc2luZ1BhaXIuY2xvc2luZ1N0cmluZy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0XHRcdGkgKz0gMTtcclxuXHRcdFx0XHRcdFx0XHRzdWJTdHIgKz0gc3RyW2ldO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoaSA+IHN0ci5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHN0ckxvb3A7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoZW5jbG9zaW5nTGV2ZWwgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRzdWJTdHJpbmdzLnB1c2goc3ViU3RyKTtcclxuXHRcdFx0XHRcdFx0XHRzdWJTdHIgPSAnJztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmVtYWluaW5nQ2xvc2luZ1N0cmluZ0NvdW50IC09IDE7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGlmIChlbmNsb3NpbmdMZXZlbCA+PSAxKSB7XHJcblx0XHRcdFx0XHRcdHN1YlN0ciArPSBzdHJbaV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHN1YlN0cmluZ3MubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHJldHVybiAnJztcclxuXHRcdH0gZWxzZSBpZiAoc3ViU3RyaW5ncy5sZW5ndGggPT09IDEpIHtcclxuXHRcdFx0cmV0dXJuIHN1YlN0cmluZ3NbMF0uc3Vic3RyaW5nKGVuY2xvc2luZ1BhaXIub3BlbmluZ1N0cmluZy5sZW5ndGgsIHN1YlN0cmluZ3NbMF0ubGVuZ3RoIC0gZW5jbG9zaW5nUGFpci5jbG9zaW5nU3RyaW5nLmxlbmd0aCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gc3ViU3RyaW5ncy5tYXAoeCA9PiB4LnN1YnN0cmluZyhlbmNsb3NpbmdQYWlyLm9wZW5pbmdTdHJpbmcubGVuZ3RoLCB4Lmxlbmd0aCAtIGVuY2xvc2luZ1BhaXIuY2xvc2luZ1N0cmluZy5sZW5ndGgpKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBpc1N0cmluZ0F0KHN0cjogc3RyaW5nLCBzdWJTdHI6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG5cdFx0aWYgKGluZGV4IDwgMCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdpbmRleCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XHJcblx0XHR9XHJcblx0XHRpZiAoaW5kZXggPj0gc3RyLmxlbmd0aCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdpbmRleCBvdXQgb2YgYm91bmRzIG9mIHN0cmluZycpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFzdHIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignc3RyaW5nIG11c3Qgbm90IGJlIGVtcHR5Jyk7XHJcblx0XHR9XHJcblx0XHRpZiAoIXN1YlN0cikge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdzdWIgc3RyaW5nIG11c3Qgbm90IGJlIGVtcHR5Jyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdWJTdHIubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0aWYgKHN0cltpICsgaW5kZXhdICE9PSBzdWJTdHJbaV0pIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjb250YWlucyhzdHI6IHN0cmluZywgc3ViU3RyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBQYXJzZXJVdGlscy5udW1iZXJPZk9jY3VycmVuY2VzKHN0ciwgc3ViU3RyKSA+IDA7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbnVtYmVyT2ZPY2N1cnJlbmNlcyhzdHI6IHN0cmluZywgc3ViU3RyOiBzdHJpbmcpOiBudW1iZXIge1xyXG5cdFx0aWYgKCFzdHIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kSW50ZXJuYWxFcnJvcignc3RyaW5nIG11c3Qgbm90IGJlIGVtcHR5Jyk7XHJcblx0XHR9XHJcblx0XHRpZiAoIXN1YlN0cikge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRJbnRlcm5hbEVycm9yKCdzdWIgc3RyaW5nIG11c3Qgbm90IGJlIGVtcHR5Jyk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IG9jY3VycmVuY2VzID0gMDtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGlmIChQYXJzZXJVdGlscy5pc1N0cmluZ0F0KHN0ciwgc3ViU3RyLCBpKSkge1xyXG5cdFx0XHRcdG9jY3VycmVuY2VzICs9IDE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb2NjdXJyZW5jZXM7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQge0VuY2xvc2luZ1BhaXIsIFBhcnNlclV0aWxzfSBmcm9tICcuLi91dGlscy9QYXJzZXJVdGlscyc7XHJcbmltcG9ydCB7aXNUcnV0aHksIE1ldGFCaW5kUGFyc2luZ0Vycm9yfSBmcm9tICcuLi91dGlscy9VdGlscyc7XHJcblxyXG5leHBvcnQgZW51bSBJbnB1dEZpZWxkVHlwZSB7XHJcblx0VE9HR0xFID0gJ3RvZ2dsZScsXHJcblx0U0xJREVSID0gJ3NsaWRlcicsXHJcblx0VEVYVCA9ICd0ZXh0JyxcclxuXHRURVhUX0FSRUEgPSAndGV4dF9hcmVhJyxcclxuXHRTRUxFQ1QgPSAnc2VsZWN0JyxcclxuXHRNVUxUSV9TRUxFQ1QgPSAnbXVsdGlfc2VsZWN0JyxcclxuXHREQVRFID0gJ2RhdGUnLFxyXG5cdFRJTUUgPSAndGltZScsXHJcblx0SU5WQUxJRCA9ICdpbnZhbGlkJyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbnB1dEZpZWxkRGVjbGFyYXRpb24ge1xyXG5cdGZ1bGxEZWNsYXJhdGlvbjogc3RyaW5nO1xyXG5cdGRlY2xhcmF0aW9uOiBzdHJpbmc7XHJcblx0aW5wdXRGaWVsZFR5cGU6IElucHV0RmllbGRUeXBlO1xyXG5cdGlzQm91bmQ6IGJvb2xlYW47XHJcblx0YmluZFRhcmdldDogc3RyaW5nO1xyXG5cclxuXHRhcmd1bWVudHM6IElucHV0RmllbGRBcmd1bWVudFtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElucHV0RmllbGRBcmd1bWVudCB7XHJcblx0bmFtZTogc3RyaW5nO1xyXG5cdHZhbHVlOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIge1xyXG5cdHN0YXRpYyByb3VuZEJyYWNlc1BhaXI6IEVuY2xvc2luZ1BhaXIgPSBuZXcgRW5jbG9zaW5nUGFpcignKCcsICcpJyk7XHJcblx0c3RhdGljIHNxdWFyZUJyYWNlc1BhaXI6IEVuY2xvc2luZ1BhaXIgPSBuZXcgRW5jbG9zaW5nUGFpcignWycsICddJyk7XHJcblx0c3RhdGljIGN1cmx5QnJhY2VzUGFpcjogRW5jbG9zaW5nUGFpciA9IG5ldyBFbmNsb3NpbmdQYWlyKCd7JywgJ30nKTtcclxuXHRzdGF0aWMgYWxsQnJhY2VzUGFpcnM6IEVuY2xvc2luZ1BhaXJbXSA9IFtcclxuXHRcdElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5yb3VuZEJyYWNlc1BhaXIsXHJcblx0XHRJbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIuc3F1YXJlQnJhY2VzUGFpcixcclxuXHRcdElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5jdXJseUJyYWNlc1BhaXIsXHJcblx0XTtcclxuXHJcblxyXG5cdHN0YXRpYyBwYXJzZShmdWxsRGVjbGFyYXRpb246IHN0cmluZyk6IElucHV0RmllbGREZWNsYXJhdGlvbiB7XHJcblx0XHRjb25zdCBpbnB1dEZpZWxkRGVjbGFyYXRpb246IElucHV0RmllbGREZWNsYXJhdGlvbiA9IHt9IGFzIElucHV0RmllbGREZWNsYXJhdGlvbjtcclxuXHJcblx0XHQvLyBkZWNsYXJhdGlvblxyXG5cdFx0aW5wdXRGaWVsZERlY2xhcmF0aW9uLmZ1bGxEZWNsYXJhdGlvbiA9IGZ1bGxEZWNsYXJhdGlvbjtcclxuXHRcdGlucHV0RmllbGREZWNsYXJhdGlvbi5kZWNsYXJhdGlvbiA9IFBhcnNlclV0aWxzLmdldEluQmV0d2VlbihmdWxsRGVjbGFyYXRpb24sIElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5zcXVhcmVCcmFjZXNQYWlyKSBhcyBzdHJpbmc7XHJcblxyXG5cdFx0Ly8gZGVjbGFyYXRpb24gcGFydHNcclxuXHRcdGNvbnN0IGRlY2xhcmF0aW9uUGFydHM6IHN0cmluZ1tdID0gUGFyc2VyVXRpbHMuc3BsaXQoaW5wdXRGaWVsZERlY2xhcmF0aW9uLmRlY2xhcmF0aW9uLCAnOicsIElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5zcXVhcmVCcmFjZXNQYWlyKTtcclxuXHJcblx0XHQvLyBiaW5kIHRhcmdldFxyXG5cdFx0aW5wdXRGaWVsZERlY2xhcmF0aW9uLmJpbmRUYXJnZXQgPSBkZWNsYXJhdGlvblBhcnRzWzFdID8/ICcnO1xyXG5cdFx0aW5wdXRGaWVsZERlY2xhcmF0aW9uLmlzQm91bmQgPSBpc1RydXRoeShpbnB1dEZpZWxkRGVjbGFyYXRpb24uYmluZFRhcmdldCk7XHJcblxyXG5cdFx0Ly8gaW5wdXQgZmllbGQgdHlwZSBhbmQgYXJndW1lbnRzXHJcblx0XHRjb25zdCBpbnB1dEZpZWxkVHlwZVdpdGhBcmd1bWVudHM6IHN0cmluZyA9IGRlY2xhcmF0aW9uUGFydHNbMF07XHJcblx0XHQvLyBpbnB1dCBmaWVsZCB0eXBlXHJcblx0XHRjb25zdCBpbnB1dEZpZWxkVHlwZVN0cmluZyA9IFBhcnNlclV0aWxzLnJlbW92ZUluQmV0d2VlbihpbnB1dEZpZWxkVHlwZVdpdGhBcmd1bWVudHMsIElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5yb3VuZEJyYWNlc1BhaXIpO1xyXG5cdFx0aW5wdXRGaWVsZERlY2xhcmF0aW9uLmlucHV0RmllbGRUeXBlID0gSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyLmdldElucHV0RmllbGRUeXBlKGlucHV0RmllbGRUeXBlU3RyaW5nKTtcclxuXHRcdGlmIChpbnB1dEZpZWxkRGVjbGFyYXRpb24uaW5wdXRGaWVsZFR5cGUgPT09IElucHV0RmllbGRUeXBlLklOVkFMSUQpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kUGFyc2luZ0Vycm9yKGB1bmtub3duIGlucHV0IGZpZWxkIHR5cGUgXFwnJHtpbnB1dEZpZWxkVHlwZVN0cmluZ31cXCdgKTtcclxuXHRcdH1cclxuXHRcdC8vIGFyZ3VtZW50c1xyXG5cdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50c1N0cmluZzogc3RyaW5nID0gUGFyc2VyVXRpbHMuZ2V0SW5CZXR3ZWVuKGlucHV0RmllbGRUeXBlV2l0aEFyZ3VtZW50cywgSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyLnJvdW5kQnJhY2VzUGFpcikgYXMgc3RyaW5nO1xyXG5cdFx0Ly8gY29uc29sZS5sb2coaW5wdXRGaWVsZEFyZ3VtZW50c1N0cmluZyk7XHJcblx0XHRpZiAoaW5wdXRGaWVsZEFyZ3VtZW50c1N0cmluZykge1xyXG5cdFx0XHRpbnB1dEZpZWxkRGVjbGFyYXRpb24uYXJndW1lbnRzID0gSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyLnBhcnNlQXJndW1lbnRzKGlucHV0RmllbGRBcmd1bWVudHNTdHJpbmcsIGlucHV0RmllbGREZWNsYXJhdGlvbi5pbnB1dEZpZWxkVHlwZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpbnB1dEZpZWxkRGVjbGFyYXRpb24uYXJndW1lbnRzID0gW107XHJcblx0XHR9XHJcblx0XHQvLyBjb25zb2xlLmxvZyhpbnB1dEZpZWxkRGVjbGFyYXRpb24uYXJndW1lbnRzKTtcclxuXHJcblx0XHRyZXR1cm4gaW5wdXRGaWVsZERlY2xhcmF0aW9uO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHBhcnNlQXJndW1lbnRzKGlucHV0RmllbGRBcmd1bWVudHNTdHJpbmc6IHN0cmluZywgaW5wdXRGaWVsZFR5cGU6IElucHV0RmllbGRUeXBlKTogSW5wdXRGaWVsZEFyZ3VtZW50W10ge1xyXG5cdFx0Ly8gY29uc29sZS5sb2coJ2lucHV0RmllbGRBcmd1bWVudHNTdHJpbmcnLCBpbnB1dEZpZWxkQXJndW1lbnRzU3RyaW5nKTtcclxuXHRcdGxldCBpbnB1dEZpZWxkQXJndW1lbnRTdHJpbmdzOiBzdHJpbmdbXSA9IFBhcnNlclV0aWxzLnNwbGl0KGlucHV0RmllbGRBcmd1bWVudHNTdHJpbmcsICcsJywgSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyLnJvdW5kQnJhY2VzUGFpcik7XHJcblx0XHRpbnB1dEZpZWxkQXJndW1lbnRTdHJpbmdzID0gaW5wdXRGaWVsZEFyZ3VtZW50U3RyaW5ncy5tYXAoeCA9PiB4LnRyaW0oKSk7XHJcblxyXG5cdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50czogSW5wdXRGaWVsZEFyZ3VtZW50W10gPSBbXTtcclxuXHJcblx0XHRmb3IgKGNvbnN0IGlucHV0RmllbGRBcmd1bWVudFN0cmluZyBvZiBpbnB1dEZpZWxkQXJndW1lbnRTdHJpbmdzKSB7XHJcblx0XHRcdGNvbnN0IGlucHV0RmllbGRBcmd1bWVudE5hbWU6IHN0cmluZyA9IElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5leHRyYWN0SW5wdXRGaWVsZEFyZ3VtZW50TmFtZShpbnB1dEZpZWxkQXJndW1lbnRTdHJpbmcpO1xyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhpbnB1dEZpZWxkQXJndW1lbnROYW1lKTtcclxuXHJcblx0XHRcdGlmIChpbnB1dEZpZWxkQXJndW1lbnROYW1lID09PSAnY2xhc3MnKSB7XHJcblx0XHRcdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50VmFsdWU6IHN0cmluZyA9IElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5leHRyYWN0SW5wdXRGaWVsZEFyZ3VtZW50VmFsdWUoaW5wdXRGaWVsZEFyZ3VtZW50U3RyaW5nKTtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW5wdXRGaWVsZENsYXNzQXJndW1lbnQ6IElucHV0RmllbGRBcmd1bWVudCA9IHtuYW1lOiBpbnB1dEZpZWxkQXJndW1lbnROYW1lLCB2YWx1ZTogaW5wdXRGaWVsZEFyZ3VtZW50VmFsdWV9O1xyXG5cdFx0XHRcdGlucHV0RmllbGRBcmd1bWVudHMucHVzaChpbnB1dEZpZWxkQ2xhc3NBcmd1bWVudCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVsc2UgaWYgKGlucHV0RmllbGRBcmd1bWVudE5hbWUgPT09ICdhZGRMYWJlbHMnKSB7XHJcblx0XHRcdFx0aWYgKGlucHV0RmllbGRUeXBlICE9PSBJbnB1dEZpZWxkVHlwZS5TTElERVIpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRhQmluZFBhcnNpbmdFcnJvcihgYXJndW1lbnQgXFwnJHtpbnB1dEZpZWxkQXJndW1lbnROYW1lfVxcJyBpcyBvbmx5IGFwcGxpY2FibGUgdG8gc2xpZGVyIGlucHV0IGZpZWxkc2ApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aW5wdXRGaWVsZEFyZ3VtZW50cy5wdXNoKHtuYW1lOiAnbGFiZWxzJywgdmFsdWU6IHRydWV9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxzZSBpZiAoaW5wdXRGaWVsZEFyZ3VtZW50TmFtZSA9PT0gJ21pblZhbHVlJykge1xyXG5cdFx0XHRcdGlmIChpbnB1dEZpZWxkVHlwZSAhPT0gSW5wdXRGaWVsZFR5cGUuU0xJREVSKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRQYXJzaW5nRXJyb3IoYGFyZ3VtZW50IFxcJyR7aW5wdXRGaWVsZEFyZ3VtZW50TmFtZX1cXCcgaXMgb25seSBhcHBsaWNhYmxlIHRvIHNsaWRlciBpbnB1dCBmaWVsZHNgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IGlucHV0RmllbGRBcmd1bWVudFZhbHVlOiBzdHJpbmcgPSBJbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIuZXh0cmFjdElucHV0RmllbGRBcmd1bWVudFZhbHVlKGlucHV0RmllbGRBcmd1bWVudFN0cmluZyk7XHJcblx0XHRcdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50VmFsdWVBc051bWJlcjogbnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KGlucHV0RmllbGRBcmd1bWVudFZhbHVlKTtcclxuXHJcblx0XHRcdFx0aWYgKE51bWJlci5pc05hTihpbnB1dEZpZWxkQXJndW1lbnRWYWx1ZUFzTnVtYmVyKSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kUGFyc2luZ0Vycm9yKGBhcmd1bWVudCBcXCcke2lucHV0RmllbGRBcmd1bWVudE5hbWV9XFwnIHZhbHVlIG11c3QgYmUgb2YgdHlwZSBudW1iZXJgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IGlucHV0RmllbGRBcmd1bWVudE9iamVjdDogSW5wdXRGaWVsZEFyZ3VtZW50ID0ge25hbWU6IGlucHV0RmllbGRBcmd1bWVudE5hbWUsIHZhbHVlOiBpbnB1dEZpZWxkQXJndW1lbnRWYWx1ZUFzTnVtYmVyfTtcclxuXHRcdFx0XHRpbnB1dEZpZWxkQXJndW1lbnRzLnB1c2goaW5wdXRGaWVsZEFyZ3VtZW50T2JqZWN0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxzZSBpZiAoaW5wdXRGaWVsZEFyZ3VtZW50TmFtZSA9PT0gJ21heFZhbHVlJykge1xyXG5cdFx0XHRcdGlmIChpbnB1dEZpZWxkVHlwZSAhPT0gSW5wdXRGaWVsZFR5cGUuU0xJREVSKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRQYXJzaW5nRXJyb3IoYGFyZ3VtZW50IFxcJyR7aW5wdXRGaWVsZEFyZ3VtZW50TmFtZX1cXCcgaXMgb25seSBhcHBsaWNhYmxlIHRvIHNsaWRlciBpbnB1dCBmaWVsZHNgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IGlucHV0RmllbGRBcmd1bWVudFZhbHVlOiBzdHJpbmcgPSBJbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIuZXh0cmFjdElucHV0RmllbGRBcmd1bWVudFZhbHVlKGlucHV0RmllbGRBcmd1bWVudFN0cmluZyk7XHJcblx0XHRcdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50VmFsdWVBc051bWJlcjogbnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KGlucHV0RmllbGRBcmd1bWVudFZhbHVlKTtcclxuXHJcblx0XHRcdFx0aWYgKE51bWJlci5pc05hTihpbnB1dEZpZWxkQXJndW1lbnRWYWx1ZUFzTnVtYmVyKSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kUGFyc2luZ0Vycm9yKGBhcmd1bWVudCBcXCcke2lucHV0RmllbGRBcmd1bWVudE5hbWV9XFwnIHZhbHVlIG11c3QgYmUgb2YgdHlwZSBudW1iZXJgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IGlucHV0RmllbGRBcmd1bWVudE9iamVjdDogSW5wdXRGaWVsZEFyZ3VtZW50ID0ge25hbWU6IGlucHV0RmllbGRBcmd1bWVudE5hbWUsIHZhbHVlOiBpbnB1dEZpZWxkQXJndW1lbnRWYWx1ZUFzTnVtYmVyfTtcclxuXHRcdFx0XHRpbnB1dEZpZWxkQXJndW1lbnRzLnB1c2goaW5wdXRGaWVsZEFyZ3VtZW50T2JqZWN0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxzZSBpZiAoaW5wdXRGaWVsZEFyZ3VtZW50TmFtZSA9PT0gJ29wdGlvbicpIHtcclxuXHRcdFx0XHRpZiAoaW5wdXRGaWVsZFR5cGUgIT09IElucHV0RmllbGRUeXBlLlNFTEVDVCAmJiBpbnB1dEZpZWxkVHlwZSAhPT0gSW5wdXRGaWVsZFR5cGUuTVVMVElfU0VMRUNUKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRQYXJzaW5nRXJyb3IoYGFyZ3VtZW50IFxcJyR7aW5wdXRGaWVsZEFyZ3VtZW50TmFtZX1cXCcgaXMgb25seSBhcHBsaWNhYmxlIHRvIHNlbGVjdCBhbmQgbXVsdGktc2VsZWN0IGlucHV0IGZpZWxkc2ApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50VmFsdWU6IHN0cmluZyA9IElucHV0RmllbGREZWNsYXJhdGlvblBhcnNlci5leHRyYWN0SW5wdXRGaWVsZEFyZ3VtZW50VmFsdWUoaW5wdXRGaWVsZEFyZ3VtZW50U3RyaW5nKTtcclxuXHJcblx0XHRcdFx0Y29uc3QgaW5wdXRGaWVsZEFyZ3VtZW50T2JqZWN0OiBJbnB1dEZpZWxkQXJndW1lbnQgPSB7bmFtZTogaW5wdXRGaWVsZEFyZ3VtZW50TmFtZSwgdmFsdWU6IGlucHV0RmllbGRBcmd1bWVudFZhbHVlfTtcclxuXHRcdFx0XHRpbnB1dEZpZWxkQXJndW1lbnRzLnB1c2goaW5wdXRGaWVsZEFyZ3VtZW50T2JqZWN0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxzZSBpZiAoaW5wdXRGaWVsZEFyZ3VtZW50TmFtZSA9PT0gJ3RpdGxlJykge1xyXG5cdFx0XHRcdGlmIChpbnB1dEZpZWxkVHlwZSAhPT0gSW5wdXRGaWVsZFR5cGUuU0VMRUNUICYmIGlucHV0RmllbGRUeXBlICE9PSBJbnB1dEZpZWxkVHlwZS5NVUxUSV9TRUxFQ1QpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRhQmluZFBhcnNpbmdFcnJvcihgYXJndW1lbnQgXFwnJHtpbnB1dEZpZWxkQXJndW1lbnROYW1lfVxcJyBpcyBvbmx5IGFwcGxpY2FibGUgdG8gc2VsZWN0IGFuZCBtdWx0aS1zZWxlY3QgaW5wdXQgZmllbGRzYCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjb25zdCBpbnB1dEZpZWxkQXJndW1lbnRWYWx1ZTogc3RyaW5nID0gSW5wdXRGaWVsZERlY2xhcmF0aW9uUGFyc2VyLmV4dHJhY3RJbnB1dEZpZWxkQXJndW1lbnRWYWx1ZShpbnB1dEZpZWxkQXJndW1lbnRTdHJpbmcpO1xyXG5cclxuXHRcdFx0XHRjb25zdCBpbnB1dEZpZWxkQXJndW1lbnRPYmplY3Q6IElucHV0RmllbGRBcmd1bWVudCA9IHtuYW1lOiBpbnB1dEZpZWxkQXJndW1lbnROYW1lLCB2YWx1ZTogaW5wdXRGaWVsZEFyZ3VtZW50VmFsdWV9O1xyXG5cdFx0XHRcdGlucHV0RmllbGRBcmd1bWVudHMucHVzaChpbnB1dEZpZWxkQXJndW1lbnRPYmplY3QpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0YUJpbmRQYXJzaW5nRXJyb3IoYHVua25vd24gYXJndW1lbnQgXFwnJHtpbnB1dEZpZWxkQXJndW1lbnROYW1lfVxcJ2ApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGlucHV0RmllbGRBcmd1bWVudHM7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZXh0cmFjdElucHV0RmllbGRBcmd1bWVudE5hbWUoYXJndW1lbnRTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gUGFyc2VyVXRpbHMucmVtb3ZlSW5CZXR3ZWVuKGFyZ3VtZW50U3RyaW5nLCBJbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIucm91bmRCcmFjZXNQYWlyKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBleHRyYWN0SW5wdXRGaWVsZEFyZ3VtZW50VmFsdWUoYXJndW1lbnRTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0XHRjb25zdCBhcmd1bWVudE5hbWUgPSB0aGlzLmV4dHJhY3RJbnB1dEZpZWxkQXJndW1lbnROYW1lKGFyZ3VtZW50U3RyaW5nKTtcclxuXHJcblx0XHRjb25zdCBhcmd1bWVudFZhbHVlID0gUGFyc2VyVXRpbHMuZ2V0SW5CZXR3ZWVuKGFyZ3VtZW50U3RyaW5nLCBJbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXIucm91bmRCcmFjZXNQYWlyKSBhcyBzdHJpbmc7XHJcblx0XHRpZiAoIWFyZ3VtZW50VmFsdWUpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGFCaW5kUGFyc2luZ0Vycm9yKGBhcmd1bWVudCBcXCcke2FyZ3VtZW50TmFtZX1cXCcgcmVxdWlyZXMgYSBub24gZW1wdHkgdmFsdWVgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYXJndW1lbnRWYWx1ZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRJbnB1dEZpZWxkVHlwZShzdHI6IHN0cmluZyk6IElucHV0RmllbGRUeXBlIHtcclxuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMoSW5wdXRGaWVsZFR5cGUpKSB7XHJcblx0XHRcdGlmIChlbnRyeVsxXSA9PT0gc3RyKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVudHJ5WzFdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIElucHV0RmllbGRUeXBlLklOVkFMSUQ7XHJcblx0fVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHtUb2dnbGVJbnB1dEZpZWxkfSBmcm9tICcuL1RvZ2dsZUlucHV0RmllbGQnO1xyXG5pbXBvcnQge0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZFR5cGV9IGZyb20gJy4uL0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkJztcclxuaW1wb3J0IHtUZXh0SW5wdXRGaWVsZH0gZnJvbSAnLi9UZXh0SW5wdXRGaWVsZCc7XHJcbmltcG9ydCB7U2xpZGVySW5wdXRGaWVsZH0gZnJvbSAnLi9TbGlkZXJJbnB1dEZpZWxkJztcclxuaW1wb3J0IHtUZXh0QXJlYUlucHV0RmllbGR9IGZyb20gJy4vVGV4dEFyZWFJbnB1dEZpZWxkJztcclxuaW1wb3J0IHtTZWxlY3RJbnB1dEZpZWxkfSBmcm9tICcuL1NlbGVjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge011bHRpU2VsZWN0SW5wdXRGaWVsZH0gZnJvbSAnLi9NdWx0aVNlbGVjdElucHV0RmllbGQnO1xyXG5pbXBvcnQge0RhdGVJbnB1dEZpZWxkfSBmcm9tICcuL0RhdGVJbnB1dEZpZWxkJztcclxuaW1wb3J0IHtUaW1lSW5wdXRGaWVsZH0gZnJvbSAnLi9UaW1lSW5wdXRGaWVsZCc7XHJcbmltcG9ydCB7TWV0YUJpbmRQYXJzaW5nRXJyb3J9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuaW1wb3J0IHtBYnN0cmFjdElucHV0RmllbGR9IGZyb20gJy4vQWJzdHJhY3RJbnB1dEZpZWxkJztcclxuaW1wb3J0IHtJbnB1dEZpZWxkVHlwZX0gZnJvbSAnLi4vcGFyc2Vycy9JbnB1dEZpZWxkRGVjbGFyYXRpb25QYXJzZXInO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dEZpZWxkRmFjdG9yeSB7XHJcblx0c3RhdGljIGFsbG93Q29kZUJsb2NrTWFwOiBSZWNvcmQ8c3RyaW5nLCB7IGNvZGVCbG9jazogYm9vbGVhbiwgaW5saW5lQ29kZUJsb2NrOiBib29sZWFuIH0+ID0ge1xyXG5cdFx0W0lucHV0RmllbGRUeXBlLlRPR0dMRV06IHsgY29kZUJsb2NrOiBUb2dnbGVJbnB1dEZpZWxkLmFsbG93Q29kZUJsb2NrLCBpbmxpbmVDb2RlQmxvY2s6IFRvZ2dsZUlucHV0RmllbGQuYWxsb3dJbmxpbmVDb2RlQmxvY2sgfSxcclxuXHRcdFtJbnB1dEZpZWxkVHlwZS5TTElERVJdOiB7IGNvZGVCbG9jazogU2xpZGVySW5wdXRGaWVsZC5hbGxvd0NvZGVCbG9jaywgaW5saW5lQ29kZUJsb2NrOiBTbGlkZXJJbnB1dEZpZWxkLmFsbG93SW5saW5lQ29kZUJsb2NrIH0sXHJcblx0XHRbSW5wdXRGaWVsZFR5cGUuVEVYVF06IHsgY29kZUJsb2NrOiBUZXh0SW5wdXRGaWVsZC5hbGxvd0NvZGVCbG9jaywgaW5saW5lQ29kZUJsb2NrOiBUZXh0SW5wdXRGaWVsZC5hbGxvd0lubGluZUNvZGVCbG9jayB9LFxyXG5cdFx0W0lucHV0RmllbGRUeXBlLlRFWFRfQVJFQV06IHsgY29kZUJsb2NrOiBUZXh0QXJlYUlucHV0RmllbGQuYWxsb3dDb2RlQmxvY2ssIGlubGluZUNvZGVCbG9jazogVGV4dEFyZWFJbnB1dEZpZWxkLmFsbG93SW5saW5lQ29kZUJsb2NrIH0sXHJcblx0XHRbSW5wdXRGaWVsZFR5cGUuU0VMRUNUXTogeyBjb2RlQmxvY2s6IFNlbGVjdElucHV0RmllbGQuYWxsb3dDb2RlQmxvY2ssIGlubGluZUNvZGVCbG9jazogU2VsZWN0SW5wdXRGaWVsZC5hbGxvd0lubGluZUNvZGVCbG9jayB9LFxyXG5cdFx0W0lucHV0RmllbGRUeXBlLk1VTFRJX1NFTEVDVF06IHsgY29kZUJsb2NrOiBNdWx0aVNlbGVjdElucHV0RmllbGQuYWxsb3dDb2RlQmxvY2ssIGlubGluZUNvZGVCbG9jazogTXVsdGlTZWxlY3RJbnB1dEZpZWxkLmFsbG93SW5saW5lQ29kZUJsb2NrIH0sXHJcblx0XHRbSW5wdXRGaWVsZFR5cGUuREFURV06IHsgY29kZUJsb2NrOiBEYXRlSW5wdXRGaWVsZC5hbGxvd0NvZGVCbG9jaywgaW5saW5lQ29kZUJsb2NrOiBEYXRlSW5wdXRGaWVsZC5hbGxvd0lubGluZUNvZGVCbG9jayB9LFxyXG5cdFx0W0lucHV0RmllbGRUeXBlLlRJTUVdOiB7IGNvZGVCbG9jazogVGltZUlucHV0RmllbGQuYWxsb3dDb2RlQmxvY2ssIGlubGluZUNvZGVCbG9jazogVGltZUlucHV0RmllbGQuYWxsb3dJbmxpbmVDb2RlQmxvY2sgfSxcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjcmVhdGVJbnB1dEZpZWxkKGlucHV0RmllbGRUeXBlOiBJbnB1dEZpZWxkVHlwZSwgYXJnczogeyB0eXBlOiBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZFR5cGUsIGlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkOiBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgb25WYWx1ZUNoYW5nZWQ6ICh2YWx1ZTogYW55KSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPiB9KTogQWJzdHJhY3RJbnB1dEZpZWxkIHwgdW5kZWZpbmVkIHtcclxuXHRcdGlmIChpbnB1dEZpZWxkVHlwZSA9PT0gSW5wdXRGaWVsZFR5cGUuVE9HR0xFKSB7XHJcblx0XHRcdElucHV0RmllbGRGYWN0b3J5LmNoZWNrSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGRUeXBlQWxsb3dlZChpbnB1dEZpZWxkVHlwZSwgYXJncy50eXBlKTtcclxuXHRcdFx0cmV0dXJuIG5ldyBUb2dnbGVJbnB1dEZpZWxkKGFyZ3MuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQsIGFyZ3Mub25WYWx1ZUNoYW5nZWQpO1xyXG5cdFx0fSBlbHNlIGlmIChpbnB1dEZpZWxkVHlwZSA9PT0gSW5wdXRGaWVsZFR5cGUuU0xJREVSKSB7XHJcblx0XHRcdElucHV0RmllbGRGYWN0b3J5LmNoZWNrSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGRUeXBlQWxsb3dlZChpbnB1dEZpZWxkVHlwZSwgYXJncy50eXBlKTtcclxuXHRcdFx0cmV0dXJuIG5ldyBTbGlkZXJJbnB1dEZpZWxkKGFyZ3MuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQsIGFyZ3Mub25WYWx1ZUNoYW5nZWQpO1xyXG5cdFx0fSBlbHNlIGlmIChpbnB1dEZpZWxkVHlwZSA9PT0gSW5wdXRGaWVsZFR5cGUuVEVYVCkge1xyXG5cdFx0XHRJbnB1dEZpZWxkRmFjdG9yeS5jaGVja0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZUFsbG93ZWQoaW5wdXRGaWVsZFR5cGUsIGFyZ3MudHlwZSk7XHJcblx0XHRcdHJldHVybiBuZXcgVGV4dElucHV0RmllbGQoYXJncy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgYXJncy5vblZhbHVlQ2hhbmdlZCk7XHJcblx0XHR9IGVsc2UgaWYgKGlucHV0RmllbGRUeXBlID09PSBJbnB1dEZpZWxkVHlwZS5URVhUX0FSRUEpIHtcclxuXHRcdFx0SW5wdXRGaWVsZEZhY3RvcnkuY2hlY2tJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZFR5cGVBbGxvd2VkKGlucHV0RmllbGRUeXBlLCBhcmdzLnR5cGUpO1xyXG5cdFx0XHRyZXR1cm4gbmV3IFRleHRBcmVhSW5wdXRGaWVsZChhcmdzLmlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBhcmdzLm9uVmFsdWVDaGFuZ2VkKTtcclxuXHRcdH0gZWxzZSBpZiAoaW5wdXRGaWVsZFR5cGUgPT09IElucHV0RmllbGRUeXBlLlNFTEVDVCkge1xyXG5cdFx0XHRJbnB1dEZpZWxkRmFjdG9yeS5jaGVja0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZUFsbG93ZWQoaW5wdXRGaWVsZFR5cGUsIGFyZ3MudHlwZSk7XHJcblx0XHRcdHJldHVybiBuZXcgU2VsZWN0SW5wdXRGaWVsZChhcmdzLmlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBhcmdzLm9uVmFsdWVDaGFuZ2VkKTtcclxuXHRcdH0gZWxzZSBpZiAoaW5wdXRGaWVsZFR5cGUgPT09IElucHV0RmllbGRUeXBlLk1VTFRJX1NFTEVDVCkge1xyXG5cdFx0XHRJbnB1dEZpZWxkRmFjdG9yeS5jaGVja0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZUFsbG93ZWQoaW5wdXRGaWVsZFR5cGUsIGFyZ3MudHlwZSk7XHJcblx0XHRcdHJldHVybiBuZXcgTXVsdGlTZWxlY3RJbnB1dEZpZWxkKGFyZ3MuaW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGQsIGFyZ3Mub25WYWx1ZUNoYW5nZWQpO1xyXG5cdFx0fSBlbHNlIGlmIChpbnB1dEZpZWxkVHlwZSA9PT0gSW5wdXRGaWVsZFR5cGUuREFURSkge1xyXG5cdFx0XHRJbnB1dEZpZWxkRmFjdG9yeS5jaGVja0lucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZUFsbG93ZWQoaW5wdXRGaWVsZFR5cGUsIGFyZ3MudHlwZSk7XHJcblx0XHRcdHJldHVybiBuZXcgRGF0ZUlucHV0RmllbGQoYXJncy5pbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZCwgYXJncy5vblZhbHVlQ2hhbmdlZCk7XHJcblx0XHR9IGVsc2UgaWYgKGlucHV0RmllbGRUeXBlID09PSBJbnB1dEZpZWxkVHlwZS5USU1FKSB7XHJcblx0XHRcdElucHV0RmllbGRGYWN0b3J5LmNoZWNrSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGRUeXBlQWxsb3dlZChpbnB1dEZpZWxkVHlwZSwgYXJncy50eXBlKTtcclxuXHRcdFx0cmV0dXJuIG5ldyBUaW1lSW5wdXRGaWVsZChhcmdzLmlucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkLCBhcmdzLm9uVmFsdWVDaGFuZ2VkKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNoZWNrSW5wdXRGaWVsZE1hcmtkb3duUmVuZGVyQ2hpbGRUeXBlQWxsb3dlZChpbnB1dEZpZWxkVHlwZTogSW5wdXRGaWVsZFR5cGUsIHR5cGU6IElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZSk6IHZvaWQge1xyXG5cdFx0Y29uc3QgYWxsb3dDb2RlQmxvY2s6IHsgY29kZUJsb2NrOiBib29sZWFuOyBpbmxpbmVDb2RlQmxvY2s6IGJvb2xlYW4gfSA9IElucHV0RmllbGRGYWN0b3J5LmFsbG93Q29kZUJsb2NrTWFwW2lucHV0RmllbGRUeXBlXTtcclxuXHRcdGlmICh0eXBlID09PSBJbnB1dEZpZWxkTWFya2Rvd25SZW5kZXJDaGlsZFR5cGUuQ09ERV9CTE9DSyAmJiAhYWxsb3dDb2RlQmxvY2suY29kZUJsb2NrKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZFBhcnNpbmdFcnJvcihgXFwnJHtpbnB1dEZpZWxkVHlwZX1cXCcgaXMgbm90IGFsbG93ZWQgYXMgY29kZSBibG9ja2ApO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHR5cGUgPT09IElucHV0RmllbGRNYXJrZG93blJlbmRlckNoaWxkVHlwZS5JTkxJTkVfQ09ERV9CTE9DSyAmJiAhYWxsb3dDb2RlQmxvY2suaW5saW5lQ29kZUJsb2NrKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRhQmluZFBhcnNpbmdFcnJvcihgXFwnJHtpbnB1dEZpZWxkVHlwZX1cXCcgaXMgbm90IGFsbG93ZWQgYXMgaW5saW5lIGNvZGUgYmxvY2tgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFB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
